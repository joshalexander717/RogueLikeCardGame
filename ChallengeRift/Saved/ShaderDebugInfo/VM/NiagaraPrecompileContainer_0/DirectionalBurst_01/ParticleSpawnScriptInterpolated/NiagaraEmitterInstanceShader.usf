#line 1 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"
#line 6 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"
#pragma warning(disable:4008)
#line 7 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"
#line 1 "/Engine/Public/Platform.ush"
#line 9 "/Engine/Public/Platform.ush"
#line 1 "FP16Math.ush"
#line 10 "/Engine/Public/Platform.ush"
#line 43 "/Engine/Public/Platform.ush"
#line 1 "ShaderVersion.ush"
#line 44 "/Engine/Public/Platform.ush"
#line 595 "/Engine/Public/Platform.ush"
float min3( float a, float b, float c )
{
	return min( a, min( b, c ) );
}

float max3( float a, float b, float c )
{
	return max( a, max( b, c ) );
}

float2 min3( float2 a, float2 b, float2 c )
{
	return float2(
		min3( a.x, b.x, c.x ),
		min3( a.y, b.y, c.y )
	);
}

float2 max3( float2 a, float2 b, float2 c )
{
	return float2(
		max3( a.x, b.x, c.x ),
		max3( a.y, b.y, c.y )
	);
}

float3 max3( float3 a, float3 b, float3 c )
{
	return float3(
		max3( a.x, b.x, c.x ),
		max3( a.y, b.y, c.y ),
		max3( a.z, b.z, c.z )
	);
}

float3 min3( float3 a, float3 b, float3 c )
{
	return float3(
		min3( a.x, b.x, c.x ),
		min3( a.y, b.y, c.y ),
		min3( a.z, b.z, c.z )
	);
}

float4 min3( float4 a, float4 b, float4 c )
{
	return float4(
		min3( a.x, b.x, c.x ),
		min3( a.y, b.y, c.y ),
		min3( a.z, b.z, c.z ),
		min3( a.w, b.w, c.w )
	);
}

float4 max3( float4 a, float4 b, float4 c )
{
	return float4(
		max3( a.x, b.x, c.x ),
		max3( a.y, b.y, c.y ),
		max3( a.z, b.z, c.z ),
		max3( a.w, b.w, c.w )
	);
}




float UnpackByte0(uint v) { return float(v & 0xff); }
float UnpackByte1(uint v) { return float((v >> 8) & 0xff); }
float UnpackByte2(uint v) { return float((v >> 16) & 0xff); }
float UnpackByte3(uint v) { return float(v >> 24); }
#line 8 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"






	const static float PI = 3.1415926535897932f;

	const static float TWO_PI = 3.1415926535897932f*2.0f;
#line 18 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"
#line 1 "/Engine/Private/Definitions.usf"
#line 19 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"


float4 ModuloPrecise(float4 x, float4 y){ return x - y * trunc(x/y); }
float3 ModuloPrecise(float3 x, float3 y){ return x - y * trunc(x/y); }
float2 ModuloPrecise(float2 x, float2 y){ return x - y * trunc(x/y);}
float ModuloPrecise(float x, float y){ return x - y * trunc(x/y); }
int ModuloPrecise(int x, int y){ return x - y * (x/y); }
int Modulo(int x, int y){ return x - y * (x/y); }



float4 Reciprocal(float4 x){ return 1.0f/x;}
float3 Reciprocal(float3 x){ return 1.0f/x; }
float2 Reciprocal(float2 x){ return 1.0f/x;}
float Reciprocal(float x){ return 1.0f/x; }



bool NiagaraAll(bool b) { return b; }
bool NiagaraAny(bool b) { return b; }









bool NiagaraAll(bool2 b) { return b.x && b.y; }
bool NiagaraAll(bool3 b) { return b.x && b.y && b.z; }
bool NiagaraAll(bool4 b) { return b.x && b.y && b.z && b.w; }
bool NiagaraAny(bool2 b) { return b.x || b.y; }
bool NiagaraAny(bool3 b) { return b.x || b.y || b.z; }
bool NiagaraAny(bool4 b) { return b.x || b.y || b.z || b.w; }
#line 193 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"
float4 rand4(int Seed1, int Seed2, int Seed3, int Seed4)
{
	int4 v = int4(Seed4, Seed1, Seed2, Seed3) * 1664525 + 1013904223;

	v.x += v.y*v.w;
	v.y += v.z*v.x;
	v.z += v.x*v.y;
	v.w += v.y*v.z;
	v.x += v.y*v.w;
	v.y += v.z*v.x;
	v.z += v.x*v.y;
	v.w += v.y*v.z;






	return float4((v >> 8) & 0x00ffffff) / 16777216.0;

}







float3 rand3(int Seed1, int Seed2, int Seed3, int Seed4)
{
	int3 v = int3(Seed1, Seed2, Seed4 | (Seed3 << 16)) * 1664525 + 1013904223;

	v.x += v.y*v.z;
	v.y += v.z*v.x;
	v.z += v.x*v.y;
	v.x += v.y*v.z;
	v.y += v.z*v.x;
	v.z += v.x*v.y;

	return float3((v >> 8) & 0x00ffffff) / 16777216.0;
}


static int RandomCounterDeterministic = 0;


float rand(float x, int Seed1, int Seed2, int Seed3)
{
	RandomCounterDeterministic += 1;
	return rand3(Seed1, Seed2, Seed3, RandomCounterDeterministic).x * x;
}


float2 rand(float2 x, int Seed1, int Seed2, int Seed3)
{
	RandomCounterDeterministic += 1;
	return rand3(Seed1, Seed2, Seed3, RandomCounterDeterministic).xy * x;
}


float3 rand(float3 x, int Seed1, int Seed2, int Seed3)
{
	RandomCounterDeterministic += 1;
	return rand3(Seed1, Seed2, Seed3, RandomCounterDeterministic).xyz * x;
}


float4 rand(float4 x, int Seed1, int Seed2, int Seed3)
{
	RandomCounterDeterministic += 1;
	return rand4(Seed1, Seed2, Seed3, RandomCounterDeterministic).xyzw * x;
}


int rand(int x, int Seed1, int Seed2, int Seed3)
{


	RandomCounterDeterministic += 1;
	return int(rand3(Seed1, Seed2, Seed3, RandomCounterDeterministic).x * (x+1));
}
#line 323 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"
	float rand(float x);

	float2 rand(float2 x)
	{
		return float2(rand(x.x), rand(x.y));
	}

	float3 rand(float3 x)
	{
		return float3(rand(x.x), rand(x.y), rand(x.z));
	}

	float4 rand(float4 x)
	{
		return float4(rand(x.x), rand(x.y), rand(x.z), rand(x.w));
	}

	int rand(int x);



float rand_float(float x)
{
	return rand(x.x);
}

float2 rand_float(float2 x)
{
	return float2(rand_float(x.x), rand_float(x.y));
}

float3 rand_float(float3 x)
{
	return float3(rand_float(x.x), rand_float(x.y), rand_float(x.z));
}

float4 rand_float(float4 x)
{
	return float4(rand_float(x.x), rand_float(x.y), rand_float(x.z), rand_float(x.w));
}

int rand_int(int x)
{



	return rand_float(x.x);
}


float rand_float(float x, int Seed1, int Seed2, int Seed3)
{
	return rand(x.x, Seed1, Seed2, Seed3);
}

float2 rand_float(float2 x, int Seed1, int Seed2, int Seed3)
{
	return rand(x, Seed1, Seed2, Seed3);
}

float3 rand_float(float3 x, int Seed1, int Seed2, int Seed3)
{
	return rand(x, Seed1, Seed2, Seed3);
}

float4 rand_float(float4 x, int Seed1, int Seed2, int Seed3)
{
	return rand(x, Seed1, Seed2, Seed3);
}

int rand_int(int x, int Seed1, int Seed2, int Seed3)
{


	return rand(x.x-1, Seed1, Seed2, Seed3);
}
#line 405 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"
	float noise(float x);
	float noise(float2 x);
	float noise(float3 x);



	float4 Modulo(float4 x, float4 y);
	float3 Modulo(float3 x, float3 y);
	float2 Modulo(float2 x, float2 y);
	float Modulo(float x, float y);


	int ExecIndex();



	int AcquireIndex(int DataSetID, bool DoAcquire);

	void AcquireID(int DataSetID, out int IDIndex, out int IDAcquireTag);
	void UpdateID(int DataSetID, int IDIndex, int InstanceIndex);

	float InputDataFloat(int DataSetIndex, int RegisterIdx);
	int InputDataInt(int DataSetIndex, int RegisterIdx);
	bool InputDataBool(int DataSetIndex, int RegisterIdx);

	float InputDataNoadvanceFloat(int DataSetIndex, int RegisterIdx);
	int InputDataNoadvanceInt(int DataSetIndex, int RegisterIdx);
	bool InputDataNoadvanceBool(int DataSetIndex, int RegisterIdx);

	void OutputDataFloat(int DataSetIndex, int RegisterIndex, int InstanceIndex, float Value);
	void OutputDataInt(int DataSetIndex, int RegisterIndex, int InstanceIndex, int Value);
	void OutputDataBool(int DataSetIndex, int RegisterIndex, int InstanceIndex, bool Value);
#line 683 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"
	int OutputIndex(const int DataSetID, const bool bStageKillsParticles, const bool bIsValid)
	{
#line 698 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"
			return AcquireIndex(DataSetID, bIsValid);
	}
#line 702 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"
#line 1 "/Engine/Generated/NiagaraEmitterInstance.ush"




struct NiagaraRandInfo
{
	int Seed1;
	int Seed2;
	int Seed3;
};

struct NiagaraID
{
	int Index;
	int AcquireTag;
};

cbuffer FNiagaraGlobalParameters
{
	float Engine_DeltaTime;
	float Engine_InverseDeltaTime;
	float Engine_Time;
	float Engine_RealTime;
}

cbuffer FNiagaraSystemParameters
{
	float Engine_Owner_TimeSinceRendered;
	float Engine_Owner_LODDistance;
	float Engine_Owner_LODDistanceFraction;
	float Engine_System_Age;
	int Engine_Owner_ExecutionState;
	int Engine_System_TickCount;
	int Engine_System_NumEmitters;
	int Engine_System_NumEmittersAlive;
}

cbuffer FNiagaraOwnerParameters
{
	float4x4 Engine_Owner_SystemLocalToWorld;
	float4x4 Engine_Owner_SystemWorldToLocal;
	float4x4 Engine_Owner_SystemLocalToWorldTransposed;
	float4x4 Engine_Owner_SystemWorldToLocalTransposed;
	float4x4 Engine_Owner_SystemLocalToWorldNoScale;
	float4x4 Engine_Owner_SystemWorldToLocalNoScale;
	float4 Engine_Owner_Rotation;
	float4 Engine_Owner_Position;
	float4 Engine_Owner_Velocity;
	float4 Engine_Owner_SystemXAxis;
	float4 Engine_Owner_SystemYAxis;
	float4 Engine_Owner_SystemZAxis;
	float4 Engine_Owner_Scale;
}

cbuffer FNiagaraEmitterParameters
{
	int Engine_Emitter_NumParticles;
	int Engine_Emitter_TotalSpawnedParticles;
	float Engine_Emitter_SpawnCountScale;
	float Emitter_Age;
	int Emitter_RandomSeed;
	int Engine_Emitter_PaddingInt32_0;
	int Engine_Emitter_PaddingInt32_1;
	int Engine_Emitter_PaddingInt32_2;
}

cbuffer FNiagaraExternalParameters
{
	float4 User_Color;
	float4 User_SecondaryColor;
	float User_ColorBoost;
	int Constants_Emitter_UniformRangedLinearColor_RandomSeed;
	float Constants_Emitter_UniformRangedFloat004_Minimum;
	float Constants_Emitter_UniformRangedFloat004_Maximum;
	int Constants_Emitter_UniformRangedFloat004_RandomSeed;
	float Constants_Emitter_UniformRangedFloat005_Minimum;
	float Constants_Emitter_UniformRangedFloat005_Maximum;
	int Constants_Emitter_UniformRangedFloat005_RandomSeed;
	float2 Constants_Emitter_InitializeParticle_SpriteSize;
	float Constants_Emitter_InitializeParticle_SpriteRotation;
	float3 Constants_Emitter_InitializeParticle_MeshScale;
	float Constants_Emitter_CalculateSizeAndRotationalInertiaByMass_ManuallyEnteredDensityASC40kgASC47mASC943ASC41;
	float Constants_Emitter_CalculateSizeAndRotationalInertiaByMass_MassModulation;
	float2 Constants_Emitter_CalculateSizeAndRotationalInertiaByMass_SpriteSizeModulation;
	float Constants_Emitter_CalculateSizeAndRotationalInertiaByMass_Width;
	float Constants_Emitter_CalculateSizeAndRotationalInertiaByMass_Height;
	float Constants_Emitter_CalculateSizeAndRotationalInertiaByMass_Depth;
	float3 Constants_Emitter_CalculateSizeAndRotationalInertiaByMass_ModelProportions;
	float3 Constants_Emitter_CalculateSizeAndRotationalInertiaByMass_InitialModelDimensions;
	float User_Size;
	float Constants_Emitter_Multiply_Float001_A;
	int Constants_Emitter_SphereLocation_RandomSeed;
	float Constants_Emitter_SphereLocation_SurfaceOnlyBandThickness;
	float3 Constants_Emitter_SphereLocation_NonUniformScale;
	float3 Constants_Emitter_SphereLocation_Offset;
	int Constants_Emitter_SphereLocation_SpawnGroupMask;
	float Constants_Emitter_UniformRangedFloat_Minimum;
	float Constants_Emitter_UniformRangedFloat_Maximum;
	int Constants_Emitter_UniformRangedFloat_RandomSeed;
	float3 Constants_Emitter_GravityForce_Gravity;
	float Constants_Emitter_Drag_Drag;
	float Constants_Emitter_Drag_RotationalDrag;
	float Constants_Emitter_Collision_ParticleRadiusScale;
	float Constants_Emitter_Collision_Friction;
	float Constants_Emitter_Collision_StaticFriction;
	float Constants_Emitter_Collision_StaticFrictionEngagementSpeed;
	float Constants_Emitter_Collision_Restitution;
	float Constants_Emitter_Collision_RandomizeCollisionNormal;
	float Constants_Emitter_Collision_FrictionDuringaBounce;
	float Constants_Emitter_Collision_CPUTraceVectorLengthMultiplier;
	float Constants_Emitter_Collision_MaxCPUTraceLength;
	float Constants_Emitter_Collision_PercentageofPenetrationBeforeRest;
	float Constants_Emitter_Collision_RestStateTimeRange;
	float Constants_Emitter_Collision_MaximumPenetrationCorrectionDistance;
	float3 Constants_Emitter_Collision_ValidCollisionPlaneNormalForRest;
	float Constants_Emitter_Collision_MinimumCollisionNormalASC47RestNormalAlignmentPercentage;
	float Constants_Emitter_Collision_AdvancedAgingRate;
	float Constants_Emitter_SolveForcesAndVelocity_SpeedLimit;
	float Constants_Emitter_SolveForcesAndVelocity_AccelerationLimit;
	float Constants_Emitter_SpriteSizeScaleByVelocity_VelocityThreshold;
	float2 Constants_Emitter_SpriteSizeScaleByVelocity_MinScaleFactor;
	float2 Constants_Emitter_SpriteSizeScaleByVelocity_MaxScaleFactor;
	float Constants_Emitter_FloatFromCurve_ScaleCurve;
	int Engine_ExecutionCount;
	float Emitter_SpawnRate;
	float Emitter_SpawnInterval;
	float Emitter_InterpSpawnStartDt;
	int Emitter_SpawnGroup;
}

cbuffer PREV_FNiagaraGlobalParameters
{
	float PREV_Engine_DeltaTime;
	float PREV_Engine_InverseDeltaTime;
	float PREV_Engine_Time;
	float PREV_Engine_RealTime;
}

cbuffer PREV_FNiagaraSystemParameters
{
	float PREV_Engine_Owner_TimeSinceRendered;
	float PREV_Engine_Owner_LODDistance;
	float PREV_Engine_Owner_LODDistanceFraction;
	float PREV_Engine_System_Age;
	int PREV_Engine_Owner_ExecutionState;
	int PREV_Engine_System_TickCount;
	int PREV_Engine_System_NumEmitters;
	int PREV_Engine_System_NumEmittersAlive;
}

cbuffer PREV_FNiagaraOwnerParameters
{
	float4x4 PREV_Engine_Owner_SystemLocalToWorld;
	float4x4 PREV_Engine_Owner_SystemWorldToLocal;
	float4x4 PREV_Engine_Owner_SystemLocalToWorldTransposed;
	float4x4 PREV_Engine_Owner_SystemWorldToLocalTransposed;
	float4x4 PREV_Engine_Owner_SystemLocalToWorldNoScale;
	float4x4 PREV_Engine_Owner_SystemWorldToLocalNoScale;
	float4 PREV_Engine_Owner_Rotation;
	float4 PREV_Engine_Owner_Position;
	float4 PREV_Engine_Owner_Velocity;
	float4 PREV_Engine_Owner_SystemXAxis;
	float4 PREV_Engine_Owner_SystemYAxis;
	float4 PREV_Engine_Owner_SystemZAxis;
	float4 PREV_Engine_Owner_Scale;
}

cbuffer PREV_FNiagaraEmitterParameters
{
	int PREV_Engine_Emitter_NumParticles;
	int PREV_Engine_Emitter_TotalSpawnedParticles;
	float PREV_Engine_Emitter_SpawnCountScale;
	float PREV_Emitter_Age;
	int PREV_Emitter_RandomSeed;
	int PREV_Engine_Emitter_PaddingInt32_0;
	int PREV_Engine_Emitter_PaddingInt32_1;
	int PREV_Engine_Emitter_PaddingInt32_2;
}

cbuffer PREV_FNiagaraExternalParameters
{
	float4 PREV_User_Color;
	float4 PREV_User_SecondaryColor;
	float PREV_User_ColorBoost;
	int PREV_Constants_Emitter_UniformRangedLinearColor_RandomSeed;
	float PREV_Constants_Emitter_UniformRangedFloat004_Minimum;
	float PREV_Constants_Emitter_UniformRangedFloat004_Maximum;
	int PREV_Constants_Emitter_UniformRangedFloat004_RandomSeed;
	float PREV_Constants_Emitter_UniformRangedFloat005_Minimum;
	float PREV_Constants_Emitter_UniformRangedFloat005_Maximum;
	int PREV_Constants_Emitter_UniformRangedFloat005_RandomSeed;
	float2 PREV_Constants_Emitter_InitializeParticle_SpriteSize;
	float PREV_Constants_Emitter_InitializeParticle_SpriteRotation;
	float3 PREV_Constants_Emitter_InitializeParticle_MeshScale;
	float PREV_Constants_Emitter_CalculateSizeAndRotationalInertiaByMass_ManuallyEnteredDensityASC40kgASC47mASC943ASC41;
	float PREV_Constants_Emitter_CalculateSizeAndRotationalInertiaByMass_MassModulation;
	float2 PREV_Constants_Emitter_CalculateSizeAndRotationalInertiaByMass_SpriteSizeModulation;
	float PREV_Constants_Emitter_CalculateSizeAndRotationalInertiaByMass_Width;
	float PREV_Constants_Emitter_CalculateSizeAndRotationalInertiaByMass_Height;
	float PREV_Constants_Emitter_CalculateSizeAndRotationalInertiaByMass_Depth;
	float3 PREV_Constants_Emitter_CalculateSizeAndRotationalInertiaByMass_ModelProportions;
	float3 PREV_Constants_Emitter_CalculateSizeAndRotationalInertiaByMass_InitialModelDimensions;
	float PREV_User_Size;
	float PREV_Constants_Emitter_Multiply_Float001_A;
	int PREV_Constants_Emitter_SphereLocation_RandomSeed;
	float PREV_Constants_Emitter_SphereLocation_SurfaceOnlyBandThickness;
	float3 PREV_Constants_Emitter_SphereLocation_NonUniformScale;
	float3 PREV_Constants_Emitter_SphereLocation_Offset;
	int PREV_Constants_Emitter_SphereLocation_SpawnGroupMask;
	float PREV_Constants_Emitter_UniformRangedFloat_Minimum;
	float PREV_Constants_Emitter_UniformRangedFloat_Maximum;
	int PREV_Constants_Emitter_UniformRangedFloat_RandomSeed;
	float3 PREV_Constants_Emitter_GravityForce_Gravity;
	float PREV_Constants_Emitter_Drag_Drag;
	float PREV_Constants_Emitter_Drag_RotationalDrag;
	float PREV_Constants_Emitter_Collision_ParticleRadiusScale;
	float PREV_Constants_Emitter_Collision_Friction;
	float PREV_Constants_Emitter_Collision_StaticFriction;
	float PREV_Constants_Emitter_Collision_StaticFrictionEngagementSpeed;
	float PREV_Constants_Emitter_Collision_Restitution;
	float PREV_Constants_Emitter_Collision_RandomizeCollisionNormal;
	float PREV_Constants_Emitter_Collision_FrictionDuringaBounce;
	float PREV_Constants_Emitter_Collision_CPUTraceVectorLengthMultiplier;
	float PREV_Constants_Emitter_Collision_MaxCPUTraceLength;
	float PREV_Constants_Emitter_Collision_PercentageofPenetrationBeforeRest;
	float PREV_Constants_Emitter_Collision_RestStateTimeRange;
	float PREV_Constants_Emitter_Collision_MaximumPenetrationCorrectionDistance;
	float3 PREV_Constants_Emitter_Collision_ValidCollisionPlaneNormalForRest;
	float PREV_Constants_Emitter_Collision_MinimumCollisionNormalASC47RestNormalAlignmentPercentage;
	float PREV_Constants_Emitter_Collision_AdvancedAgingRate;
	float PREV_Constants_Emitter_SolveForcesAndVelocity_SpeedLimit;
	float PREV_Constants_Emitter_SolveForcesAndVelocity_AccelerationLimit;
	float PREV_Constants_Emitter_SpriteSizeScaleByVelocity_VelocityThreshold;
	float2 PREV_Constants_Emitter_SpriteSizeScaleByVelocity_MinScaleFactor;
	float2 PREV_Constants_Emitter_SpriteSizeScaleByVelocity_MaxScaleFactor;
	float PREV_Constants_Emitter_FloatFromCurve_ScaleCurve;
	int PREV_Engine_ExecutionCount;
	float PREV_Emitter_SpawnRate;
	float PREV_Emitter_SpawnInterval;
	float PREV_Emitter_InterpSpawnStartDt;
	int PREV_Emitter_SpawnGroup;
}

struct FParamMap0_VectorFromFloat
{
	float Value;
};

struct FParamMap0_Vector2DFromFloat
{
	float Value;
};

struct FParamMap0_User
{
	float4 Color;
	float ColorBoost;
	float4 SecondaryColor;
	float Size;
};

struct FParamMap0_UniformRangedLinearColor
{
	bool FixedRandomSeed;
	float4 Maximum;
	float4 Minimum;
	bool OverrideRandomness;
	bool OverrideSeed;
	int RandomnessMode;
	int RandomSeed;
};

struct FParamMap0_UniformRangedFloat005
{
	bool FixedRandomSeed;
	float Maximum;
	float Minimum;
	bool OverrideRandomness;
	bool OverrideSeed;
	int RandomnessMode;
	int RandomSeed;
};

struct FParamMap0_UniformRangedFloat004
{
	bool FixedRandomSeed;
	float Maximum;
	float Minimum;
	bool OverrideRandomness;
	bool OverrideSeed;
	int RandomnessMode;
	int RandomSeed;
};

struct FParamMap0_UniformRangedFloat
{
	bool FixedRandomSeed;
	float Maximum;
	float Minimum;
	bool OverrideRandomness;
	bool OverrideSeed;
	int RandomnessMode;
	int RandomSeed;
};

struct FParamMap0_Transient
{
	float CollisionDistanceToCollision;
	float CollisionFriction;
	bool CollisionIsResting;
	float3 CollisionNormal;
	float3 CollisionParticleRelativeCollisionLocation;
	float3 CollisionParticleWorldPosition;
	float CollisionRestitution;
	float CollisionSize;
	bool CollisionValid;
	float3 CollisionVelocity;
	float3 CollisionWorldPosition;
	float PhysicsDeltaTime;
	float PhysicsDrag;
	float3 PhysicsForce;
	float PhysicsRotationalDrag;
	float2 SpriteSizeScaleFactor;
};

struct FParamMap0_SpriteSizeScaleByVelocity
{
	float2 InitialSpriteSize;
	float2 MaxScaleFactor;
	float2 MinScaleFactor;
	bool SampleScaleFactorByCurve;
	float3 SourceVelocity;
	float VelocityThreshold;
};

struct FParamMap0_SphereLocation
{
	int CoordinateSpace;
	bool FixedRandomSeed;
	bool HemisphereX;
	bool HemisphereY;
	bool HemisphereZ;
	float3 NonUniformScale;
	bool NormalizeThickness;
	float3 Offset;
	bool OverrideRandomness;
	bool OverrideSeed;
	int RandomnessMode;
	int RandomSeed;
	int SpawnGroupMask;
	float3 SphereOrigin;
	float SphereRadius;
	int SurfaceExpansionMode;
	float SurfaceOnlyBandThickness;
};

struct FParamMap0_SolveForcesAndVelocity
{
	float AccelerationLimit;
	float DeltaTime;
	float3 Force;
	float Mass;
	float3 Position;
	float3 PreviousVelocity;
	float SpeedLimit;
	float3 Velocity;
	bool WritetoIntrinsicProperties;
};

struct FParamMap0_ScaleSpriteSize
{
	float2 InitialSpriteSize;
	float2 ScaleFactor;
};

struct FParamMap0_ParticleState
{
	float DeltaTime;
	float Lifetime;
};

struct FParamMap0_Particles_Initial
{
	float2 SpriteSize;
};

struct FParamMap0_Particles_Collision_CollisionQueryAndResponse001
{
	int CollisionID;
};

struct FParamMap0_Particles_Collision_CollisionQueryAndResponse
{
	int CollisionID;
};

struct FParamMap0_Particles_Collision
{
	FParamMap0_Particles_Collision_CollisionQueryAndResponse CollisionQueryAndResponse;
	FParamMap0_Particles_Collision_CollisionQueryAndResponse001 CollisionQueryAndResponse001;
};

struct FParamMap0_Particles
{
	float Age;
	FParamMap0_Particles_Collision Collision;
	float4 Color;
	bool HasCollided;
	FParamMap0_Particles_Initial Initial;
	float Lifetime;
	float Mass;
	float MaterialRandom;
	float NormalizedAge;
	int NumberOfCollisions;
	float3 Position;
	float3 PreviousVelocity;
	float RestCounter;
	float RotationalInertia;
	float3 Scale;
	float SpriteRotation;
	float2 SpriteSize;
	int UniqueID;
	float3 Velocity;
};

struct FParamMap0_OUTPUT_VAR_SphereLocation
{
	float3 SphereNormal;
};

struct FParamMap0_OUTPUT_VAR_SolveForcesAndVelocity
{
	float IncomingPhysicsDrag;
	float3 IncomingPhysicsForce;
	float3 Position;
	float3 Velocity;
};

struct FParamMap0_OUTPUT_VAR_ParticleState
{
	bool FirstFrame;
};

struct FParamMap0_OUTPUT_VAR_Collision_CollisionQueryAndResponse001
{
	float CollisionPenetrationDistance;
	bool DepthBasedCollisionParticleOccluded;
	bool ParticleOnScreen;
	bool PhysicsCollidesThisFrame;
};

struct FParamMap0_OUTPUT_VAR_Collision_CollisionQueryAndResponse
{
	float CollisionPenetrationDistance;
	bool DepthBasedCollisionParticleOccluded;
	bool ParticleOnScreen;
	bool PhysicsCollidesThisFrame;
};

struct FParamMap0_OUTPUT_VAR_Collision
{
	FParamMap0_OUTPUT_VAR_Collision_CollisionQueryAndResponse CollisionQueryAndResponse;
	FParamMap0_OUTPUT_VAR_Collision_CollisionQueryAndResponse001 CollisionQueryAndResponse001;
	bool CollisionValid;
	float3 ModuleCollision1Normal;
	bool ModuleCollision1Valid;
	float3 ModuleCollision2Normal;
	bool ModuleCollision2Valid;
	float3 ModuleCombinedCollisionNormal;
	float3 TempPreviousForce;
	float3 TempPreviousPosition;
	float3 TempPreviousVelocity;
};

struct FParamMap0_OUTPUT_VAR_CalculateSizeAndRotationalInertiaByMass
{
	float SphereRadius;
};

struct FParamMap0_OUTPUT_VAR
{
	FParamMap0_OUTPUT_VAR_CalculateSizeAndRotationalInertiaByMass CalculateSizeAndRotationalInertiaByMass;
	FParamMap0_OUTPUT_VAR_Collision Collision;
	FParamMap0_OUTPUT_VAR_ParticleState ParticleState;
	FParamMap0_OUTPUT_VAR_SolveForcesAndVelocity SolveForcesAndVelocity;
	FParamMap0_OUTPUT_VAR_SphereLocation SphereLocation;
};

struct FParamMap0_MultiplyLinearColor
{
	float4 LinearColor;
	float4 ScaleFactor;
};

struct FParamMap0_Multiply_Float001
{
	float A;
	float B;
};

struct FParamMap0_Multiply_Float
{
	float A;
	float B;
};

struct FParamMap0_MakeVector4_FromFloat
{
	float FLOAT_VAR;
};

struct FParamMap0_Local_SpriteSizeScaleByVelocity
{
	float NormalizedVelocityRange;
};

struct FParamMap0_Local_SphereLocation
{
	float3 SphereVector;
};

struct FParamMap0_Local_SolveForcesAndVelocity
{
	float DeltaTime;
	float Mass;
	float3 PhysicsForce;
};

struct FParamMap0_Local_Collision_CollisionQueryAndResponse001
{
	float3 ModuleAttemptedMovementThisUpdate;
	float3 ModuleForceContribution;
	float3 ModuleFrictionForceVectorInNewtons;
	float3 ModuleFrictionForceVelocityVector;
	bool ModuleInitialDataInstanceAlive;
	float3 ModuleInitialForceDividedByMass;
	float ModuleNormalForceInNewtons;
	float ModulePercentageOfTickDedicatedToUpdatingPosition;
	float ModulePhysicsDeltaTime;
	float3 ModulePlaneNormal;
	float3 ModulePlanePivotPoint;
	float3 ModuleReflectedVelocity;
	float3 ModuleReflectedVelocityWithFrictionApplied;
	bool ModuleRemoveRestitution;
	float3 ModuleReturnedCollisionNormal;
	bool ModuleReturnedCollisionValidBool;
	float3 ModuleReturnedCollisionWorldPosition;
	float ModuleReturnedFriction;
	float ModuleReturnedRestitution;
	float ModuleTickDeltaForThisCollisionUpdate;
	float3 ModuleTraceDirection;
	float3 ModuleTraceOrigin;
	float3 ModuleTraceVector;
	float3 ModuleTraceWorldEnd;
	float3 ModuleTraceWorldStart;
};

struct FParamMap0_Local_Collision_CollisionQueryAndResponse
{
	float3 ModuleAttemptedMovementThisUpdate;
	float3 ModuleForceContribution;
	float3 ModuleFrictionForceVectorInNewtons;
	float3 ModuleFrictionForceVelocityVector;
	bool ModuleInitialDataInstanceAlive;
	float3 ModuleInitialForceDividedByMass;
	float ModuleNormalForceInNewtons;
	float ModulePercentageOfTickDedicatedToUpdatingPosition;
	float ModulePhysicsDeltaTime;
	float3 ModulePlaneNormal;
	float3 ModulePlanePivotPoint;
	float3 ModuleReflectedVelocity;
	float3 ModuleReflectedVelocityWithFrictionApplied;
	bool ModuleRemoveRestitution;
	float3 ModuleReturnedCollisionNormal;
	bool ModuleReturnedCollisionValidBool;
	float3 ModuleReturnedCollisionWorldPosition;
	float ModuleReturnedFriction;
	float ModuleReturnedRestitution;
	float ModuleTickDeltaForThisCollisionUpdate;
	float3 ModuleTraceDirection;
	float3 ModuleTraceOrigin;
	float3 ModuleTraceVector;
	float3 ModuleTraceWorldEnd;
	float3 ModuleTraceWorldStart;
};

struct FParamMap0_Local_Collision
{
	FParamMap0_Local_Collision_CollisionQueryAndResponse CollisionQueryAndResponse;
	FParamMap0_Local_Collision_CollisionQueryAndResponse001 CollisionQueryAndResponse001;
	float ModuleParticleRadius;
	bool UpdateMeshRotation;
};

struct FParamMap0_Local_CalculateSizeAndRotationalInertiaByMass
{
	float CurrentDensity;
	float ParticleVolume;
	float3 UserMeshDimensionPreference;
	float2 UserSpriteDimensionPreference;
};

struct FParamMap0_Local
{
	FParamMap0_Local_CalculateSizeAndRotationalInertiaByMass CalculateSizeAndRotationalInertiaByMass;
	FParamMap0_Local_Collision Collision;
	FParamMap0_Local_SolveForcesAndVelocity SolveForcesAndVelocity;
	FParamMap0_Local_SphereLocation SphereLocation;
	FParamMap0_Local_SpriteSizeScaleByVelocity SpriteSizeScaleByVelocity;
};

struct FParamMap0_Interpolation
{
	float Emitter_InterpSpawnStartDt;
	int Emitter_SpawnGroup;
	float Emitter_SpawnInterval;
	int InterpSpawn_Index;
	float InterpSpawn_InvSpawnTime;
	float InterpSpawn_InvUpdateTime;
	float InterpSpawn_SpawnTime;
	float InterpSpawn_UpdateTime;
	float SpawnInterp;
};

struct FParamMap0_InitializeParticle
{
	float4 Color;
	float Lifetime;
	float Mass;
	float MaterialRandom;
	float3 MeshScale;
	float3 Position;
	float SpriteRotation;
	float2 SpriteSize;
	bool WriteColor;
	bool WriteLifetime;
	bool WriteMass;
	bool WriteMaterialRandom;
	bool WritePosition;
	bool WriteScale;
	bool WriteSpriteRotation;
	bool WriteSpriteSize;
};

struct FParamMap0_GravityForce
{
	float3 Gravity;
};

struct FParamMap0_FloatFromCurve
{
	float CurveIndex;
	float ScaleCurve;
};

struct FParamMap0_Engine_System
{
	float Age;
	int NumEmitters;
	int NumEmittersAlive;
	int TickCount;
};

struct FParamMap0_Engine_Owner
{
	int ExecutionState;
	float LODDistance;
	float LODDistanceFraction;
	float3 Position;
	float4 Rotation;
	float3 Scale;
	float4x4 SystemLocalToWorld;
	float4x4 SystemLocalToWorldNoScale;
	float4x4 SystemLocalToWorldTransposed;
	float4x4 SystemWorldToLocal;
	float4x4 SystemWorldToLocalNoScale;
	float4x4 SystemWorldToLocalTransposed;
	float3 SystemXAxis;
	float3 SystemYAxis;
	float3 SystemZAxis;
	float TimeSinceRendered;
	float3 Velocity;
};

struct FParamMap0_Engine_Emitter
{
	int NumParticles;
	int PaddingInt32_0;
	int PaddingInt32_1;
	int PaddingInt32_2;
	float SpawnCountScale;
	int TotalSpawnedParticles;
};

struct FParamMap0_Engine
{
	float DeltaTime;
	FParamMap0_Engine_Emitter Emitter;
	int ExecutionCount;
	float InverseDeltaTime;
	FParamMap0_Engine_Owner Owner;
	float RealTime;
	FParamMap0_Engine_System System;
	float Time;
};

struct FParamMap0_Emitter
{
	float Age;
	float InterpSpawnStartDt;
	bool LocalSpace;
	int RandomSeed;
	int SpawnGroup;
	float SpawnInterval;
	float SpawnRate;
};

struct FParamMap0_Drag
{
	float Drag;
	float RotationalDrag;
};

struct FParamMap0_DataInstance
{
	bool Alive;
};

struct FParamMap0_Constants_Emitter_UniformRangedLinearColor
{
	int RandomSeed;
};

struct FParamMap0_Constants_Emitter_UniformRangedFloat005
{
	float Maximum;
	float Minimum;
	int RandomSeed;
};

struct FParamMap0_Constants_Emitter_UniformRangedFloat004
{
	float Maximum;
	float Minimum;
	int RandomSeed;
};

struct FParamMap0_Constants_Emitter_UniformRangedFloat
{
	float Maximum;
	float Minimum;
	int RandomSeed;
};

struct FParamMap0_Constants_Emitter_SpriteSizeScaleByVelocity
{
	float2 MaxScaleFactor;
	float2 MinScaleFactor;
	float VelocityThreshold;
};

struct FParamMap0_Constants_Emitter_SphereLocation
{
	float3 NonUniformScale;
	float3 Offset;
	int RandomSeed;
	int SpawnGroupMask;
	float SurfaceOnlyBandThickness;
};

struct FParamMap0_Constants_Emitter_SolveForcesAndVelocity
{
	float AccelerationLimit;
	float SpeedLimit;
};

struct FParamMap0_Constants_Emitter_Multiply_Float001
{
	float A;
};

struct FParamMap0_Constants_Emitter_InitializeParticle
{
	float3 MeshScale;
	float SpriteRotation;
	float2 SpriteSize;
};

struct FParamMap0_Constants_Emitter_GravityForce
{
	float3 Gravity;
};

struct FParamMap0_Constants_Emitter_FloatFromCurve
{
	float ScaleCurve;
};

struct FParamMap0_Constants_Emitter_Drag
{
	float Drag;
	float RotationalDrag;
};

struct FParamMap0_Constants_Emitter_Collision
{
	float AdvancedAgingRate;
	float CPUTraceVectorLengthMultiplier;
	float Friction;
	float FrictionDuringaBounce;
	float MaxCPUTraceLength;
	float MaximumPenetrationCorrectionDistance;
	float MinimumCollisionNormalASC47RestNormalAlignmentPercentage;
	float ParticleRadiusScale;
	float PercentageofPenetrationBeforeRest;
	float RandomizeCollisionNormal;
	float Restitution;
	float RestStateTimeRange;
	float StaticFriction;
	float StaticFrictionEngagementSpeed;
	float3 ValidCollisionPlaneNormalForRest;
};

struct FParamMap0_Constants_Emitter_CalculateSizeAndRotationalInertiaByMass
{
	float Depth;
	float Height;
	float3 InitialModelDimensions;
	float ManuallyEnteredDensityASC40kgASC47mASC943ASC41;
	float MassModulation;
	float3 ModelProportions;
	float2 SpriteSizeModulation;
	float Width;
};

struct FParamMap0_Constants_Emitter
{
	FParamMap0_Constants_Emitter_CalculateSizeAndRotationalInertiaByMass CalculateSizeAndRotationalInertiaByMass;
	FParamMap0_Constants_Emitter_Collision Collision;
	FParamMap0_Constants_Emitter_Drag Drag;
	FParamMap0_Constants_Emitter_FloatFromCurve FloatFromCurve;
	FParamMap0_Constants_Emitter_GravityForce GravityForce;
	FParamMap0_Constants_Emitter_InitializeParticle InitializeParticle;
	FParamMap0_Constants_Emitter_Multiply_Float001 Multiply_Float001;
	FParamMap0_Constants_Emitter_SolveForcesAndVelocity SolveForcesAndVelocity;
	FParamMap0_Constants_Emitter_SphereLocation SphereLocation;
	FParamMap0_Constants_Emitter_SpriteSizeScaleByVelocity SpriteSizeScaleByVelocity;
	FParamMap0_Constants_Emitter_UniformRangedFloat UniformRangedFloat;
	FParamMap0_Constants_Emitter_UniformRangedFloat004 UniformRangedFloat004;
	FParamMap0_Constants_Emitter_UniformRangedFloat005 UniformRangedFloat005;
	FParamMap0_Constants_Emitter_UniformRangedLinearColor UniformRangedLinearColor;
};

struct FParamMap0_Constants
{
	FParamMap0_Constants_Emitter Emitter;
};

struct FParamMap0_Collision_CollisionQueryAndResponse001
{
	float BounceCollisionFriction;
	bool CollisionEnabled;
	float CollisionNormalRandomizationPercentage;
	int CPUFrictionMergeType;
	float DeltaTime;
	float DynamicFrictionCoefficient;
	float MaxIntersectionCorrectionDistance;
	float MaxTraceLength;
	float ParticleRadius;
	float ParticleRestitutionCoeffiecient;
	bool RandomizeCollisionNormal;
	float StaticFrictionCoefficient;
	float StaticFrictionEngagementSpeed;
	float TraceVectorLengthMultiplier;
	bool UpdateRotationalVelocity;
};

struct FParamMap0_Collision_CollisionQueryAndResponse
{
	float BounceCollisionFriction;
	bool CollisionEnabled;
	float CollisionNormalRandomizationPercentage;
	int CPUFrictionMergeType;
	float DeltaTime;
	float DynamicFrictionCoefficient;
	float MaxIntersectionCorrectionDistance;
	float MaxTraceLength;
	float ParticleRadius;
	float ParticleRestitutionCoeffiecient;
	bool RandomizeCollisionNormal;
	float StaticFrictionCoefficient;
	float StaticFrictionEngagementSpeed;
	float TraceVectorLengthMultiplier;
	bool UpdateRotationalVelocity;
};

struct FParamMap0_Collision
{
	float AdvancedAgingRate;
	bool CollisionEnabled;
	FParamMap0_Collision_CollisionQueryAndResponse CollisionQueryAndResponse;
	FParamMap0_Collision_CollisionQueryAndResponse001 CollisionQueryAndResponse001;
	bool ControlRestStateViaSurfaceNormal;
	bool CorrectInterpenetration;
	float CPUTraceVectorLengthMultiplier;
	bool EnableRestState;
	float Friction;
	float FrictionDuringaBounce;
	float MaxCPUTraceLength;
	float MaximumPenetrationCorrectionDistance;
	float MinimumCollisionNormalASC47RestNormalAlignmentPercentage;
	float ParticleRadiusScale;
	float PercentageofPenetrationBeforeRest;
	float RandomizeCollisionNormal;
	bool RandomizeCollisionNormalVector;
	float Restitution;
	float RestStateTimeRange;
	float StaticFriction;
	float StaticFrictionEngagementSpeed;
	float3 ValidCollisionPlaneNormalForRest;
};

struct FParamMap0_CalculateSizeAndRotationalInertiaByMass
{
	bool CalculateMeshScale;
	int DensitybyMaterialType;
	float Depth;
	float Height;
	float3 InitialModelDimensions;
	bool ManuallyEnterDensity;
	float ManuallyEnteredDensityASC40kgASC47mASC943ASC41;
	float MassModulation;
	float3 ModelProportions;
	float2 SpriteSizeModulation;
	float Width;
};

struct FParamMap0_AddVelocity
{
	int CoordinateSpace;
	float3 ScaleAddedVelocity;
	float3 Velocity;
};

struct FParamMap0
{
	FParamMap0_AddVelocity AddVelocity;
	FParamMap0_CalculateSizeAndRotationalInertiaByMass CalculateSizeAndRotationalInertiaByMass;
	FParamMap0_Collision Collision;
	FParamMap0_Constants Constants;
	FParamMap0_DataInstance DataInstance;
	FParamMap0_Drag Drag;
	FParamMap0_Emitter Emitter;
	FParamMap0_Engine Engine;
	FParamMap0_FloatFromCurve FloatFromCurve;
	FParamMap0_GravityForce GravityForce;
	FParamMap0_InitializeParticle InitializeParticle;
	FParamMap0_Interpolation Interpolation;
	FParamMap0_Local Local;
	FParamMap0_MakeVector4_FromFloat MakeVector4_FromFloat;
	FParamMap0_Multiply_Float Multiply_Float;
	FParamMap0_Multiply_Float001 Multiply_Float001;
	FParamMap0_MultiplyLinearColor MultiplyLinearColor;
	FParamMap0_OUTPUT_VAR OUTPUT_VAR;
	FParamMap0_Particles Particles;
	FParamMap0_ParticleState ParticleState;
	FParamMap0_ScaleSpriteSize ScaleSpriteSize;
	FParamMap0_SolveForcesAndVelocity SolveForcesAndVelocity;
	FParamMap0_SphereLocation SphereLocation;
	FParamMap0_SpriteSizeScaleByVelocity SpriteSizeScaleByVelocity;
	FParamMap0_Transient Transient;
	FParamMap0_UniformRangedFloat UniformRangedFloat;
	FParamMap0_UniformRangedFloat004 UniformRangedFloat004;
	FParamMap0_UniformRangedFloat005 UniformRangedFloat005;
	FParamMap0_UniformRangedLinearColor UniformRangedLinearColor;
	FParamMap0_User User;
	FParamMap0_Vector2DFromFloat Vector2DFromFloat;
	FParamMap0_VectorFromFloat VectorFromFloat;
};

struct FSimulationContext
{
	FParamMap0 MapSpawn;
	FParamMap0 MapUpdate;
};

static float HackSpawnInterp = 1.0;
void GetRandomInfo_Emitter_Determinism_false_Func_(int In_Seed, int In_Engine_System_TickCount, bool In_OverrideSeed, int In_Particles_UniqueID, int In_Emitter_RandomSeed, bool In_FixedOverrideSeed, int In_RandomnessMode, out NiagaraRandInfo Out_RandomInfo, out bool Out_UseDeterministicRandoms, inout FSimulationContext Context);
void RandomRangeFloat_Func_(float In_Min, float In_Max, int In_Seed, int In_RandomnessMode, bool In_OverrideSeed, bool In_FixedOverrideSeed, out float Out_Result, inout FSimulationContext Context);
void UniformRangedLinearColor_Emitter_Func_(out float4 Out_UniformRangedLinearColor, inout FSimulationContext Context);
void MakeVector4_FromFloat_Emitter_Func_(out float4 Out_Vector4, inout FSimulationContext Context);
void UniformRangedFloat004_Emitter_Func_(out float Out_UniformRangedFloat, inout FSimulationContext Context);
void UniformRangedFloat005_Emitter_Func_(out float Out_UniformRangedFloat, inout FSimulationContext Context);
void ParticleOwnerPosition_Emitter_Func_(out float3 Out_OutPosition, inout FSimulationContext Context);
void MultiplyLinearColor_Emitter_Func_(out float4 Out_LinearColor, inout FSimulationContext Context);
void InitializeParticle_SimulationPosition_Emitter_Func_(out float3 Out_OutPosition, inout FSimulationContext Context);
void RandomRangeFloat_Func_(float In_Min, float In_Max, int In_Seed, int In_RandomnessMode, bool In_OverrideSeed, out float Out_Result, inout FSimulationContext Context);
void InitializeParticle_Emitter_Func_(inout FSimulationContext Context);
void CalculateSizeAndRotationalInertiaByMass_Emitter_Func_(inout FSimulationContext Context);
void Multiply_Float001_Emitter_Func_(out float Out_Result, inout FSimulationContext Context);
void RandomRangeFloat_Func_(float3 In_Min, float3 In_Max, int In_Seed, int In_RandomnessMode, bool In_OverrideSeed, bool In_FixedOverrideSeed, out float3 Out_Result, inout FSimulationContext Context);
void RandomPointInSphere_Func_(float In_InnerRadius, float In_OuterRadius, int In_RandomnessMode, bool In_OverrideSeed, int In_Seed, bool In_FixedOverrideSeed, out float3 Out_Ouput, inout FSimulationContext Context);
void CustomHlsl99D2D00244511A096EA5088DE8D89968_Func_(bool In_X, bool In_Y, bool In_Z, out float3 Out_Output);
void TransformBase_Func_(int In_SourceSpace, int In_DestinationSpace, float4x4 In_LocalToWorldTransform, float4x4 In_WorldToLocalTransform, bool In_bLocalSpace, out bool Out_bUseOriginal, out float4x4 Out_OutTransform, inout FSimulationContext Context);
void SphereLocation_NF_TransformVector_Emitter_Func_(float3 In_InVector, int In_SourceSpace, int In_DestinationSpace, bool In_ApplyScale, out float3 Out_OutVector, inout FSimulationContext Context);
void SphereLocation_Emitter_Func_(inout FSimulationContext Context);
void UniformRangedFloat_Emitter_Func_(out float Out_UniformRangedFloat, inout FSimulationContext Context);
void Multiply_Float_Emitter_Func_(out float Out_Result, inout FSimulationContext Context);
void VectorFromFloat_Emitter_Func_(out float3 Out_Vec3, inout FSimulationContext Context);
void AddVelocity_TransformVector_Emitter_Func_(float3 In_InVector, int In_SourceSpace, int In_DestinationSpace, bool In_ApplyScale, out float3 Out_OutVector, inout FSimulationContext Context);
void AddVelocity_Emitter_Func_(inout FSimulationContext Context);
void ParticleState_Emitter_Func_(inout FSimulationContext Context);
void GravityForce_NF_TransformVector_Emitter_Func_(float3 In_InVector, int In_SourceSpace, int In_DestinationSpace, bool In_ApplyScale, out float3 Out_OutVector, inout FSimulationContext Context);
void GravityForce_Emitter_Func_(inout FSimulationContext Context);
void Drag_Emitter_Func_(inout FSimulationContext Context);
void CalculateRadiusFromSpriteSize_Method_NewEnumerator0_Func_(float2 In_SpriteSize, out float Out_Radius, inout FSimulationContext Context);
void Collision_TransformPosition_Emitter_Func_(float3 In_InPosition, int In_SourceSpace, int In_DestinationSpace, bool In_ApplyScale, out float3 Out_OutPosition, inout FSimulationContext Context);
void Collision_TransformVector002_Emitter_Func_(float3 In_InVector, int In_SourceSpace, int In_DestinationSpace, bool In_ApplyScale, out float3 Out_OutVector, inout FSimulationContext Context);
void Collision_TransformVector003_Emitter_Func_(float3 In_InVector, int In_SourceSpace, int In_DestinationSpace, bool In_ApplyScale, out float3 Out_OutVector, inout FSimulationContext Context);
void DirectionAndLengthSafe_Func_(float3 In_V, float3 In_Fallback, float In_Threshold, float In_FallbackLength, out float3 Out_Direction, out float Out_Length, out bool Out_BelowThreshold, inout FSimulationContext Context);
void PerformCollisionQueryAsyncCPU_CollisionCollisionQueryAndResponseQuery(int In_InstanceData, int In_PreviousFrameQueryID, float3 In_TraceStartWorld, float3 In_TraceEndWorld, int In_TraceChannel, out int Out_NextFrameQueryID, out bool Out_CollisionValid, out bool Out_IsTraceInsideMesh, out float3 Out_CollisionPosWorld, out float3 Out_CollisionNormal, out float Out_CollisionMaterialFriction, out float Out_CollisionMaterialRestitution);
void PlaneSphereCollisionDetection_Func_(float3 In_PlaneNormal, float3 In_PlanePivotPoint, float3 In_InitialSphereLocation, float3 In_SpherePositionDelta, float In_CollisionRadius, float In_PhysicsDeltaTime, float In_MaxCorrectiondistance, out bool Out_Collides, out float3 Out_IntersectionLocation, out float3 Out_PreASC45IntersectionSphereCenterLocation, out float3 Out_InitialPositionRelativeCollisionLocation, out float Out_TimeElapsedToCollision, out float Out_RemainingTimePostCollision, out float Out_PercentageofTimeUsedToPerformCollision, out float Out_InitialDistanceBetweenTheSphereASC39sSurfaceandtheCollision, out float Out_UninterruptedAnimatedSphereASC39sDistancetoCollisionPlane, inout FSimulationContext Context);
void RandomRangeFloat_Func_(float2 In_Min, float2 In_Max, int In_Seed, int In_RandomnessMode, bool In_OverrideSeed, out float2 Out_Result, inout FSimulationContext Context);
void CustomHlsl5A25A2A4455E3C692D3322A954DF887F_Func_(bool In_InputsAreNormalized, float3 In_From, float3 In_To, out float4 Out_Result);
void FindQuatBetween_Func_(float3 In_From, float3 In_To, bool In_InputsAreNormalized, out float4 Out_NewOutput, inout FSimulationContext Context);
void MultiplyVectorWithQuaternion_Func_(float3 In_VECTOR_VAR, float4 In_Quaternion, out float3 Out_Vector, inout FSimulationContext Context);
void RandomizeCollisionNormals_Func_(float3 In_ConeAxis, float In_Scale, float In_Spread, out float3 Out_Ouput, inout FSimulationContext Context);
void ReflectVector_Func_(float3 In_InVector, float3 In_Normal, out float3 Out_Reflected, inout FSimulationContext Context);
void CentimeterMeterConversion_Func_(float3 In_INPUT_VAR, out float3 Out_CentimeterstoMeters, out float3 Out_MeterstoCentimeters, inout FSimulationContext Context);
void ProjectVectorOnPlane_Func_(float3 In_VECTOR_VAR, float3 In_Normal, out float3 Out_Ouput, inout FSimulationContext Context);
void Collision_CollisionQueryAndResponse_Emitter_Func_(inout FSimulationContext Context);
void PerformCollisionQueryAsyncCPU_CollisionCollisionQueryAndResponse001Query(int In_InstanceData, int In_PreviousFrameQueryID, float3 In_TraceStartWorld, float3 In_TraceEndWorld, int In_TraceChannel, out int Out_NextFrameQueryID, out bool Out_CollisionValid, out bool Out_IsTraceInsideMesh, out float3 Out_CollisionPosWorld, out float3 Out_CollisionNormal, out float Out_CollisionMaterialFriction, out float Out_CollisionMaterialRestitution);
void Collision_CollisionQueryAndResponse001_Emitter_Func_(inout FSimulationContext Context);
void Collision_TransformPosition001_Emitter_Func_(float3 In_InPosition, int In_SourceSpace, int In_DestinationSpace, bool In_ApplyScale, out float3 Out_OutPosition, inout FSimulationContext Context);
void Collision_TransformVector001_Emitter_Func_(float3 In_InVector, int In_SourceSpace, int In_DestinationSpace, bool In_ApplyScale, out float3 Out_OutVector, inout FSimulationContext Context);
void Collision_TransformVector_Emitter_Func_(float3 In_InVector, int In_SourceSpace, int In_DestinationSpace, bool In_ApplyScale, out float3 Out_OutVector, inout FSimulationContext Context);
void Collision_Emitter_Func_(inout FSimulationContext Context);
void SolveForcesAndVelocity_Emitter_Func_(inout FSimulationContext Context);
void SampleCurve_EmitterScaleFactorCurve(float In_X, out float Out_Value);
void SpriteSizeScaleByVelocity_Emitter_Func_(inout FSimulationContext Context);
void SampleCurve_EmitterValueScaleFactorFloatCurve(float In_X, out float Out_Value);
void FloatFromCurve_Emitter_Func_(out float Out_Value, inout FSimulationContext Context);
void Vector2DFromFloat_Emitter_Func_(out float2 Out_Vec2, inout FSimulationContext Context);
void ScaleSpriteSize_Emitter_Func_(inout FSimulationContext Context);
float GetSpawnInterpolation();
void GetRandomInfo_Emitter_Determinism_false_Func_(int In_Seed, int In_Engine_System_TickCount, bool In_OverrideSeed, int In_Particles_UniqueID, int In_Emitter_RandomSeed, bool In_FixedOverrideSeed, int In_RandomnessMode, out NiagaraRandInfo Out_RandomInfo, out bool Out_UseDeterministicRandoms, inout FSimulationContext Context)
{
	bool Constant28 = false;
	int Constant29 = 0;
	bool Result = NiagaraAll(In_RandomnessMode == Constant29);
	bool Result1 = Constant28 && Result;
	int Constant30 = 1;
	bool Result2 = NiagaraAll(In_RandomnessMode == Constant30);
	bool Result3 = Result1 || Result2;
	int Seed_IfResult;
	if(In_OverrideSeed)
	{
	Seed_IfResult = In_Seed;
	}
	else
	{
	Seed_IfResult = Context.MapSpawn.Emitter.RandomSeed;
	}
	int Constant31 = 0;
	int Constant32 = 0;
	int Seed1_IfResult;
	int Seed2_IfResult;
	int Seed3_IfResult;
	if(In_FixedOverrideSeed)
	{
	Seed1_IfResult = Seed_IfResult;
	Seed2_IfResult = Constant31;
	Seed3_IfResult = Constant32;
	}
	else
	{
	Seed1_IfResult = Context.MapSpawn.Particles.UniqueID;
	Seed2_IfResult = Context.MapSpawn.Engine.System.TickCount;
	Seed3_IfResult = Seed_IfResult;
	}
	int Constant33 = -1;
	int Constant34 = -1;
	int Constant35 = -1;
	int Seed1_IfResult1;
	int Seed2_IfResult1;
	int Seed3_IfResult1;
	if(Result3)
	{
	Seed1_IfResult1 = Seed1_IfResult;
	Seed2_IfResult1 = Seed2_IfResult;
	Seed3_IfResult1 = Seed3_IfResult;
	}
	else
	{
	Seed1_IfResult1 = Constant33;
	Seed2_IfResult1 = Constant34;
	Seed3_IfResult1 = Constant35;
	}
	NiagaraRandInfo Output1;
	Output1.Seed1 = Seed1_IfResult1;
	Output1.Seed2 = Seed2_IfResult1;
	Output1.Seed3 = Seed3_IfResult1;
	Out_RandomInfo = Output1;
	Out_UseDeterministicRandoms = Result3;
}

void RandomRangeFloat_Func_(float In_Min, float In_Max, int In_Seed, int In_RandomnessMode, bool In_OverrideSeed, bool In_FixedOverrideSeed, out float Out_Result, inout FSimulationContext Context)
{
	int Constant24 = (0);
	bool Constant25 = false;
	int Constant26 = 0;
	int Constant27 = (0);
	NiagaraRandInfo GetRandomInfo_Emitter_Determinism_false_Func_Output_RandomInfo;
	bool GetRandomInfo_Emitter_Determinism_false_Func_Output_UseDeterministicRandoms;
	GetRandomInfo_Emitter_Determinism_false_Func_(In_Seed, Constant24, In_OverrideSeed, Constant26, Constant27, In_FixedOverrideSeed, In_RandomnessMode, GetRandomInfo_Emitter_Determinism_false_Func_Output_RandomInfo, GetRandomInfo_Emitter_Determinism_false_Func_Output_UseDeterministicRandoms, Context);
	float Result4 = In_Max - In_Min;
	int Seed1;
	int Seed2;
	int Seed3;
	Seed1 = GetRandomInfo_Emitter_Determinism_false_Func_Output_RandomInfo.Seed1;
	Seed2 = GetRandomInfo_Emitter_Determinism_false_Func_Output_RandomInfo.Seed2;
	Seed3 = GetRandomInfo_Emitter_Determinism_false_Func_Output_RandomInfo.Seed3;
	float Result5 = rand_float(Result4, Seed1, Seed2, Seed3);
	float Result6 = rand_float(Result4);
	float Random_IfResult;
	if(GetRandomInfo_Emitter_Determinism_false_Func_Output_UseDeterministicRandoms)
	{
	Random_IfResult = Result5;
	}
	else
	{
	Random_IfResult = Result6;
	}
	float Result7 = In_Min + Random_IfResult;
	Out_Result = Result7;
}

void UniformRangedLinearColor_Emitter_Func_(out float4 Out_UniformRangedLinearColor, inout FSimulationContext Context)
{
	float Constant20 = 0;
	float Constant21 = 1;
	int Constant22 = 0;
	bool Constant23 = false;
	int Mode_IfResult;
	bool Override_IfResult;
	if(Context.MapSpawn.UniformRangedLinearColor.OverrideRandomness)
	{
	Mode_IfResult = Context.MapSpawn.UniformRangedLinearColor.RandomnessMode;
	Override_IfResult = Context.MapSpawn.UniformRangedLinearColor.OverrideSeed;
	}
	else
	{
	Mode_IfResult = Constant22;
	Override_IfResult = Constant23;
	}
	float RandomRangeFloat_Func_Output_Result;
	RandomRangeFloat_Func_(Constant20, Constant21, Context.MapSpawn.Constants.Emitter.UniformRangedLinearColor.RandomSeed, Mode_IfResult, Override_IfResult, Context.MapSpawn.UniformRangedLinearColor.FixedRandomSeed, RandomRangeFloat_Func_Output_Result, Context);
	float4 Result8 = lerp(Context.MapSpawn.UniformRangedLinearColor.Maximum,Context.MapSpawn.UniformRangedLinearColor.Minimum,RandomRangeFloat_Func_Output_Result);
	Out_UniformRangedLinearColor = Result8;
}

void MakeVector4_FromFloat_Emitter_Func_(out float4 Out_Vector4, inout FSimulationContext Context)
{
	float4 Vector4;
	Vector4.x = Context.MapSpawn.MakeVector4_FromFloat.FLOAT_VAR;
	Vector4.y = Context.MapSpawn.MakeVector4_FromFloat.FLOAT_VAR;
	Vector4.z = Context.MapSpawn.MakeVector4_FromFloat.FLOAT_VAR;
	Vector4.w = Context.MapSpawn.MakeVector4_FromFloat.FLOAT_VAR;
	Out_Vector4 = Vector4;
}

void UniformRangedFloat004_Emitter_Func_(out float Out_UniformRangedFloat, inout FSimulationContext Context)
{
	int Constant40 = 0;
	bool Constant41 = false;
	int Mode_IfResult1;
	bool Override_IfResult1;
	if(Context.MapSpawn.UniformRangedFloat004.OverrideRandomness)
	{
	Mode_IfResult1 = Context.MapSpawn.UniformRangedFloat004.RandomnessMode;
	Override_IfResult1 = Context.MapSpawn.UniformRangedFloat004.OverrideSeed;
	}
	else
	{
	Mode_IfResult1 = Constant40;
	Override_IfResult1 = Constant41;
	}
	float RandomRangeFloat_Func_Output_Result1;
	RandomRangeFloat_Func_(Context.MapSpawn.Constants.Emitter.UniformRangedFloat004.Minimum, Context.MapSpawn.Constants.Emitter.UniformRangedFloat004.Maximum, Context.MapSpawn.Constants.Emitter.UniformRangedFloat004.RandomSeed, Mode_IfResult1, Override_IfResult1, Context.MapSpawn.UniformRangedFloat004.FixedRandomSeed, RandomRangeFloat_Func_Output_Result1, Context);
	Out_UniformRangedFloat = RandomRangeFloat_Func_Output_Result1;
}

void UniformRangedFloat005_Emitter_Func_(out float Out_UniformRangedFloat, inout FSimulationContext Context)
{
	int Constant46 = 0;
	bool Constant47 = false;
	int Mode_IfResult2;
	bool Override_IfResult2;
	if(Context.MapSpawn.UniformRangedFloat005.OverrideRandomness)
	{
	Mode_IfResult2 = Context.MapSpawn.UniformRangedFloat005.RandomnessMode;
	Override_IfResult2 = Context.MapSpawn.UniformRangedFloat005.OverrideSeed;
	}
	else
	{
	Mode_IfResult2 = Constant46;
	Override_IfResult2 = Constant47;
	}
	float RandomRangeFloat_Func_Output_Result2;
	RandomRangeFloat_Func_(Context.MapSpawn.Constants.Emitter.UniformRangedFloat005.Minimum, Context.MapSpawn.Constants.Emitter.UniformRangedFloat005.Maximum, Context.MapSpawn.Constants.Emitter.UniformRangedFloat005.RandomSeed, Mode_IfResult2, Override_IfResult2, Context.MapSpawn.UniformRangedFloat005.FixedRandomSeed, RandomRangeFloat_Func_Output_Result2, Context);
	Out_UniformRangedFloat = RandomRangeFloat_Func_Output_Result2;
}

void ParticleOwnerPosition_Emitter_Func_(out float3 Out_OutPosition, inout FSimulationContext Context)
{
	bool Constant51 = true;
	float3 Constant52 = float3(0,0,0);
	float3 Vector_IfResult;
	if(Constant51)
	{
	Vector_IfResult = Constant52;
	}
	else
	{
	Vector_IfResult = Context.MapSpawn.Engine.Owner.Position;
	}
	Out_OutPosition = Vector_IfResult;
}

void MultiplyLinearColor_Emitter_Func_(out float4 Out_LinearColor, inout FSimulationContext Context)
{
	float4 Result9 = Context.MapSpawn.MultiplyLinearColor.LinearColor * Context.MapSpawn.MultiplyLinearColor.ScaleFactor;
	Out_LinearColor = Result9;
}

void InitializeParticle_SimulationPosition_Emitter_Func_(out float3 Out_OutPosition, inout FSimulationContext Context)
{
	bool Constant58 = true;
	float3 Constant59 = float3(0,0,0);
	float3 Vector_IfResult1;
	if(Constant58)
	{
	Vector_IfResult1 = Constant59;
	}
	else
	{
	Vector_IfResult1 = Context.MapSpawn.Engine.Owner.Position;
	}
	Out_OutPosition = Vector_IfResult1;
}

void RandomRangeFloat_Func_(float In_Min, float In_Max, int In_Seed, int In_RandomnessMode, bool In_OverrideSeed, out float Out_Result, inout FSimulationContext Context)
{
	int Constant66 = (0);
	bool Constant67 = false;
	int Constant68 = 0;
	int Constant69 = (0);
	bool Constant70 = false;
	NiagaraRandInfo GetRandomInfo_Emitter_Determinism_false_Func_Output_RandomInfo1;
	bool GetRandomInfo_Emitter_Determinism_false_Func_Output_UseDeterministicRandoms1;
	GetRandomInfo_Emitter_Determinism_false_Func_(In_Seed, Constant66, In_OverrideSeed, Constant68, Constant69, Constant70, In_RandomnessMode, GetRandomInfo_Emitter_Determinism_false_Func_Output_RandomInfo1, GetRandomInfo_Emitter_Determinism_false_Func_Output_UseDeterministicRandoms1, Context);
	float Result10 = In_Max - In_Min;
	int Seed11;
	int Seed21;
	int Seed31;
	Seed11 = GetRandomInfo_Emitter_Determinism_false_Func_Output_RandomInfo1.Seed1;
	Seed21 = GetRandomInfo_Emitter_Determinism_false_Func_Output_RandomInfo1.Seed2;
	Seed31 = GetRandomInfo_Emitter_Determinism_false_Func_Output_RandomInfo1.Seed3;
	float Result11 = rand_float(Result10, Seed11, Seed21, Seed31);
	float Result12 = rand_float(Result10);
	float Random_IfResult1;
	if(GetRandomInfo_Emitter_Determinism_false_Func_Output_UseDeterministicRandoms1)
	{
	Random_IfResult1 = Result11;
	}
	else
	{
	Random_IfResult1 = Result12;
	}
	float Result13 = In_Min + Random_IfResult1;
	Out_Result = Result13;
}

void InitializeParticle_Emitter_Func_(inout FSimulationContext Context)
{
	float Lifetime_IfResult;
	if(Context.MapSpawn.InitializeParticle.WriteLifetime)
	{
	Lifetime_IfResult = Context.MapSpawn.InitializeParticle.Lifetime;
	}
	else
	{
	Lifetime_IfResult = Context.MapSpawn.Particles.Lifetime;
	}
	Context.MapSpawn.Particles.Lifetime = Lifetime_IfResult;
	float4 Color_IfResult;
	if(Context.MapSpawn.InitializeParticle.WriteColor)
	{
	Color_IfResult = Context.MapSpawn.InitializeParticle.Color;
	}
	else
	{
	Color_IfResult = Context.MapSpawn.Particles.Color;
	}
	Context.MapSpawn.Particles.Color = Color_IfResult;
	float Mass_IfResult;
	if(Context.MapSpawn.InitializeParticle.WriteMass)
	{
	Mass_IfResult = Context.MapSpawn.InitializeParticle.Mass;
	}
	else
	{
	Mass_IfResult = Context.MapSpawn.Particles.Mass;
	}
	Context.MapSpawn.Particles.Mass = Mass_IfResult;
	float2 SpriteSize_IfResult;
	if(Context.MapSpawn.InitializeParticle.WriteSpriteSize)
	{
	SpriteSize_IfResult = Context.MapSpawn.Constants.Emitter.InitializeParticle.SpriteSize;
	}
	else
	{
	SpriteSize_IfResult = Context.MapSpawn.Particles.SpriteSize;
	}
	Context.MapSpawn.Particles.SpriteSize = SpriteSize_IfResult;
	float SpriteRotation_IfResult;
	if(Context.MapSpawn.InitializeParticle.WriteSpriteRotation)
	{
	SpriteRotation_IfResult = Context.MapSpawn.Constants.Emitter.InitializeParticle.SpriteRotation;
	}
	else
	{
	SpriteRotation_IfResult = Context.MapSpawn.Particles.SpriteRotation;
	}
	Context.MapSpawn.Particles.SpriteRotation = SpriteRotation_IfResult;
	float3 Scale_IfResult;
	if(Context.MapSpawn.InitializeParticle.WriteScale)
	{
	Scale_IfResult = Context.MapSpawn.Constants.Emitter.InitializeParticle.MeshScale;
	}
	else
	{
	Scale_IfResult = Context.MapSpawn.Particles.Scale;
	}
	Context.MapSpawn.Particles.Scale = Scale_IfResult;
	float3 Scale_IfResult1;
	if(Context.MapSpawn.InitializeParticle.WritePosition)
	{
	Scale_IfResult1 = Context.MapSpawn.InitializeParticle.Position;
	}
	else
	{
	Scale_IfResult1 = Context.MapSpawn.Particles.Position;
	}
	Context.MapSpawn.Particles.Position = Scale_IfResult1;
	float MaterialRandom_IfResult;
	if(Context.MapSpawn.InitializeParticle.WriteMaterialRandom)
	{
	MaterialRandom_IfResult = Context.MapSpawn.InitializeParticle.MaterialRandom;
	}
	else
	{
	MaterialRandom_IfResult = Context.MapSpawn.Particles.MaterialRandom;
	}
	Context.MapSpawn.Particles.MaterialRandom = MaterialRandom_IfResult;
}

void CalculateSizeAndRotationalInertiaByMass_Emitter_Func_(inout FSimulationContext Context)
{
	int Constant79 = 5;
	bool Result14 = NiagaraAll(Context.MapSpawn.CalculateSizeAndRotationalInertiaByMass.DensitybyMaterialType == Constant79);
	float Constant80 = 64;
	int Constant81 = 4;
	bool Result15 = NiagaraAll(Context.MapSpawn.CalculateSizeAndRotationalInertiaByMass.DensitybyMaterialType == Constant81);
	float Constant82 = 800;
	int Constant83 = 3;
	bool Result16 = NiagaraAll(Context.MapSpawn.CalculateSizeAndRotationalInertiaByMass.DensitybyMaterialType == Constant83);
	float Constant84 = 997;
	int Constant85 = 2;
	bool Result17 = NiagaraAll(Context.MapSpawn.CalculateSizeAndRotationalInertiaByMass.DensitybyMaterialType == Constant85);
	float Constant86 = 1000;
	int Constant87 = 1;
	bool Result18 = NiagaraAll(Context.MapSpawn.CalculateSizeAndRotationalInertiaByMass.DensitybyMaterialType == Constant87);
	float Constant88 = 8050;
	float Constant89 = 2400;
	float float_IfResult;
	if(Result18)
	{
	float_IfResult = Constant88;
	}
	else
	{
	float_IfResult = Constant89;
	}
	float float_IfResult1;
	if(Result17)
	{
	float_IfResult1 = Constant86;
	}
	else
	{
	float_IfResult1 = float_IfResult;
	}
	float float_IfResult2;
	if(Result16)
	{
	float_IfResult2 = Constant84;
	}
	else
	{
	float_IfResult2 = float_IfResult1;
	}
	float float_IfResult3;
	if(Result15)
	{
	float_IfResult3 = Constant82;
	}
	else
	{
	float_IfResult3 = float_IfResult2;
	}
	float float_IfResult4;
	if(Result14)
	{
	float_IfResult4 = Constant80;
	}
	else
	{
	float_IfResult4 = float_IfResult3;
	}
	Context.MapSpawn.Local.CalculateSizeAndRotationalInertiaByMass.CurrentDensity = float_IfResult4;
	float float_IfResult5;
	if(Context.MapSpawn.CalculateSizeAndRotationalInertiaByMass.ManuallyEnterDensity)
	{
	float_IfResult5 = Context.MapSpawn.Constants.Emitter.CalculateSizeAndRotationalInertiaByMass.ManuallyEnteredDensityASC40kgASC47mASC943ASC41;
	}
	else
	{
	float_IfResult5 = Context.MapSpawn.Local.CalculateSizeAndRotationalInertiaByMass.CurrentDensity;
	}
	float Result19 = float_IfResult5 * Context.MapSpawn.Constants.Emitter.CalculateSizeAndRotationalInertiaByMass.MassModulation;
	Context.MapSpawn.Local.CalculateSizeAndRotationalInertiaByMass.CurrentDensity = Result19;
	float Constant90 = 3;
	float Result20 = Context.MapSpawn.Constants.Emitter.CalculateSizeAndRotationalInertiaByMass.Width + Context.MapSpawn.Constants.Emitter.CalculateSizeAndRotationalInertiaByMass.Height;
	float Result21 = Result20 + Context.MapSpawn.Constants.Emitter.CalculateSizeAndRotationalInertiaByMass.Depth;
	float Result22 = Constant90 / Result21;
	float Result23 = Context.MapSpawn.Constants.Emitter.CalculateSizeAndRotationalInertiaByMass.Width * Result22;
	float Result24 = Context.MapSpawn.Constants.Emitter.CalculateSizeAndRotationalInertiaByMass.Height * Result22;
	float2 Output11;
	Output11.x = Result23;
	Output11.y = Result24;
	float2 Result25 = Context.MapSpawn.Constants.Emitter.CalculateSizeAndRotationalInertiaByMass.SpriteSizeModulation * Output11;
	Context.MapSpawn.Local.CalculateSizeAndRotationalInertiaByMass.UserSpriteDimensionPreference = Result25;
	float Constant91 = 3;
	float X;
	float Y;
	float Z;
	X = Context.MapSpawn.Constants.Emitter.CalculateSizeAndRotationalInertiaByMass.ModelProportions.x;
	Y = Context.MapSpawn.Constants.Emitter.CalculateSizeAndRotationalInertiaByMass.ModelProportions.y;
	Z = Context.MapSpawn.Constants.Emitter.CalculateSizeAndRotationalInertiaByMass.ModelProportions.z;
	float Result26 = X + Y;
	float Result27 = Result26 + Z;
	float Result28 = Constant91 / Result27;
	float3 Result29 = Context.MapSpawn.Constants.Emitter.CalculateSizeAndRotationalInertiaByMass.ModelProportions * Result28;
	Context.MapSpawn.Local.CalculateSizeAndRotationalInertiaByMass.UserMeshDimensionPreference = Result29;
	float Result30 = Context.MapSpawn.Particles.Mass / Context.MapSpawn.Local.CalculateSizeAndRotationalInertiaByMass.CurrentDensity;
	float Constant92 = 1e+06;
	float Result31 = Result30 * Constant92;
	float Constant93 = 0.333333;
	float Result32 = pow(Result31,Constant93);
	float3 Result33 = Result32 / Context.MapSpawn.Constants.Emitter.CalculateSizeAndRotationalInertiaByMass.InitialModelDimensions;
	float3 Result34 = Context.MapSpawn.Local.CalculateSizeAndRotationalInertiaByMass.UserMeshDimensionPreference * Result33;
	float2 Vector2D;
	Vector2D.x = Result32;
	Vector2D.y = Result32;
	float2 Result35 = Context.MapSpawn.Local.CalculateSizeAndRotationalInertiaByMass.UserSpriteDimensionPreference * Vector2D;
	float3 Vector_IfResult2;
	float2 Vector2D_IfResult;
	if(Context.MapSpawn.CalculateSizeAndRotationalInertiaByMass.CalculateMeshScale)
	{
	Vector_IfResult2 = Result34;
	Vector2D_IfResult = Context.MapSpawn.Particles.SpriteSize;
	}
	else
	{
	Vector_IfResult2 = Context.MapSpawn.Particles.Scale;
	Vector2D_IfResult = Result35;
	}
	Context.MapSpawn.Particles.Scale = Vector_IfResult2;
	Context.MapSpawn.Particles.SpriteSize = Vector2D_IfResult;
	Context.MapSpawn.Local.CalculateSizeAndRotationalInertiaByMass.ParticleVolume = Result30;
	float Constant94 = 0.4;
	float Result36 = PI;
	float Result37 = Context.MapSpawn.Local.CalculateSizeAndRotationalInertiaByMass.ParticleVolume / Result36;
	float Result38 = Constant94 * Result37;
	float Constant95 = 0.333333;
	float Result39 = pow(Result38,Constant95);
	Context.MapSpawn.OUTPUT_VAR.CalculateSizeAndRotationalInertiaByMass.SphereRadius = Result39;
	float Constant96 = 0.4;
	float Result40 = Context.MapSpawn.Particles.Mass * Constant96;
	float Result41 = Context.MapSpawn.OUTPUT_VAR.CalculateSizeAndRotationalInertiaByMass.SphereRadius * Context.MapSpawn.OUTPUT_VAR.CalculateSizeAndRotationalInertiaByMass.SphereRadius;
	float Result42 = Result40 * Result41;
	Context.MapSpawn.Particles.RotationalInertia = Result42;
}

void Multiply_Float001_Emitter_Func_(out float Out_Result, inout FSimulationContext Context)
{
	float Result43 = Context.MapSpawn.Constants.Emitter.Multiply_Float001.A * Context.MapSpawn.Multiply_Float001.B;
	Out_Result = Result43;
}

void RandomRangeFloat_Func_(float3 In_Min, float3 In_Max, int In_Seed, int In_RandomnessMode, bool In_OverrideSeed, bool In_FixedOverrideSeed, out float3 Out_Result, inout FSimulationContext Context)
{
	int Constant118 = (0);
	bool Constant119 = false;
	int Constant120 = 0;
	int Constant121 = (0);
	NiagaraRandInfo GetRandomInfo_Emitter_Determinism_false_Func_Output_RandomInfo2;
	bool GetRandomInfo_Emitter_Determinism_false_Func_Output_UseDeterministicRandoms2;
	GetRandomInfo_Emitter_Determinism_false_Func_(In_Seed, Constant118, In_OverrideSeed, Constant120, Constant121, In_FixedOverrideSeed, In_RandomnessMode, GetRandomInfo_Emitter_Determinism_false_Func_Output_RandomInfo2, GetRandomInfo_Emitter_Determinism_false_Func_Output_UseDeterministicRandoms2, Context);
	float3 Result47 = In_Max - In_Min;
	int Seed12;
	int Seed22;
	int Seed32;
	Seed12 = GetRandomInfo_Emitter_Determinism_false_Func_Output_RandomInfo2.Seed1;
	Seed22 = GetRandomInfo_Emitter_Determinism_false_Func_Output_RandomInfo2.Seed2;
	Seed32 = GetRandomInfo_Emitter_Determinism_false_Func_Output_RandomInfo2.Seed3;
	float3 Result48 = rand_float(Result47, Seed12, Seed22, Seed32);
	float3 Result49 = rand_float(Result47);
	float3 Random_IfResult2;
	if(GetRandomInfo_Emitter_Determinism_false_Func_Output_UseDeterministicRandoms2)
	{
	Random_IfResult2 = Result48;
	}
	else
	{
	Random_IfResult2 = Result49;
	}
	float3 Result50 = In_Min + Random_IfResult2;
	Out_Result = Result50;
}

void RandomPointInSphere_Func_(float In_InnerRadius, float In_OuterRadius, int In_RandomnessMode, bool In_OverrideSeed, int In_Seed, bool In_FixedOverrideSeed, out float3 Out_Ouput, inout FSimulationContext Context)
{
	float Constant113 = 0;
	float Constant114 = -1;
	float Constant115 = 3;
	float Result44 = pow(In_InnerRadius,Constant115);
	float3 Output12;
	Output12.x = Constant113;
	Output12.y = Constant114;
	Output12.z = Result44;
	float Result45 = TWO_PI;
	float Constant116 = 1;
	float Constant117 = 3;
	float Result46 = pow(In_OuterRadius,Constant117);
	float3 Output13;
	Output13.x = Result45;
	Output13.y = Constant116;
	Output13.z = Result46;
	float3 RandomRangeFloat_Func_Output_Result4;
	RandomRangeFloat_Func_(Output12, Output13, In_Seed, In_RandomnessMode, In_OverrideSeed, In_FixedOverrideSeed, RandomRangeFloat_Func_Output_Result4, Context);
	float Phi;
	float CosASC40ThetaASC41;
	float RASC943;
	Phi = RandomRangeFloat_Func_Output_Result4.x;
	CosASC40ThetaASC41 = RandomRangeFloat_Func_Output_Result4.y;
	RASC943 = RandomRangeFloat_Func_Output_Result4.z;
	float Result51 = cos(Phi);
	float Result52 = CosASC40ThetaASC41 * CosASC40ThetaASC41;
	float Result53 = 1 - Result52;
	float Result54 = sqrt(Result53);
	float Result55 = Result51 * Result54;
	float Result56 = sin(Phi);
	float Result57 = Result56 * Result54;
	float3 Output14;
	Output14.x = Result55;
	Output14.y = Result57;
	Output14.z = CosASC40ThetaASC41;
	float Constant122 = 0.333333;
	float Result58 = pow(RASC943,Constant122);
	float3 Result59 = Output14 * Result58;
	Out_Ouput = Result59;
}

void CustomHlsl99D2D00244511A096EA5088DE8D89968_Func_(bool In_X, bool In_Y, bool In_Z, out float3 Out_Output)
{

Out_Output = float3(In_X, In_Y, In_Z);
}

void TransformBase_Func_(int In_SourceSpace, int In_DestinationSpace, float4x4 In_LocalToWorldTransform, float4x4 In_WorldToLocalTransform, bool In_bLocalSpace, out bool Out_bUseOriginal, out float4x4 Out_OutTransform, inout FSimulationContext Context)
{
	int Constant126 = 0;
	bool Result64 = NiagaraAll(In_SourceSpace == Constant126);
	int Constant127 = 0;
	bool Result65 = NiagaraAll(In_DestinationSpace == Constant127);
	bool Result66 = Result64 && Result65;
	int Constant128 = 1;
	bool Result67 = NiagaraAll(In_SourceSpace == Constant128);
	int Constant129 = 1;
	bool Result68 = NiagaraAll(In_DestinationSpace == Constant129);
	bool Result69 = Result67 && Result68;
	bool Result70 = Result66 || Result69;
	int Constant130 = 2;
	bool Result71 = NiagaraAll(In_SourceSpace == Constant130);
	int Constant131 = 2;
	bool Result72 = NiagaraAll(In_DestinationSpace == Constant131);
	bool Result73 = Result71 && Result72;
	bool Result74 = Result70 || Result73;
	bool Result75 = Result64 && Result72;
	bool Result76 = Result71 && Result65;
	bool Result77 = Result75 || Result76;
	bool Result78 = In_bLocalSpace && Result77;
	bool Result79 = Result74 || Result78;
	bool Result80 = !In_bLocalSpace;
	bool Result81 = Result64 && Result68;
	bool Result82 = Result67 && Result65;
	bool Result83 = Result81 || Result82;
	bool Result84 = Result80 && Result83;
	bool Result85 = Result79 || Result84;
	bool Result86 = In_bLocalSpace && Result81;
	bool Result87 = Result71 && Result68;
	bool Result88 = Result86 || Result87;
	bool Result89 = Result80 && Result76;
	bool Result90 = Result88 || Result89;
	float4x4 Matrix_IfResult1;
	if(Result90)
	{
	Matrix_IfResult1 = In_LocalToWorldTransform;
	}
	else
	{
	Matrix_IfResult1 = In_WorldToLocalTransform;
	}
	Out_bUseOriginal = Result85;
	Out_OutTransform = Matrix_IfResult1;
}

void SphereLocation_NF_TransformVector_Emitter_Func_(float3 In_InVector, int In_SourceSpace, int In_DestinationSpace, bool In_ApplyScale, out float3 Out_OutVector, inout FSimulationContext Context)
{
	bool Constant125 = true;
	float4x4 Matrix_IfResult;
	float4x4 Matrix001_IfResult;
	if(In_ApplyScale)
	{
	Matrix_IfResult = Context.MapSpawn.Engine.Owner.SystemLocalToWorld;
	Matrix001_IfResult = Context.MapSpawn.Engine.Owner.SystemWorldToLocal;
	}
	else
	{
	Matrix_IfResult = Context.MapSpawn.Engine.Owner.SystemLocalToWorldNoScale;
	Matrix001_IfResult = Context.MapSpawn.Engine.Owner.SystemWorldToLocalNoScale;
	}
	bool TransformBase_Func_Output_bUseOriginal;
	float4x4 TransformBase_Func_Output_OutTransform;
	TransformBase_Func_(In_SourceSpace, In_DestinationSpace, Matrix_IfResult, Matrix001_IfResult, Constant125, TransformBase_Func_Output_bUseOriginal, TransformBase_Func_Output_OutTransform, Context);
	float3 Result91 = mul(float4(In_InVector,0.0),TransformBase_Func_Output_OutTransform).xyz;
	float3 Vector_IfResult3;
	if(TransformBase_Func_Output_bUseOriginal)
	{
	Vector_IfResult3 = In_InVector;
	}
	else
	{
	Vector_IfResult3 = Result91;
	}
	Out_OutVector = Vector_IfResult3;
}

void SphereLocation_Emitter_Func_(inout FSimulationContext Context)
{
	float Constant109 = 0;
	float Constant110 = 1;
	int Constant111 = 0;
	bool Constant112 = false;
	int Mode_IfResult3;
	bool Override_IfResult3;
	if(Context.MapSpawn.SphereLocation.OverrideRandomness)
	{
	Mode_IfResult3 = Context.MapSpawn.SphereLocation.RandomnessMode;
	Override_IfResult3 = Context.MapSpawn.SphereLocation.OverrideSeed;
	}
	else
	{
	Mode_IfResult3 = Constant111;
	Override_IfResult3 = Constant112;
	}
	float3 RandomPointInSphere_Func_Output_Ouput;
	RandomPointInSphere_Func_(Constant109, Constant110, Mode_IfResult3, Override_IfResult3, Context.MapSpawn.Constants.Emitter.SphereLocation.RandomSeed, Context.MapSpawn.SphereLocation.FixedRandomSeed, RandomPointInSphere_Func_Output_Ouput, Context);
	Context.MapSpawn.Local.SphereLocation.SphereVector = RandomPointInSphere_Func_Output_Ouput;
	float3 Result60 = abs(Context.MapSpawn.Local.SphereLocation.SphereVector);
	float3 CustomHlsl99D2D00244511A096EA5088DE8D89968_Func_Output_Output;
	CustomHlsl99D2D00244511A096EA5088DE8D89968_Func_(Context.MapSpawn.SphereLocation.HemisphereX, Context.MapSpawn.SphereLocation.HemisphereY, Context.MapSpawn.SphereLocation.HemisphereZ, CustomHlsl99D2D00244511A096EA5088DE8D89968_Func_Output_Output);
	float3 Result61 = lerp(Context.MapSpawn.Local.SphereLocation.SphereVector,Result60,CustomHlsl99D2D00244511A096EA5088DE8D89968_Func_Output_Output);
	Context.MapSpawn.Local.SphereLocation.SphereVector = Result61;
	float3 Result62 = Context.MapSpawn.SphereLocation.SphereRadius * Context.MapSpawn.Local.SphereLocation.SphereVector * Context.MapSpawn.Constants.Emitter.SphereLocation.NonUniformScale;
	Context.MapSpawn.Local.SphereLocation.SphereVector = Result62;
	float3 Result63 = Context.MapSpawn.SphereLocation.SphereOrigin + Context.MapSpawn.Constants.Emitter.SphereLocation.Offset;
	int Constant123 = 0;
	bool Constant124 = true;
	float3 SphereLocation_NF_TransformVector_Emitter_Func_Output_OutVector;
	SphereLocation_NF_TransformVector_Emitter_Func_(Context.MapSpawn.Local.SphereLocation.SphereVector, Context.MapSpawn.SphereLocation.CoordinateSpace, Constant123, Constant124, SphereLocation_NF_TransformVector_Emitter_Func_Output_OutVector, Context);
	float3 Result92 = Result63 + SphereLocation_NF_TransformVector_Emitter_Func_Output_OutVector;
	float3 Result93 = normalize(SphereLocation_NF_TransformVector_Emitter_Func_Output_OutVector);
	Context.MapSpawn.Particles.Position = Result92;
	Context.MapSpawn.OUTPUT_VAR.SphereLocation.SphereNormal = Result93;
}

void UniformRangedFloat_Emitter_Func_(out float Out_UniformRangedFloat, inout FSimulationContext Context)
{
	int Constant136 = 0;
	bool Constant137 = false;
	int Mode_IfResult4;
	bool Override_IfResult4;
	if(Context.MapSpawn.UniformRangedFloat.OverrideRandomness)
	{
	Mode_IfResult4 = Context.MapSpawn.UniformRangedFloat.RandomnessMode;
	Override_IfResult4 = Context.MapSpawn.UniformRangedFloat.OverrideSeed;
	}
	else
	{
	Mode_IfResult4 = Constant136;
	Override_IfResult4 = Constant137;
	}
	float RandomRangeFloat_Func_Output_Result5;
	RandomRangeFloat_Func_(Context.MapSpawn.Constants.Emitter.UniformRangedFloat.Minimum, Context.MapSpawn.Constants.Emitter.UniformRangedFloat.Maximum, Context.MapSpawn.Constants.Emitter.UniformRangedFloat.RandomSeed, Mode_IfResult4, Override_IfResult4, Context.MapSpawn.UniformRangedFloat.FixedRandomSeed, RandomRangeFloat_Func_Output_Result5, Context);
	Out_UniformRangedFloat = RandomRangeFloat_Func_Output_Result5;
}

void Multiply_Float_Emitter_Func_(out float Out_Result, inout FSimulationContext Context)
{
	float Result94 = Context.MapSpawn.Multiply_Float.A * Context.MapSpawn.Multiply_Float.B;
	Out_Result = Result94;
}

void VectorFromFloat_Emitter_Func_(out float3 Out_Vec3, inout FSimulationContext Context)
{
	float3 Output15;
	Output15.x = Context.MapSpawn.VectorFromFloat.Value;
	Output15.y = Context.MapSpawn.VectorFromFloat.Value;
	Output15.z = Context.MapSpawn.VectorFromFloat.Value;
	Out_Vec3 = Output15;
}

void AddVelocity_TransformVector_Emitter_Func_(float3 In_InVector, int In_SourceSpace, int In_DestinationSpace, bool In_ApplyScale, out float3 Out_OutVector, inout FSimulationContext Context)
{
	bool Constant141 = true;
	float4x4 Matrix_IfResult2;
	float4x4 Matrix001_IfResult1;
	if(In_ApplyScale)
	{
	Matrix_IfResult2 = Context.MapSpawn.Engine.Owner.SystemLocalToWorld;
	Matrix001_IfResult1 = Context.MapSpawn.Engine.Owner.SystemWorldToLocal;
	}
	else
	{
	Matrix_IfResult2 = Context.MapSpawn.Engine.Owner.SystemLocalToWorldNoScale;
	Matrix001_IfResult1 = Context.MapSpawn.Engine.Owner.SystemWorldToLocalNoScale;
	}
	bool TransformBase_Func_Output_bUseOriginal1;
	float4x4 TransformBase_Func_Output_OutTransform1;
	TransformBase_Func_(In_SourceSpace, In_DestinationSpace, Matrix_IfResult2, Matrix001_IfResult1, Constant141, TransformBase_Func_Output_bUseOriginal1, TransformBase_Func_Output_OutTransform1, Context);
	float3 Result96 = mul(float4(In_InVector,0.0),TransformBase_Func_Output_OutTransform1).xyz;
	float3 Vector_IfResult4;
	if(TransformBase_Func_Output_bUseOriginal1)
	{
	Vector_IfResult4 = In_InVector;
	}
	else
	{
	Vector_IfResult4 = Result96;
	}
	Out_OutVector = Vector_IfResult4;
}

void AddVelocity_Emitter_Func_(inout FSimulationContext Context)
{
	float3 Result95 = Context.MapSpawn.AddVelocity.Velocity * Context.MapSpawn.AddVelocity.ScaleAddedVelocity;
	int Constant139 = 0;
	bool Constant140 = false;
	float3 AddVelocity_TransformVector_Emitter_Func_Output_OutVector;
	AddVelocity_TransformVector_Emitter_Func_(Result95, Context.MapSpawn.AddVelocity.CoordinateSpace, Constant139, Constant140, AddVelocity_TransformVector_Emitter_Func_Output_OutVector, Context);
	float3 Result97 = AddVelocity_TransformVector_Emitter_Func_Output_OutVector + Context.MapSpawn.Particles.Velocity;
	Context.MapSpawn.Particles.Velocity = Result97;
}

void ParticleState_Emitter_Func_(inout FSimulationContext Context)
{
	bool Result98 = NiagaraAll(Context.MapUpdate.Particles.Age <= Context.MapUpdate.Engine.DeltaTime);
	Context.MapUpdate.OUTPUT_VAR.ParticleState.FirstFrame = Result98;
	float Result99 = Context.MapUpdate.Particles.Age + Context.MapUpdate.ParticleState.DeltaTime;
	float Constant144 = 1e-05;
	float Result100 = max(Context.MapUpdate.ParticleState.Lifetime, Constant144);
	float Constant145 = 0.0001;
	float Result101 = Result100 - Constant145;
	bool Result102 = NiagaraAll(Result99 < Result101);
	bool Constant146 = false;
	bool bool_IfResult;
	if(Result102)
	{
	bool_IfResult = Context.MapUpdate.DataInstance.Alive;
	}
	else
	{
	bool_IfResult = Constant146;
	}
	float Result103 = Result99 / Result100;
	Context.MapUpdate.DataInstance.Alive = bool_IfResult;
	Context.MapUpdate.Particles.Age = Result99;
	Context.MapUpdate.Particles.NormalizedAge = Result103;
}

void GravityForce_NF_TransformVector_Emitter_Func_(float3 In_InVector, int In_SourceSpace, int In_DestinationSpace, bool In_ApplyScale, out float3 Out_OutVector, inout FSimulationContext Context)
{
	bool Constant152 = true;
	float4x4 Matrix_IfResult3;
	float4x4 Matrix001_IfResult2;
	if(In_ApplyScale)
	{
	Matrix_IfResult3 = Context.MapUpdate.Engine.Owner.SystemLocalToWorld;
	Matrix001_IfResult2 = Context.MapUpdate.Engine.Owner.SystemWorldToLocal;
	}
	else
	{
	Matrix_IfResult3 = Context.MapUpdate.Engine.Owner.SystemLocalToWorldNoScale;
	Matrix001_IfResult2 = Context.MapUpdate.Engine.Owner.SystemWorldToLocalNoScale;
	}
	bool TransformBase_Func_Output_bUseOriginal2;
	float4x4 TransformBase_Func_Output_OutTransform2;
	TransformBase_Func_(In_SourceSpace, In_DestinationSpace, Matrix_IfResult3, Matrix001_IfResult2, Constant152, TransformBase_Func_Output_bUseOriginal2, TransformBase_Func_Output_OutTransform2, Context);
	float3 Result105 = mul(float4(In_InVector,0.0),TransformBase_Func_Output_OutTransform2).xyz;
	float3 Vector_IfResult5;
	if(TransformBase_Func_Output_bUseOriginal2)
	{
	Vector_IfResult5 = In_InVector;
	}
	else
	{
	Vector_IfResult5 = Result105;
	}
	Out_OutVector = Vector_IfResult5;
}

void GravityForce_Emitter_Func_(inout FSimulationContext Context)
{
	float3 Result104 = Context.MapUpdate.Constants.Emitter.GravityForce.Gravity * Context.MapUpdate.Particles.Mass;
	int Constant149 = 1;
	int Constant150 = 0;
	bool Constant151 = false;
	float3 GravityForce_NF_TransformVector_Emitter_Func_Output_OutVector;
	GravityForce_NF_TransformVector_Emitter_Func_(Result104, Constant149, Constant150, Constant151, GravityForce_NF_TransformVector_Emitter_Func_Output_OutVector, Context);
	float3 Result106 = Context.MapUpdate.Transient.PhysicsForce + GravityForce_NF_TransformVector_Emitter_Func_Output_OutVector;
	Context.MapUpdate.Transient.PhysicsForce = Result106;
}

void Drag_Emitter_Func_(inout FSimulationContext Context)
{
	float Result107 = Context.MapUpdate.Constants.Emitter.Drag.Drag + Context.MapUpdate.Transient.PhysicsDrag;
	Context.MapUpdate.Transient.PhysicsDrag = Result107;
	Context.MapUpdate.Transient.PhysicsRotationalDrag = Context.MapUpdate.Transient.PhysicsRotationalDrag;
}

void CalculateRadiusFromSpriteSize_Method_NewEnumerator0_Func_(float2 In_SpriteSize, out float Out_Radius, inout FSimulationContext Context)
{
	float Result108 = length(In_SpriteSize);
	float Constant199 = 0.5;
	float Result109 = Result108 * Constant199;
	Out_Radius = Result109;
}

void Collision_TransformPosition_Emitter_Func_(float3 In_InPosition, int In_SourceSpace, int In_DestinationSpace, bool In_ApplyScale, out float3 Out_OutPosition, inout FSimulationContext Context)
{
	bool Constant203 = true;
	float4x4 Matrix_IfResult4;
	float4x4 Matrix001_IfResult3;
	if(In_ApplyScale)
	{
	Matrix_IfResult4 = Context.MapUpdate.Engine.Owner.SystemLocalToWorld;
	Matrix001_IfResult3 = Context.MapUpdate.Engine.Owner.SystemWorldToLocal;
	}
	else
	{
	Matrix_IfResult4 = Context.MapUpdate.Engine.Owner.SystemLocalToWorldNoScale;
	Matrix001_IfResult3 = Context.MapUpdate.Engine.Owner.SystemWorldToLocalNoScale;
	}
	bool TransformBase_Func_Output_bUseOriginal3;
	float4x4 TransformBase_Func_Output_OutTransform3;
	TransformBase_Func_(In_SourceSpace, In_DestinationSpace, Matrix_IfResult4, Matrix001_IfResult3, Constant203, TransformBase_Func_Output_bUseOriginal3, TransformBase_Func_Output_OutTransform3, Context);
	float3 Result111 = mul(float4(In_InPosition,1.0),TransformBase_Func_Output_OutTransform3).xyz;
	float3 Vector_IfResult6;
	if(TransformBase_Func_Output_bUseOriginal3)
	{
	Vector_IfResult6 = In_InPosition;
	}
	else
	{
	Vector_IfResult6 = Result111;
	}
	Out_OutPosition = Vector_IfResult6;
}

void Collision_TransformVector002_Emitter_Func_(float3 In_InVector, int In_SourceSpace, int In_DestinationSpace, bool In_ApplyScale, out float3 Out_OutVector, inout FSimulationContext Context)
{
	bool Constant207 = true;
	float4x4 Matrix_IfResult5;
	float4x4 Matrix001_IfResult4;
	if(In_ApplyScale)
	{
	Matrix_IfResult5 = Context.MapUpdate.Engine.Owner.SystemLocalToWorld;
	Matrix001_IfResult4 = Context.MapUpdate.Engine.Owner.SystemWorldToLocal;
	}
	else
	{
	Matrix_IfResult5 = Context.MapUpdate.Engine.Owner.SystemLocalToWorldNoScale;
	Matrix001_IfResult4 = Context.MapUpdate.Engine.Owner.SystemWorldToLocalNoScale;
	}
	bool TransformBase_Func_Output_bUseOriginal4;
	float4x4 TransformBase_Func_Output_OutTransform4;
	TransformBase_Func_(In_SourceSpace, In_DestinationSpace, Matrix_IfResult5, Matrix001_IfResult4, Constant207, TransformBase_Func_Output_bUseOriginal4, TransformBase_Func_Output_OutTransform4, Context);
	float3 Result112 = mul(float4(In_InVector,0.0),TransformBase_Func_Output_OutTransform4).xyz;
	float3 Vector_IfResult7;
	if(TransformBase_Func_Output_bUseOriginal4)
	{
	Vector_IfResult7 = In_InVector;
	}
	else
	{
	Vector_IfResult7 = Result112;
	}
	Out_OutVector = Vector_IfResult7;
}

void Collision_TransformVector003_Emitter_Func_(float3 In_InVector, int In_SourceSpace, int In_DestinationSpace, bool In_ApplyScale, out float3 Out_OutVector, inout FSimulationContext Context)
{
	bool Constant211 = true;
	float4x4 Matrix_IfResult6;
	float4x4 Matrix001_IfResult5;
	if(In_ApplyScale)
	{
	Matrix_IfResult6 = Context.MapUpdate.Engine.Owner.SystemLocalToWorld;
	Matrix001_IfResult5 = Context.MapUpdate.Engine.Owner.SystemWorldToLocal;
	}
	else
	{
	Matrix_IfResult6 = Context.MapUpdate.Engine.Owner.SystemLocalToWorldNoScale;
	Matrix001_IfResult5 = Context.MapUpdate.Engine.Owner.SystemWorldToLocalNoScale;
	}
	bool TransformBase_Func_Output_bUseOriginal5;
	float4x4 TransformBase_Func_Output_OutTransform5;
	TransformBase_Func_(In_SourceSpace, In_DestinationSpace, Matrix_IfResult6, Matrix001_IfResult5, Constant211, TransformBase_Func_Output_bUseOriginal5, TransformBase_Func_Output_OutTransform5, Context);
	float3 Result113 = mul(float4(In_InVector,0.0),TransformBase_Func_Output_OutTransform5).xyz;
	float3 Vector_IfResult8;
	if(TransformBase_Func_Output_bUseOriginal5)
	{
	Vector_IfResult8 = In_InVector;
	}
	else
	{
	Vector_IfResult8 = Result113;
	}
	Out_OutVector = Vector_IfResult8;
}

void DirectionAndLengthSafe_Func_(float3 In_V, float3 In_Fallback, float In_Threshold, float In_FallbackLength, out float3 Out_Direction, out float Out_Length, out bool Out_BelowThreshold, inout FSimulationContext Context)
{
	float Result118 = length(In_V);
	bool Result119 = NiagaraAll(Result118 < In_Threshold);
	float Result120 = length(In_Fallback);
	float3 Vector_IfResult9;
	float float_IfResult7;
	if(Result119)
	{
	Vector_IfResult9 = In_Fallback;
	float_IfResult7 = In_FallbackLength;
	}
	else
	{
	Vector_IfResult9 = In_V;
	float_IfResult7 = Result118;
	}
	float3 Result121 = Vector_IfResult9 / float_IfResult7;
	float3 Vector_IfResult10;
	float float_IfResult8;
	if(Result119)
	{
	Vector_IfResult10 = In_Fallback;
	float_IfResult8 = Result120;
	}
	else
	{
	Vector_IfResult10 = Result121;
	float_IfResult8 = float_IfResult7;
	}
	Out_Direction = Vector_IfResult10;
	Out_Length = float_IfResult8;
	Out_BelowThreshold = Result119;
}

void PlaneSphereCollisionDetection_Func_(float3 In_PlaneNormal, float3 In_PlanePivotPoint, float3 In_InitialSphereLocation, float3 In_SpherePositionDelta, float In_CollisionRadius, float In_PhysicsDeltaTime, float In_MaxCorrectiondistance, out bool Out_Collides, out float3 Out_IntersectionLocation, out float3 Out_PreASC45IntersectionSphereCenterLocation, out float3 Out_InitialPositionRelativeCollisionLocation, out float Out_TimeElapsedToCollision, out float Out_RemainingTimePostCollision, out float Out_PercentageofTimeUsedToPerformCollision, out float Out_InitialDistanceBetweenTheSphereASC39sSurfaceandtheCollision, out float Out_UninterruptedAnimatedSphereASC39sDistancetoCollisionPlane, inout FSimulationContext Context)
{
	float3 Result131 = -(In_PlaneNormal);
	float3 Result132 = In_PlanePivotPoint - In_InitialSphereLocation;
	float Result133 = dot(Result131,Result132);
	float Result134 = Result133 - In_CollisionRadius;
	float Constant248 = 0;
	bool Result135 = NiagaraAll(Result134 < Constant248);
	bool Constant249 = true;
	float3 Result136 = Result131 * Result133;
	float3 Result137 = Result136 + In_InitialSphereLocation;
	float Result138 = max(In_MaxCorrectiondistance, Result134);
	float3 Result139 = Result138 * Result131;
	float3 Result140 = Result139 + In_InitialSphereLocation;
	float Constant250 = 0;
	float Constant251 = 0;
	float3 Result141 = In_InitialSphereLocation + In_SpherePositionDelta;
	float3 Result142 = In_PlanePivotPoint - Result141;
	float Result143 = dot(Result131,Result142);
	float Result144 = Result143 - In_CollisionRadius;
	float Constant252 = 0;
	bool Result145 = NiagaraAll(Result144 <= Constant252);
	float Result146 = abs(Result144);
	float Result147 = Result134 - Result144;
	float Result148 = abs(Result147);
	float Constant253 = 1e-06;
	float Result149 = max(Result148, Constant253);
	float Result150 = Result146 / Result149;
	float Constant254 = 0;
	bool Result151 = NiagaraAll(Result150 == Constant254);
	bool Result152 = Result135 || Result151;
	float Constant255 = 1;
	float float_IfResult9;
	if(Result152)
	{
	float_IfResult9 = Constant255;
	}
	else
	{
	float_IfResult9 = Result150;
	}
	float Result153 = 1 - float_IfResult9;
	float3 Result154 = Result153 * In_SpherePositionDelta;
	float3 Result155 = In_InitialSphereLocation + Result154;
	float3 Result156 = Result131 * In_CollisionRadius;
	float3 Result157 = Result155 + Result156;
	float3 Result158 = Result157 - Result155;
	float Result159 = In_PhysicsDeltaTime * Result153;
	float Result160 = In_PhysicsDeltaTime * float_IfResult9;
	bool Collides_IfResult;
	float3 IntersectionLocation_IfResult;
	float3 PreASC45IntersectionSphereCenterLocation_IfResult;
	float3 InitialPositionRelativeCollisionLocation_IfResult;
	float TimeElapsedToCollision_IfResult;
	float RemainingTimePostCollision_IfResult;
	float PercentageofTimeUsedToPerformCollision_IfResult;
	float InitialDistanceBetweenTheSphereASC39sSurfaceandtheCollision_IfResult;
	float UninterruptedAnimatedSphereASC39sDistancetoCollisionPlane_IfResult;
	if(Result135)
	{
	Collides_IfResult = Constant249;
	IntersectionLocation_IfResult = Result137;
	PreASC45IntersectionSphereCenterLocation_IfResult = Result140;
	InitialPositionRelativeCollisionLocation_IfResult = Result136;
	TimeElapsedToCollision_IfResult = Constant250;
	RemainingTimePostCollision_IfResult = In_PhysicsDeltaTime;
	PercentageofTimeUsedToPerformCollision_IfResult = Constant251;
	InitialDistanceBetweenTheSphereASC39sSurfaceandtheCollision_IfResult = Result134;
	UninterruptedAnimatedSphereASC39sDistancetoCollisionPlane_IfResult = Result144;
	}
	else
	{
	Collides_IfResult = Result145;
	IntersectionLocation_IfResult = Result157;
	PreASC45IntersectionSphereCenterLocation_IfResult = Result155;
	InitialPositionRelativeCollisionLocation_IfResult = Result158;
	TimeElapsedToCollision_IfResult = Result159;
	RemainingTimePostCollision_IfResult = Result160;
	PercentageofTimeUsedToPerformCollision_IfResult = Result153;
	InitialDistanceBetweenTheSphereASC39sSurfaceandtheCollision_IfResult = Result134;
	UninterruptedAnimatedSphereASC39sDistancetoCollisionPlane_IfResult = Result144;
	}
	Out_Collides = Collides_IfResult;
	Out_IntersectionLocation = IntersectionLocation_IfResult;
	Out_PreASC45IntersectionSphereCenterLocation = PreASC45IntersectionSphereCenterLocation_IfResult;
	Out_InitialPositionRelativeCollisionLocation = InitialPositionRelativeCollisionLocation_IfResult;
	Out_TimeElapsedToCollision = TimeElapsedToCollision_IfResult;
	Out_RemainingTimePostCollision = RemainingTimePostCollision_IfResult;
	Out_PercentageofTimeUsedToPerformCollision = PercentageofTimeUsedToPerformCollision_IfResult;
	Out_InitialDistanceBetweenTheSphereASC39sSurfaceandtheCollision = InitialDistanceBetweenTheSphereASC39sSurfaceandtheCollision_IfResult;
	Out_UninterruptedAnimatedSphereASC39sDistancetoCollisionPlane = UninterruptedAnimatedSphereASC39sDistancetoCollisionPlane_IfResult;
}

void RandomRangeFloat_Func_(float2 In_Min, float2 In_Max, int In_Seed, int In_RandomnessMode, bool In_OverrideSeed, out float2 Out_Result, inout FSimulationContext Context)
{
	int Constant266 = (0);
	bool Constant267 = false;
	int Constant268 = 0;
	int Constant269 = (0);
	bool Constant270 = false;
	NiagaraRandInfo GetRandomInfo_Emitter_Determinism_false_Func_Output_RandomInfo3;
	bool GetRandomInfo_Emitter_Determinism_false_Func_Output_UseDeterministicRandoms3;
	GetRandomInfo_Emitter_Determinism_false_Func_(In_Seed, Constant266, In_OverrideSeed, Constant268, Constant269, Constant270, In_RandomnessMode, GetRandomInfo_Emitter_Determinism_false_Func_Output_RandomInfo3, GetRandomInfo_Emitter_Determinism_false_Func_Output_UseDeterministicRandoms3, Context);
	float2 Result176 = In_Max - In_Min;
	int Seed13;
	int Seed23;
	int Seed33;
	Seed13 = GetRandomInfo_Emitter_Determinism_false_Func_Output_RandomInfo3.Seed1;
	Seed23 = GetRandomInfo_Emitter_Determinism_false_Func_Output_RandomInfo3.Seed2;
	Seed33 = GetRandomInfo_Emitter_Determinism_false_Func_Output_RandomInfo3.Seed3;
	float2 Result177 = rand_float(Result176, Seed13, Seed23, Seed33);
	float2 Result178 = rand_float(Result176);
	float2 Random_IfResult3;
	if(GetRandomInfo_Emitter_Determinism_false_Func_Output_UseDeterministicRandoms3)
	{
	Random_IfResult3 = Result177;
	}
	else
	{
	Random_IfResult3 = Result178;
	}
	float2 Result179 = In_Min + Random_IfResult3;
	Out_Result = Result179;
}

void CustomHlsl5A25A2A4455E3C692D3322A954DF887F_Func_(bool In_InputsAreNormalized, float3 In_From, float3 In_To, out float4 Out_Result)
{



		float NormAB = 1.0f;
	    float NormFactor = sqrt((In_From.x*In_From.x + In_From.y*In_From.y + In_From.z*In_From.z) * (In_To.x*In_To.x + In_To.y*In_To.y + In_To.z*In_To.z));

	    if (In_InputsAreNormalized)
	    {
	         NormAB = 1.0f;
	    }
	    else
	    {
	         NormAB = NormFactor;
	   }

		float w = NormAB + dot(In_From, In_To);
	    float4 Result1 = float4(In_From.y * In_To.z - In_From.z * In_To.y,
						   In_From.z * In_To.x - In_From.x * In_To.z,
						   In_From.x * In_To.y - In_From.y * In_To.x,
						   w);
		float4 Result2 = float4(-In_From.z, 0.0f, In_From.x, 0.0f);
	    float4 Result3 = float4(0.0f, -In_From.z, In_From.y, 0.0f);


	    if (abs(In_From.x) > abs(In_From.y))
	    {
	        Out_Result = Result2;
	    }
	    else
	    {
	        Out_Result = Result3;
	    }


		if (w >= 3.4e-4f * NormAB)
		{

			Out_Result = Result1;
		}

		Out_Result = normalize(Out_Result);

}

void FindQuatBetween_Func_(float3 In_From, float3 In_To, bool In_InputsAreNormalized, out float4 Out_NewOutput, inout FSimulationContext Context)
{
	float4 CustomHlsl5A25A2A4455E3C692D3322A954DF887F_Func_Output_Result;
	CustomHlsl5A25A2A4455E3C692D3322A954DF887F_Func_(In_InputsAreNormalized, In_From, In_To, CustomHlsl5A25A2A4455E3C692D3322A954DF887F_Func_Output_Result);
	Out_NewOutput = CustomHlsl5A25A2A4455E3C692D3322A954DF887F_Func_Output_Result;
}

void MultiplyVectorWithQuaternion_Func_(float3 In_VECTOR_VAR, float4 In_Quaternion, out float3 Out_Vector, inout FSimulationContext Context)
{
	float3 Output0;
	float Output18;
	Output0.x = In_Quaternion.x;
	Output0.y = In_Quaternion.y;
	Output0.z = In_Quaternion.z;
	Output18 = In_Quaternion.w;
	float Result191 = dot(Output0,In_VECTOR_VAR);
	float Constant279 = 2;
	float Result192 = Result191 * Constant279;
	float3 Result193 = Output0 * Result192;
	float Result194 = Output18 * Output18;
	float Result195 = dot(Output0,Output0);
	float Result196 = Result194 - Result195;
	float3 Result197 = Result196 * In_VECTOR_VAR;
	float3 Result198 = Result193 + Result197;
	float3 Result199 = cross(Output0,In_VECTOR_VAR);
	float Constant280 = 2;
	float Result200 = Output18 * Constant280;
	float3 Result201 = Result199 * Result200;
	float3 Result202 = Result198 + Result201;
	Out_Vector = Result202;
}

void RandomizeCollisionNormals_Func_(float3 In_ConeAxis, float In_Scale, float In_Spread, out float3 Out_Ouput, inout FSimulationContext Context)
{
	float Constant260 = 0;
	float Constant261 = 1;
	float Result174 = clamp(In_Spread,Constant260,Constant261);
	float Constant262 = -1;
	float Result175 = Result174 * Constant262;
	float2 Output16;
	Output16.x = Result175;
	Output16.y = Result175;
	float2 Output17;
	Output17.x = Result174;
	Output17.y = Result174;
	int Constant263 = -1;
	int Constant264 = 0;
	bool Constant265 = false;
	float2 RandomRangeFloat_Func_Output_Result6;
	RandomRangeFloat_Func_(Output16, Output17, Constant263, Constant264, Constant265, RandomRangeFloat_Func_Output_Result6, Context);
	float X1;
	float Y1;
	X1 = RandomRangeFloat_Func_Output_Result6.x;
	Y1 = RandomRangeFloat_Func_Output_Result6.y;
	float3 Constant271 = float3(1,0,0);
	float3 Result180 = X1 * Constant271;
	float3 Constant272 = float3(0,1,0);
	float3 Result181 = Y1 * Constant272;
	float3 Result182 = Result180 + Result181;
	float Result183 = abs(X1);
	float Result184 = abs(Y1);
	float Result185 = max(Result183, Result184);
	float Result186 = 1 - Result185;
	float3 Constant273 = float3(0,0,1);
	float3 Result187 = Result186 * Constant273;
	float3 Result188 = Result182 + Result187;
	float3 Result189 = normalize(Result188);
	float3 Result190 = Result189 * In_Scale;
	float3 Constant274 = float3(0,0,1);
	float3 Constant275 = float3(0,0,1);
	float Constant276 = 1e-05;
	float Constant277 = 1;
	float3 DirectionAndLengthSafe_Func_Output_Direction2;
	float DirectionAndLengthSafe_Func_Output_Length2;
	bool DirectionAndLengthSafe_Func_Output_BelowThreshold2;
	DirectionAndLengthSafe_Func_(In_ConeAxis, Constant275, Constant276, Constant277, DirectionAndLengthSafe_Func_Output_Direction2, DirectionAndLengthSafe_Func_Output_Length2, DirectionAndLengthSafe_Func_Output_BelowThreshold2, Context);
	bool Constant278 = false;
	float4 FindQuatBetween_Func_Output_NewOutput;
	FindQuatBetween_Func_(Constant274, DirectionAndLengthSafe_Func_Output_Direction2, Constant278, FindQuatBetween_Func_Output_NewOutput, Context);
	float3 MultiplyVectorWithQuaternion_Func_Output_Vector;
	MultiplyVectorWithQuaternion_Func_(Result190, FindQuatBetween_Func_Output_NewOutput, MultiplyVectorWithQuaternion_Func_Output_Vector, Context);
	Out_Ouput = MultiplyVectorWithQuaternion_Func_Output_Vector;
}

void ReflectVector_Func_(float3 In_InVector, float3 In_Normal, out float3 Out_Reflected, inout FSimulationContext Context)
{
	float Result203 = dot(In_InVector,In_Normal);
	float Result204 = Result203 + Result203;
	float3 Result205 = Result204 * In_Normal;
	float3 Result206 = In_InVector - Result205;
	Out_Reflected = Result206;
}

void CentimeterMeterConversion_Func_(float3 In_INPUT_VAR, out float3 Out_CentimeterstoMeters, out float3 Out_MeterstoCentimeters, inout FSimulationContext Context)
{
	float Constant281 = 0.01;
	float3 Result207 = In_INPUT_VAR * Constant281;
	float Constant282 = 100;
	float3 Result208 = In_INPUT_VAR * Constant282;
	Out_CentimeterstoMeters = Result207;
	Out_MeterstoCentimeters = Result208;
}

void ProjectVectorOnPlane_Func_(float3 In_VECTOR_VAR, float3 In_Normal, out float3 Out_Ouput, inout FSimulationContext Context)
{
	float Result212 = dot(In_VECTOR_VAR,In_Normal);
	float3 Result213 = Result212 * In_Normal;
	float3 Result214 = In_VECTOR_VAR - Result213;
	Out_Ouput = Result214;
}

void Collision_CollisionQueryAndResponse_Emitter_Func_(inout FSimulationContext Context)
{
	Context.MapUpdate.Local.Collision.CollisionQueryAndResponse.ModuleInitialDataInstanceAlive = Context.MapUpdate.DataInstance.Alive;
	Context.MapUpdate.Collision.CollisionQueryAndResponse.DeltaTime = Context.MapUpdate.Collision.CollisionQueryAndResponse.DeltaTime;
	float3 Result114 = Context.MapUpdate.Transient.PhysicsForce / Context.MapUpdate.Particles.Mass;
	float3 Result115 = Result114 * Context.MapUpdate.Collision.CollisionQueryAndResponse.DeltaTime;
	float3 Result116 = Result115 + Context.MapUpdate.Particles.Velocity;
	float3 Result117 = Result116 * Context.MapUpdate.Collision.CollisionQueryAndResponse.DeltaTime;
	Context.MapUpdate.Local.Collision.CollisionQueryAndResponse.ModuleTraceOrigin = Context.MapUpdate.Particles.Position;
	Context.MapUpdate.Local.Collision.CollisionQueryAndResponse.ModuleForceContribution = Result115;
	Context.MapUpdate.Local.Collision.CollisionQueryAndResponse.ModuleAttemptedMovementThisUpdate = Result117;
	Context.MapUpdate.Local.Collision.CollisionQueryAndResponse.ModuleInitialForceDividedByMass = Result114;
	float3 Constant237 = float3(0,0,-1);
	float Constant238 = 1e-05;
	float Constant239 = 1;
	float3 DirectionAndLengthSafe_Func_Output_Direction;
	float DirectionAndLengthSafe_Func_Output_Length;
	bool DirectionAndLengthSafe_Func_Output_BelowThreshold;
	DirectionAndLengthSafe_Func_(Context.MapUpdate.Local.Collision.CollisionQueryAndResponse.ModuleForceContribution, Constant237, Constant238, Constant239, DirectionAndLengthSafe_Func_Output_Direction, DirectionAndLengthSafe_Func_Output_Length, DirectionAndLengthSafe_Func_Output_BelowThreshold, Context);
	Context.MapUpdate.Local.Collision.CollisionQueryAndResponse.ModuleTraceVector = Context.MapUpdate.Local.Collision.CollisionQueryAndResponse.ModuleForceContribution;
	Context.MapUpdate.Local.Collision.CollisionQueryAndResponse.ModuleTraceDirection = DirectionAndLengthSafe_Func_Output_Direction;
	float3 Result122 = DirectionAndLengthSafe_Func_Output_Direction * Context.MapUpdate.Collision.CollisionQueryAndResponse.ParticleRadius;
	float3 Result123 = Context.MapUpdate.Local.Collision.CollisionQueryAndResponse.ModuleTraceOrigin - Result122;
	float3 Result124 = Context.MapUpdate.Collision.CollisionQueryAndResponse.TraceVectorLengthMultiplier * Context.MapUpdate.Local.Collision.CollisionQueryAndResponse.ModuleForceContribution;
	float3 Result125 = Result122 + Result124;
	float3 Constant240 = float3(0,0,-1);
	float Constant241 = 1e-05;
	float Constant242 = 1;
	float3 DirectionAndLengthSafe_Func_Output_Direction1;
	float DirectionAndLengthSafe_Func_Output_Length1;
	bool DirectionAndLengthSafe_Func_Output_BelowThreshold1;
	DirectionAndLengthSafe_Func_(Result125, Constant240, Constant241, Constant242, DirectionAndLengthSafe_Func_Output_Direction1, DirectionAndLengthSafe_Func_Output_Length1, DirectionAndLengthSafe_Func_Output_BelowThreshold1, Context);
	float Result126 = min(DirectionAndLengthSafe_Func_Output_Length1, Context.MapUpdate.Collision.CollisionQueryAndResponse.MaxTraceLength);
	float3 Result127 = DirectionAndLengthSafe_Func_Output_Direction1 * Result126;
	float3 Result128 = Context.MapUpdate.Local.Collision.CollisionQueryAndResponse.ModuleTraceOrigin + Result127;
	Context.MapUpdate.Local.Collision.CollisionQueryAndResponse.ModuleTraceWorldStart = Result123;
	Context.MapUpdate.Local.Collision.CollisionQueryAndResponse.ModuleTraceWorldEnd = Result128;
	int Constant243 = 1;
	int PerformCollisionQueryAsyncCPU_CollisionCollisionQueryAndResponseQueryOutput_NextFrameQueryID;
	bool PerformCollisionQueryAsyncCPU_CollisionCollisionQueryAndResponseQueryOutput_CollisionValid;
	bool PerformCollisionQueryAsyncCPU_CollisionCollisionQueryAndResponseQueryOutput_IsTraceInsideMesh;
	float3 PerformCollisionQueryAsyncCPU_CollisionCollisionQueryAndResponseQueryOutput_CollisionPosWorld;
	float3 PerformCollisionQueryAsyncCPU_CollisionCollisionQueryAndResponseQueryOutput_CollisionNormal;
	float PerformCollisionQueryAsyncCPU_CollisionCollisionQueryAndResponseQueryOutput_CollisionMaterialFriction;
	float PerformCollisionQueryAsyncCPU_CollisionCollisionQueryAndResponseQueryOutput_CollisionMaterialRestitution;
	PerformCollisionQueryAsyncCPU_CollisionCollisionQueryAndResponseQuery(0, Context.MapUpdate.Particles.Collision.CollisionQueryAndResponse.CollisionID, Context.MapUpdate.Local.Collision.CollisionQueryAndResponse.ModuleTraceWorldStart, Context.MapUpdate.Local.Collision.CollisionQueryAndResponse.ModuleTraceWorldEnd, Constant243, PerformCollisionQueryAsyncCPU_CollisionCollisionQueryAndResponseQueryOutput_NextFrameQueryID, PerformCollisionQueryAsyncCPU_CollisionCollisionQueryAndResponseQueryOutput_CollisionValid, PerformCollisionQueryAsyncCPU_CollisionCollisionQueryAndResponseQueryOutput_IsTraceInsideMesh, PerformCollisionQueryAsyncCPU_CollisionCollisionQueryAndResponseQueryOutput_CollisionPosWorld, PerformCollisionQueryAsyncCPU_CollisionCollisionQueryAndResponseQueryOutput_CollisionNormal, PerformCollisionQueryAsyncCPU_CollisionCollisionQueryAndResponseQueryOutput_CollisionMaterialFriction, PerformCollisionQueryAsyncCPU_CollisionCollisionQueryAndResponseQueryOutput_CollisionMaterialRestitution);
	bool Result129 = !PerformCollisionQueryAsyncCPU_CollisionCollisionQueryAndResponseQueryOutput_IsTraceInsideMesh;
	bool Result130 = PerformCollisionQueryAsyncCPU_CollisionCollisionQueryAndResponseQueryOutput_CollisionValid && Result129;
	bool Constant244 = false;
	bool Constant245 = true;
	Context.MapUpdate.Particles.Collision.CollisionQueryAndResponse.CollisionID = PerformCollisionQueryAsyncCPU_CollisionCollisionQueryAndResponseQueryOutput_NextFrameQueryID;
	Context.MapUpdate.Local.Collision.CollisionQueryAndResponse.ModuleReturnedCollisionValidBool = Result130;
	Context.MapUpdate.Local.Collision.CollisionQueryAndResponse.ModuleReturnedCollisionWorldPosition = PerformCollisionQueryAsyncCPU_CollisionCollisionQueryAndResponseQueryOutput_CollisionPosWorld;
	Context.MapUpdate.Local.Collision.CollisionQueryAndResponse.ModuleReturnedCollisionNormal = PerformCollisionQueryAsyncCPU_CollisionCollisionQueryAndResponseQueryOutput_CollisionNormal;
	Context.MapUpdate.Local.Collision.CollisionQueryAndResponse.ModuleReturnedFriction = PerformCollisionQueryAsyncCPU_CollisionCollisionQueryAndResponseQueryOutput_CollisionMaterialFriction;
	Context.MapUpdate.Local.Collision.CollisionQueryAndResponse.ModuleReturnedRestitution = Context.MapUpdate.Collision.CollisionQueryAndResponse.ParticleRestitutionCoeffiecient;
	Context.MapUpdate.DataInstance.Alive = Context.MapUpdate.DataInstance.Alive;
	Context.MapUpdate.OUTPUT_VAR.Collision.CollisionQueryAndResponse.DepthBasedCollisionParticleOccluded = Constant244;
	Context.MapUpdate.OUTPUT_VAR.Collision.CollisionQueryAndResponse.ParticleOnScreen = Constant245;
	float3 Constant246 = float3(0,0,1);
	float3 Constant247 = float3(0,0,-1e+16);
	float3 PlaneNormal_IfResult;
	float3 PlanePivotPoint_IfResult;
	if(Context.MapUpdate.Local.Collision.CollisionQueryAndResponse.ModuleReturnedCollisionValidBool)
	{
	PlaneNormal_IfResult = Context.MapUpdate.Local.Collision.CollisionQueryAndResponse.ModuleReturnedCollisionNormal;
	PlanePivotPoint_IfResult = Context.MapUpdate.Local.Collision.CollisionQueryAndResponse.ModuleReturnedCollisionWorldPosition;
	}
	else
	{
	PlaneNormal_IfResult = Constant246;
	PlanePivotPoint_IfResult = Constant247;
	}
	Context.MapUpdate.Local.Collision.CollisionQueryAndResponse.ModulePlaneNormal = PlaneNormal_IfResult;
	Context.MapUpdate.Local.Collision.CollisionQueryAndResponse.ModulePlanePivotPoint = PlanePivotPoint_IfResult;
	bool PlaneSphereCollisionDetection_Func_Output_Collides;
	float3 PlaneSphereCollisionDetection_Func_Output_IntersectionLocation;
	float3 PlaneSphereCollisionDetection_Func_Output_PreASC45IntersectionSphereCenterLocation;
	float3 PlaneSphereCollisionDetection_Func_Output_InitialPositionRelativeCollisionLocation;
	float PlaneSphereCollisionDetection_Func_Output_TimeElapsedToCollision;
	float PlaneSphereCollisionDetection_Func_Output_RemainingTimePostCollision;
	float PlaneSphereCollisionDetection_Func_Output_PercentageofTimeUsedToPerformCollision;
	float PlaneSphereCollisionDetection_Func_Output_InitialDistanceBetweenTheSphereASC39sSurfaceandtheCollision;
	float PlaneSphereCollisionDetection_Func_Output_UninterruptedAnimatedSphereASC39sDistancetoCollisionPlane;
	PlaneSphereCollisionDetection_Func_(Context.MapUpdate.Local.Collision.CollisionQueryAndResponse.ModulePlaneNormal, Context.MapUpdate.Local.Collision.CollisionQueryAndResponse.ModulePlanePivotPoint, Context.MapUpdate.Local.Collision.CollisionQueryAndResponse.ModuleTraceOrigin, Context.MapUpdate.Local.Collision.CollisionQueryAndResponse.ModuleAttemptedMovementThisUpdate, Context.MapUpdate.Collision.CollisionQueryAndResponse.ParticleRadius, Context.MapUpdate.Collision.CollisionQueryAndResponse.DeltaTime, Context.MapUpdate.Collision.CollisionQueryAndResponse.MaxIntersectionCorrectionDistance, PlaneSphereCollisionDetection_Func_Output_Collides, PlaneSphereCollisionDetection_Func_Output_IntersectionLocation, PlaneSphereCollisionDetection_Func_Output_PreASC45IntersectionSphereCenterLocation, PlaneSphereCollisionDetection_Func_Output_InitialPositionRelativeCollisionLocation, PlaneSphereCollisionDetection_Func_Output_TimeElapsedToCollision, PlaneSphereCollisionDetection_Func_Output_RemainingTimePostCollision, PlaneSphereCollisionDetection_Func_Output_PercentageofTimeUsedToPerformCollision, PlaneSphereCollisionDetection_Func_Output_InitialDistanceBetweenTheSphereASC39sSurfaceandtheCollision, PlaneSphereCollisionDetection_Func_Output_UninterruptedAnimatedSphereASC39sDistancetoCollisionPlane, Context);
	Context.MapUpdate.Transient.CollisionWorldPosition = PlaneSphereCollisionDetection_Func_Output_IntersectionLocation;
	Context.MapUpdate.Transient.CollisionParticleWorldPosition = PlaneSphereCollisionDetection_Func_Output_PreASC45IntersectionSphereCenterLocation;
	Context.MapUpdate.Transient.CollisionParticleRelativeCollisionLocation = PlaneSphereCollisionDetection_Func_Output_InitialPositionRelativeCollisionLocation;
	Context.MapUpdate.Local.Collision.CollisionQueryAndResponse.ModuleTickDeltaForThisCollisionUpdate = PlaneSphereCollisionDetection_Func_Output_TimeElapsedToCollision;
	Context.MapUpdate.Local.Collision.CollisionQueryAndResponse.ModulePhysicsDeltaTime = PlaneSphereCollisionDetection_Func_Output_RemainingTimePostCollision;
	Context.MapUpdate.Local.Collision.CollisionQueryAndResponse.ModulePercentageOfTickDedicatedToUpdatingPosition = PlaneSphereCollisionDetection_Func_Output_PercentageofTimeUsedToPerformCollision;
	Context.MapUpdate.OUTPUT_VAR.Collision.CollisionQueryAndResponse.CollisionPenetrationDistance = PlaneSphereCollisionDetection_Func_Output_InitialDistanceBetweenTheSphereASC39sSurfaceandtheCollision;
	Context.MapUpdate.Transient.CollisionDistanceToCollision = PlaneSphereCollisionDetection_Func_Output_UninterruptedAnimatedSphereASC39sDistancetoCollisionPlane;
	float Constant256 = 0;
	bool Result161 = NiagaraAll(Context.MapUpdate.Transient.CollisionDistanceToCollision <= Constant256);
	bool Result162 = Context.MapUpdate.Collision.CollisionQueryAndResponse.CollisionEnabled && Result161;
	bool Result163 = Result162 || Context.MapUpdate.Particles.HasCollided;
	Context.MapUpdate.OUTPUT_VAR.Collision.CollisionQueryAndResponse.PhysicsCollidesThisFrame = Result162;
	Context.MapUpdate.Particles.HasCollided = Result163;
	float3 Result164 = -(Context.MapUpdate.Local.Collision.CollisionQueryAndResponse.ModulePlaneNormal);
	float Result165 = dot(Result164,Context.MapUpdate.Local.Collision.CollisionQueryAndResponse.ModuleAttemptedMovementThisUpdate);
	float Result166 = Context.MapUpdate.Collision.CollisionQueryAndResponse.DeltaTime * Context.MapUpdate.Collision.CollisionQueryAndResponse.DeltaTime;
	float3 Result167 = Result166 * Context.MapUpdate.Local.Collision.CollisionQueryAndResponse.ModuleInitialForceDividedByMass;
	float Result168 = dot(Result164,Result167);
	float Result169 = Result165 - Result168;
	float Constant257 = 0.1;
	bool Result170 = NiagaraAll(Result169 < Constant257);
	Context.MapUpdate.Local.Collision.CollisionQueryAndResponse.ModuleRemoveRestitution = Result170;
	float3 Result171 = Context.MapUpdate.Local.Collision.CollisionQueryAndResponse.ModuleAttemptedMovementThisUpdate / Context.MapUpdate.Collision.CollisionQueryAndResponse.DeltaTime;
	float float_IfResult10;
	if(Context.MapUpdate.OUTPUT_VAR.Collision.CollisionQueryAndResponse.PhysicsCollidesThisFrame)
	{
	float_IfResult10 = Context.MapUpdate.Local.Collision.CollisionQueryAndResponse.ModulePhysicsDeltaTime;
	}
	else
	{
	float_IfResult10 = Context.MapUpdate.Collision.CollisionQueryAndResponse.DeltaTime;
	}
	float Constant258 = 0;
	float float_IfResult11;
	if(Context.MapUpdate.Local.Collision.CollisionQueryAndResponse.ModuleRemoveRestitution)
	{
	float_IfResult11 = Constant258;
	}
	else
	{
	float_IfResult11 = Context.MapUpdate.Local.Collision.CollisionQueryAndResponse.ModuleReturnedRestitution;
	}
	Context.MapUpdate.Transient.CollisionValid = Context.MapUpdate.OUTPUT_VAR.Collision.CollisionQueryAndResponse.PhysicsCollidesThisFrame;
	Context.MapUpdate.Transient.CollisionSize = Context.MapUpdate.Collision.CollisionQueryAndResponse.ParticleRadius;
	Context.MapUpdate.Transient.CollisionNormal = Context.MapUpdate.Local.Collision.CollisionQueryAndResponse.ModulePlaneNormal;
	Context.MapUpdate.Transient.CollisionVelocity = Result171;
	Context.MapUpdate.Transient.CollisionFriction = Context.MapUpdate.Local.Collision.CollisionQueryAndResponse.ModuleReturnedFriction;
	Context.MapUpdate.Transient.PhysicsDeltaTime = float_IfResult10;
	Context.MapUpdate.Transient.CollisionRestitution = float_IfResult11;
	bool Result172 = !Context.MapUpdate.Local.Collision.CollisionQueryAndResponse.ModuleRemoveRestitution;
	bool Result173 = Result172 && Context.MapUpdate.Collision.CollisionQueryAndResponse.RandomizeCollisionNormal;
	float Constant259 = 1;
	float3 RandomizeCollisionNormals_Func_Output_Ouput;
	RandomizeCollisionNormals_Func_(Context.MapUpdate.Transient.CollisionNormal, Constant259, Context.MapUpdate.Collision.CollisionQueryAndResponse.CollisionNormalRandomizationPercentage, RandomizeCollisionNormals_Func_Output_Ouput, Context);
	float3 Vector_IfResult11;
	if(Result173)
	{
	Vector_IfResult11 = RandomizeCollisionNormals_Func_Output_Ouput;
	}
	else
	{
	Vector_IfResult11 = Context.MapUpdate.Transient.CollisionNormal;
	}
	float3 ReflectVector_Func_Output_Reflected;
	ReflectVector_Func_(Context.MapUpdate.Transient.CollisionVelocity, Vector_IfResult11, ReflectVector_Func_Output_Reflected, Context);
	Context.MapUpdate.Local.Collision.CollisionQueryAndResponse.ModuleReflectedVelocity = ReflectVector_Func_Output_Reflected;
	float3 CentimeterMeterConversion_Func_Output_CentimeterstoMeters;
	float3 CentimeterMeterConversion_Func_Output_MeterstoCentimeters;
	CentimeterMeterConversion_Func_(Context.MapUpdate.Transient.CollisionVelocity, CentimeterMeterConversion_Func_Output_CentimeterstoMeters, CentimeterMeterConversion_Func_Output_MeterstoCentimeters, Context);
	float3 Result209 = Context.MapUpdate.Particles.Mass * CentimeterMeterConversion_Func_Output_CentimeterstoMeters;
	float Constant283 = -1;
	float3 Result210 = Result209 * Constant283;
	float Result211 = dot(Result210,Context.MapUpdate.Transient.CollisionNormal);
	Context.MapUpdate.Local.Collision.CollisionQueryAndResponse.ModuleNormalForceInNewtons = Result211;
	float3 ProjectVectorOnPlane_Func_Output_Ouput;
	ProjectVectorOnPlane_Func_(Context.MapUpdate.Local.Collision.CollisionQueryAndResponse.ModuleReflectedVelocity, Context.MapUpdate.Transient.CollisionNormal, ProjectVectorOnPlane_Func_Output_Ouput, Context);
	float3 Constant284 = float3(0,0,0);
	float Constant285 = 1e-05;
	float Constant286 = 1;
	float3 DirectionAndLengthSafe_Func_Output_Direction3;
	float DirectionAndLengthSafe_Func_Output_Length3;
	bool DirectionAndLengthSafe_Func_Output_BelowThreshold3;
	DirectionAndLengthSafe_Func_(ProjectVectorOnPlane_Func_Output_Ouput, Constant284, Constant285, Constant286, DirectionAndLengthSafe_Func_Output_Direction3, DirectionAndLengthSafe_Func_Output_Length3, DirectionAndLengthSafe_Func_Output_BelowThreshold3, Context);
	float3 CentimeterMeterConversion_Func_Output_CentimeterstoMeters1;
	float3 CentimeterMeterConversion_Func_Output_MeterstoCentimeters1;
	CentimeterMeterConversion_Func_(ProjectVectorOnPlane_Func_Output_Ouput, CentimeterMeterConversion_Func_Output_CentimeterstoMeters1, CentimeterMeterConversion_Func_Output_MeterstoCentimeters1, Context);
	float3 Result215 = CentimeterMeterConversion_Func_Output_CentimeterstoMeters1 * Context.MapUpdate.Particles.Mass;
	float float_IfResult12;
	if(Context.MapUpdate.Local.Collision.CollisionQueryAndResponse.ModuleRemoveRestitution)
	{
	float_IfResult12 = Context.MapUpdate.Collision.CollisionQueryAndResponse.DynamicFrictionCoefficient;
	}
	else
	{
	float_IfResult12 = Context.MapUpdate.Collision.CollisionQueryAndResponse.BounceCollisionFriction;
	}
	float3 Result216 = DirectionAndLengthSafe_Func_Output_Direction3 * float_IfResult12 * Context.MapUpdate.Local.Collision.CollisionQueryAndResponse.ModuleNormalForceInNewtons;
	float3 Result217 = Result215 - Result216;
	float3 Constant287 = float3(0,0,0);
	float Constant288 = 1e-05;
	float Constant289 = 1;
	float3 DirectionAndLengthSafe_Func_Output_Direction4;
	float DirectionAndLengthSafe_Func_Output_Length4;
	bool DirectionAndLengthSafe_Func_Output_BelowThreshold4;
	DirectionAndLengthSafe_Func_(Result217, Constant287, Constant288, Constant289, DirectionAndLengthSafe_Func_Output_Direction4, DirectionAndLengthSafe_Func_Output_Length4, DirectionAndLengthSafe_Func_Output_BelowThreshold4, Context);
	float Result218 = dot(DirectionAndLengthSafe_Func_Output_Direction3,DirectionAndLengthSafe_Func_Output_Direction4);
	float Constant290 = 0;
	bool Result219 = NiagaraAll(Result218 <= Constant290);
	float3 Vector_IfResult12;
	if(Result219)
	{
	Vector_IfResult12 = Result215;
	}
	else
	{
	Vector_IfResult12 = Result216;
	}
	float Constant291 = -1;
	float3 Result220 = Vector_IfResult12 * Constant291;
	Context.MapUpdate.Local.Collision.CollisionQueryAndResponse.ModuleFrictionForceVectorInNewtons = Result220;
	float3 Result221 = Context.MapUpdate.Local.Collision.CollisionQueryAndResponse.ModuleFrictionForceVectorInNewtons / Context.MapUpdate.Particles.Mass;
	float3 CentimeterMeterConversion_Func_Output_CentimeterstoMeters2;
	float3 CentimeterMeterConversion_Func_Output_MeterstoCentimeters2;
	CentimeterMeterConversion_Func_(Result221, CentimeterMeterConversion_Func_Output_CentimeterstoMeters2, CentimeterMeterConversion_Func_Output_MeterstoCentimeters2, Context);
	Context.MapUpdate.Local.Collision.CollisionQueryAndResponse.ModuleFrictionForceVelocityVector = CentimeterMeterConversion_Func_Output_MeterstoCentimeters2;
	float3 Result222 = Context.MapUpdate.Local.Collision.CollisionQueryAndResponse.ModuleReflectedVelocity + Context.MapUpdate.Local.Collision.CollisionQueryAndResponse.ModuleFrictionForceVelocityVector;
	float Result223 = dot(Context.MapUpdate.Transient.CollisionNormal,Context.MapUpdate.Local.Collision.CollisionQueryAndResponse.ModuleReflectedVelocity);
	float3 Result224 = Context.MapUpdate.Transient.CollisionNormal * Result223;
	float Result225 = 1 - Context.MapUpdate.Transient.CollisionRestitution;
	float3 Result226 = Result224 * Result225;
	float3 Result227 = Result222 - Result226;
	Context.MapUpdate.Local.Collision.CollisionQueryAndResponse.ModuleReflectedVelocityWithFrictionApplied = Result227;
	float3 Particleposition_IfResult;
	if(Context.MapUpdate.Transient.CollisionValid)
	{
	Particleposition_IfResult = Context.MapUpdate.Transient.CollisionParticleWorldPosition;
	}
	else
	{
	Particleposition_IfResult = Context.MapUpdate.Particles.Position;
	}
	Context.MapUpdate.Particles.Position = Particleposition_IfResult;
	float3 Constant292 = float3(0,0,1);
	float Constant293 = 1e-05;
	float Constant294 = 1;
	float3 DirectionAndLengthSafe_Func_Output_Direction5;
	float DirectionAndLengthSafe_Func_Output_Length5;
	bool DirectionAndLengthSafe_Func_Output_BelowThreshold5;
	DirectionAndLengthSafe_Func_(Context.MapUpdate.Transient.CollisionVelocity, Constant292, Constant293, Constant294, DirectionAndLengthSafe_Func_Output_Direction5, DirectionAndLengthSafe_Func_Output_Length5, DirectionAndLengthSafe_Func_Output_BelowThreshold5, Context);
	float Result228 = dot(DirectionAndLengthSafe_Func_Output_Direction5,Context.MapUpdate.Transient.CollisionNormal);
	float Constant295 = 0;
	bool Result229 = NiagaraAll(Result228 < Constant295);
	bool Result230 = Result229 && Context.MapUpdate.Transient.CollisionValid;
	float3 Constant296 = float3(0,0,0);
	float3 physicsforce_IfResult;
	float3 Velocity_IfResult;
	if(Result230)
	{
	physicsforce_IfResult = Constant296;
	Velocity_IfResult = Context.MapUpdate.Local.Collision.CollisionQueryAndResponse.ModuleReflectedVelocityWithFrictionApplied;
	}
	else
	{
	physicsforce_IfResult = Context.MapUpdate.Transient.PhysicsForce;
	Velocity_IfResult = Context.MapUpdate.Particles.Velocity;
	}
	Context.MapUpdate.Transient.PhysicsForce = physicsforce_IfResult;
	Context.MapUpdate.Particles.Velocity = Velocity_IfResult;
}

void Collision_CollisionQueryAndResponse001_Emitter_Func_(inout FSimulationContext Context)
{
	Context.MapUpdate.Local.Collision.CollisionQueryAndResponse001.ModuleInitialDataInstanceAlive = Context.MapUpdate.DataInstance.Alive;
	Context.MapUpdate.Collision.CollisionQueryAndResponse001.DeltaTime = Context.MapUpdate.Collision.CollisionQueryAndResponse001.DeltaTime;
	float3 Result231 = Context.MapUpdate.Transient.PhysicsForce / Context.MapUpdate.Particles.Mass;
	float3 Result232 = Result231 * Context.MapUpdate.Collision.CollisionQueryAndResponse001.DeltaTime;
	float3 Result233 = Result232 + Context.MapUpdate.Particles.Velocity;
	float3 Result234 = Result233 * Context.MapUpdate.Collision.CollisionQueryAndResponse001.DeltaTime;
	Context.MapUpdate.Local.Collision.CollisionQueryAndResponse001.ModuleTraceOrigin = Context.MapUpdate.Particles.Position;
	Context.MapUpdate.Local.Collision.CollisionQueryAndResponse001.ModuleForceContribution = Result232;
	Context.MapUpdate.Local.Collision.CollisionQueryAndResponse001.ModuleAttemptedMovementThisUpdate = Result234;
	Context.MapUpdate.Local.Collision.CollisionQueryAndResponse001.ModuleInitialForceDividedByMass = Result231;
	float3 Constant320 = float3(0,0,-1);
	float Constant321 = 1e-05;
	float Constant322 = 1;
	float3 DirectionAndLengthSafe_Func_Output_Direction6;
	float DirectionAndLengthSafe_Func_Output_Length6;
	bool DirectionAndLengthSafe_Func_Output_BelowThreshold6;
	DirectionAndLengthSafe_Func_(Context.MapUpdate.Local.Collision.CollisionQueryAndResponse001.ModuleAttemptedMovementThisUpdate, Constant320, Constant321, Constant322, DirectionAndLengthSafe_Func_Output_Direction6, DirectionAndLengthSafe_Func_Output_Length6, DirectionAndLengthSafe_Func_Output_BelowThreshold6, Context);
	Context.MapUpdate.Local.Collision.CollisionQueryAndResponse001.ModuleTraceVector = Context.MapUpdate.Local.Collision.CollisionQueryAndResponse001.ModuleAttemptedMovementThisUpdate;
	Context.MapUpdate.Local.Collision.CollisionQueryAndResponse001.ModuleTraceDirection = DirectionAndLengthSafe_Func_Output_Direction6;
	float3 Result235 = DirectionAndLengthSafe_Func_Output_Direction6 * Context.MapUpdate.Collision.CollisionQueryAndResponse001.ParticleRadius;
	float3 Result236 = Context.MapUpdate.Local.Collision.CollisionQueryAndResponse001.ModuleTraceOrigin - Result235;
	float3 Result237 = Context.MapUpdate.Collision.CollisionQueryAndResponse001.TraceVectorLengthMultiplier * Context.MapUpdate.Local.Collision.CollisionQueryAndResponse001.ModuleAttemptedMovementThisUpdate;
	float3 Result238 = Result235 + Result237;
	float3 Constant323 = float3(0,0,-1);
	float Constant324 = 1e-05;
	float Constant325 = 1;
	float3 DirectionAndLengthSafe_Func_Output_Direction7;
	float DirectionAndLengthSafe_Func_Output_Length7;
	bool DirectionAndLengthSafe_Func_Output_BelowThreshold7;
	DirectionAndLengthSafe_Func_(Result238, Constant323, Constant324, Constant325, DirectionAndLengthSafe_Func_Output_Direction7, DirectionAndLengthSafe_Func_Output_Length7, DirectionAndLengthSafe_Func_Output_BelowThreshold7, Context);
	float Result239 = min(DirectionAndLengthSafe_Func_Output_Length7, Context.MapUpdate.Collision.CollisionQueryAndResponse001.MaxTraceLength);
	float3 Result240 = DirectionAndLengthSafe_Func_Output_Direction7 * Result239;
	float3 Result241 = Context.MapUpdate.Local.Collision.CollisionQueryAndResponse001.ModuleTraceOrigin + Result240;
	Context.MapUpdate.Local.Collision.CollisionQueryAndResponse001.ModuleTraceWorldStart = Result236;
	Context.MapUpdate.Local.Collision.CollisionQueryAndResponse001.ModuleTraceWorldEnd = Result241;
	int Constant326 = 1;
	int PerformCollisionQueryAsyncCPU_CollisionCollisionQueryAndResponse001QueryOutput_NextFrameQueryID;
	bool PerformCollisionQueryAsyncCPU_CollisionCollisionQueryAndResponse001QueryOutput_CollisionValid;
	bool PerformCollisionQueryAsyncCPU_CollisionCollisionQueryAndResponse001QueryOutput_IsTraceInsideMesh;
	float3 PerformCollisionQueryAsyncCPU_CollisionCollisionQueryAndResponse001QueryOutput_CollisionPosWorld;
	float3 PerformCollisionQueryAsyncCPU_CollisionCollisionQueryAndResponse001QueryOutput_CollisionNormal;
	float PerformCollisionQueryAsyncCPU_CollisionCollisionQueryAndResponse001QueryOutput_CollisionMaterialFriction;
	float PerformCollisionQueryAsyncCPU_CollisionCollisionQueryAndResponse001QueryOutput_CollisionMaterialRestitution;
	PerformCollisionQueryAsyncCPU_CollisionCollisionQueryAndResponse001Query(1, Context.MapUpdate.Particles.Collision.CollisionQueryAndResponse001.CollisionID, Context.MapUpdate.Local.Collision.CollisionQueryAndResponse001.ModuleTraceWorldStart, Context.MapUpdate.Local.Collision.CollisionQueryAndResponse001.ModuleTraceWorldEnd, Constant326, PerformCollisionQueryAsyncCPU_CollisionCollisionQueryAndResponse001QueryOutput_NextFrameQueryID, PerformCollisionQueryAsyncCPU_CollisionCollisionQueryAndResponse001QueryOutput_CollisionValid, PerformCollisionQueryAsyncCPU_CollisionCollisionQueryAndResponse001QueryOutput_IsTraceInsideMesh, PerformCollisionQueryAsyncCPU_CollisionCollisionQueryAndResponse001QueryOutput_CollisionPosWorld, PerformCollisionQueryAsyncCPU_CollisionCollisionQueryAndResponse001QueryOutput_CollisionNormal, PerformCollisionQueryAsyncCPU_CollisionCollisionQueryAndResponse001QueryOutput_CollisionMaterialFriction, PerformCollisionQueryAsyncCPU_CollisionCollisionQueryAndResponse001QueryOutput_CollisionMaterialRestitution);
	bool Result242 = !PerformCollisionQueryAsyncCPU_CollisionCollisionQueryAndResponse001QueryOutput_IsTraceInsideMesh;
	bool Result243 = PerformCollisionQueryAsyncCPU_CollisionCollisionQueryAndResponse001QueryOutput_CollisionValid && Result242;
	bool Constant327 = false;
	bool Constant328 = true;
	Context.MapUpdate.Particles.Collision.CollisionQueryAndResponse001.CollisionID = PerformCollisionQueryAsyncCPU_CollisionCollisionQueryAndResponse001QueryOutput_NextFrameQueryID;
	Context.MapUpdate.Local.Collision.CollisionQueryAndResponse001.ModuleReturnedCollisionValidBool = Result243;
	Context.MapUpdate.Local.Collision.CollisionQueryAndResponse001.ModuleReturnedCollisionWorldPosition = PerformCollisionQueryAsyncCPU_CollisionCollisionQueryAndResponse001QueryOutput_CollisionPosWorld;
	Context.MapUpdate.Local.Collision.CollisionQueryAndResponse001.ModuleReturnedCollisionNormal = PerformCollisionQueryAsyncCPU_CollisionCollisionQueryAndResponse001QueryOutput_CollisionNormal;
	Context.MapUpdate.Local.Collision.CollisionQueryAndResponse001.ModuleReturnedFriction = PerformCollisionQueryAsyncCPU_CollisionCollisionQueryAndResponse001QueryOutput_CollisionMaterialFriction;
	Context.MapUpdate.Local.Collision.CollisionQueryAndResponse001.ModuleReturnedRestitution = Context.MapUpdate.Collision.CollisionQueryAndResponse001.ParticleRestitutionCoeffiecient;
	Context.MapUpdate.DataInstance.Alive = Context.MapUpdate.DataInstance.Alive;
	Context.MapUpdate.OUTPUT_VAR.Collision.CollisionQueryAndResponse001.DepthBasedCollisionParticleOccluded = Constant327;
	Context.MapUpdate.OUTPUT_VAR.Collision.CollisionQueryAndResponse001.ParticleOnScreen = Constant328;
	float3 Constant329 = float3(0,0,1);
	float3 Constant330 = float3(0,0,-1e+16);
	float3 PlaneNormal_IfResult1;
	float3 PlanePivotPoint_IfResult1;
	if(Context.MapUpdate.Local.Collision.CollisionQueryAndResponse001.ModuleReturnedCollisionValidBool)
	{
	PlaneNormal_IfResult1 = Context.MapUpdate.Local.Collision.CollisionQueryAndResponse001.ModuleReturnedCollisionNormal;
	PlanePivotPoint_IfResult1 = Context.MapUpdate.Local.Collision.CollisionQueryAndResponse001.ModuleReturnedCollisionWorldPosition;
	}
	else
	{
	PlaneNormal_IfResult1 = Constant329;
	PlanePivotPoint_IfResult1 = Constant330;
	}
	Context.MapUpdate.Local.Collision.CollisionQueryAndResponse001.ModulePlaneNormal = PlaneNormal_IfResult1;
	Context.MapUpdate.Local.Collision.CollisionQueryAndResponse001.ModulePlanePivotPoint = PlanePivotPoint_IfResult1;
	bool PlaneSphereCollisionDetection_Func_Output_Collides1;
	float3 PlaneSphereCollisionDetection_Func_Output_IntersectionLocation1;
	float3 PlaneSphereCollisionDetection_Func_Output_PreASC45IntersectionSphereCenterLocation1;
	float3 PlaneSphereCollisionDetection_Func_Output_InitialPositionRelativeCollisionLocation1;
	float PlaneSphereCollisionDetection_Func_Output_TimeElapsedToCollision1;
	float PlaneSphereCollisionDetection_Func_Output_RemainingTimePostCollision1;
	float PlaneSphereCollisionDetection_Func_Output_PercentageofTimeUsedToPerformCollision1;
	float PlaneSphereCollisionDetection_Func_Output_InitialDistanceBetweenTheSphereASC39sSurfaceandtheCollision1;
	float PlaneSphereCollisionDetection_Func_Output_UninterruptedAnimatedSphereASC39sDistancetoCollisionPlane1;
	PlaneSphereCollisionDetection_Func_(Context.MapUpdate.Local.Collision.CollisionQueryAndResponse001.ModulePlaneNormal, Context.MapUpdate.Local.Collision.CollisionQueryAndResponse001.ModulePlanePivotPoint, Context.MapUpdate.Local.Collision.CollisionQueryAndResponse001.ModuleTraceOrigin, Context.MapUpdate.Local.Collision.CollisionQueryAndResponse001.ModuleAttemptedMovementThisUpdate, Context.MapUpdate.Collision.CollisionQueryAndResponse001.ParticleRadius, Context.MapUpdate.Collision.CollisionQueryAndResponse001.DeltaTime, Context.MapUpdate.Collision.CollisionQueryAndResponse001.MaxIntersectionCorrectionDistance, PlaneSphereCollisionDetection_Func_Output_Collides1, PlaneSphereCollisionDetection_Func_Output_IntersectionLocation1, PlaneSphereCollisionDetection_Func_Output_PreASC45IntersectionSphereCenterLocation1, PlaneSphereCollisionDetection_Func_Output_InitialPositionRelativeCollisionLocation1, PlaneSphereCollisionDetection_Func_Output_TimeElapsedToCollision1, PlaneSphereCollisionDetection_Func_Output_RemainingTimePostCollision1, PlaneSphereCollisionDetection_Func_Output_PercentageofTimeUsedToPerformCollision1, PlaneSphereCollisionDetection_Func_Output_InitialDistanceBetweenTheSphereASC39sSurfaceandtheCollision1, PlaneSphereCollisionDetection_Func_Output_UninterruptedAnimatedSphereASC39sDistancetoCollisionPlane1, Context);
	Context.MapUpdate.Transient.CollisionWorldPosition = PlaneSphereCollisionDetection_Func_Output_IntersectionLocation1;
	Context.MapUpdate.Transient.CollisionParticleWorldPosition = PlaneSphereCollisionDetection_Func_Output_PreASC45IntersectionSphereCenterLocation1;
	Context.MapUpdate.Transient.CollisionParticleRelativeCollisionLocation = PlaneSphereCollisionDetection_Func_Output_InitialPositionRelativeCollisionLocation1;
	Context.MapUpdate.Local.Collision.CollisionQueryAndResponse001.ModuleTickDeltaForThisCollisionUpdate = PlaneSphereCollisionDetection_Func_Output_TimeElapsedToCollision1;
	Context.MapUpdate.Local.Collision.CollisionQueryAndResponse001.ModulePhysicsDeltaTime = PlaneSphereCollisionDetection_Func_Output_RemainingTimePostCollision1;
	Context.MapUpdate.Local.Collision.CollisionQueryAndResponse001.ModulePercentageOfTickDedicatedToUpdatingPosition = PlaneSphereCollisionDetection_Func_Output_PercentageofTimeUsedToPerformCollision1;
	Context.MapUpdate.OUTPUT_VAR.Collision.CollisionQueryAndResponse001.CollisionPenetrationDistance = PlaneSphereCollisionDetection_Func_Output_InitialDistanceBetweenTheSphereASC39sSurfaceandtheCollision1;
	Context.MapUpdate.Transient.CollisionDistanceToCollision = PlaneSphereCollisionDetection_Func_Output_UninterruptedAnimatedSphereASC39sDistancetoCollisionPlane1;
	float Constant331 = 0;
	bool Result244 = NiagaraAll(Context.MapUpdate.Transient.CollisionDistanceToCollision <= Constant331);
	bool Result245 = Context.MapUpdate.Collision.CollisionQueryAndResponse001.CollisionEnabled && Result244;
	bool Result246 = Result245 || Context.MapUpdate.Particles.HasCollided;
	Context.MapUpdate.OUTPUT_VAR.Collision.CollisionQueryAndResponse001.PhysicsCollidesThisFrame = Result245;
	Context.MapUpdate.Particles.HasCollided = Result246;
	float3 Result247 = -(Context.MapUpdate.Local.Collision.CollisionQueryAndResponse001.ModulePlaneNormal);
	float Result248 = dot(Result247,Context.MapUpdate.Local.Collision.CollisionQueryAndResponse001.ModuleAttemptedMovementThisUpdate);
	float Result249 = Context.MapUpdate.Collision.CollisionQueryAndResponse001.DeltaTime * Context.MapUpdate.Collision.CollisionQueryAndResponse001.DeltaTime;
	float3 Result250 = Result249 * Context.MapUpdate.Local.Collision.CollisionQueryAndResponse001.ModuleInitialForceDividedByMass;
	float Result251 = dot(Result247,Result250);
	float Result252 = Result248 - Result251;
	float Constant332 = 0.1;
	bool Result253 = NiagaraAll(Result252 < Constant332);
	Context.MapUpdate.Local.Collision.CollisionQueryAndResponse001.ModuleRemoveRestitution = Result253;
	float3 Result254 = Context.MapUpdate.Local.Collision.CollisionQueryAndResponse001.ModuleAttemptedMovementThisUpdate / Context.MapUpdate.Collision.CollisionQueryAndResponse001.DeltaTime;
	float float_IfResult13;
	if(Context.MapUpdate.OUTPUT_VAR.Collision.CollisionQueryAndResponse001.PhysicsCollidesThisFrame)
	{
	float_IfResult13 = Context.MapUpdate.Local.Collision.CollisionQueryAndResponse001.ModulePhysicsDeltaTime;
	}
	else
	{
	float_IfResult13 = Context.MapUpdate.Collision.CollisionQueryAndResponse001.DeltaTime;
	}
	float Constant333 = 0;
	float float_IfResult14;
	if(Context.MapUpdate.Local.Collision.CollisionQueryAndResponse001.ModuleRemoveRestitution)
	{
	float_IfResult14 = Constant333;
	}
	else
	{
	float_IfResult14 = Context.MapUpdate.Local.Collision.CollisionQueryAndResponse001.ModuleReturnedRestitution;
	}
	Context.MapUpdate.Transient.CollisionValid = Context.MapUpdate.OUTPUT_VAR.Collision.CollisionQueryAndResponse001.PhysicsCollidesThisFrame;
	Context.MapUpdate.Transient.CollisionSize = Context.MapUpdate.Collision.CollisionQueryAndResponse001.ParticleRadius;
	Context.MapUpdate.Transient.CollisionNormal = Context.MapUpdate.Local.Collision.CollisionQueryAndResponse001.ModulePlaneNormal;
	Context.MapUpdate.Transient.CollisionVelocity = Result254;
	Context.MapUpdate.Transient.CollisionFriction = Context.MapUpdate.Local.Collision.CollisionQueryAndResponse001.ModuleReturnedFriction;
	Context.MapUpdate.Transient.PhysicsDeltaTime = float_IfResult13;
	Context.MapUpdate.Transient.CollisionRestitution = float_IfResult14;
	bool Result255 = !Context.MapUpdate.Local.Collision.CollisionQueryAndResponse001.ModuleRemoveRestitution;
	bool Result256 = Result255 && Context.MapUpdate.Collision.CollisionQueryAndResponse001.RandomizeCollisionNormal;
	float Constant334 = 1;
	float3 RandomizeCollisionNormals_Func_Output_Ouput1;
	RandomizeCollisionNormals_Func_(Context.MapUpdate.Transient.CollisionNormal, Constant334, Context.MapUpdate.Collision.CollisionQueryAndResponse001.CollisionNormalRandomizationPercentage, RandomizeCollisionNormals_Func_Output_Ouput1, Context);
	float3 Vector_IfResult13;
	if(Result256)
	{
	Vector_IfResult13 = RandomizeCollisionNormals_Func_Output_Ouput1;
	}
	else
	{
	Vector_IfResult13 = Context.MapUpdate.Transient.CollisionNormal;
	}
	float3 ReflectVector_Func_Output_Reflected1;
	ReflectVector_Func_(Context.MapUpdate.Transient.CollisionVelocity, Vector_IfResult13, ReflectVector_Func_Output_Reflected1, Context);
	Context.MapUpdate.Local.Collision.CollisionQueryAndResponse001.ModuleReflectedVelocity = ReflectVector_Func_Output_Reflected1;
	float3 CentimeterMeterConversion_Func_Output_CentimeterstoMeters3;
	float3 CentimeterMeterConversion_Func_Output_MeterstoCentimeters3;
	CentimeterMeterConversion_Func_(Context.MapUpdate.Transient.CollisionVelocity, CentimeterMeterConversion_Func_Output_CentimeterstoMeters3, CentimeterMeterConversion_Func_Output_MeterstoCentimeters3, Context);
	float3 Result257 = Context.MapUpdate.Particles.Mass * CentimeterMeterConversion_Func_Output_CentimeterstoMeters3;
	float Constant335 = -1;
	float3 Result258 = Result257 * Constant335;
	float Result259 = dot(Result258,Context.MapUpdate.Transient.CollisionNormal);
	Context.MapUpdate.Local.Collision.CollisionQueryAndResponse001.ModuleNormalForceInNewtons = Result259;
	float3 ProjectVectorOnPlane_Func_Output_Ouput1;
	ProjectVectorOnPlane_Func_(Context.MapUpdate.Local.Collision.CollisionQueryAndResponse001.ModuleReflectedVelocity, Context.MapUpdate.Transient.CollisionNormal, ProjectVectorOnPlane_Func_Output_Ouput1, Context);
	float3 Constant336 = float3(0,0,0);
	float Constant337 = 1e-05;
	float Constant338 = 1;
	float3 DirectionAndLengthSafe_Func_Output_Direction8;
	float DirectionAndLengthSafe_Func_Output_Length8;
	bool DirectionAndLengthSafe_Func_Output_BelowThreshold8;
	DirectionAndLengthSafe_Func_(ProjectVectorOnPlane_Func_Output_Ouput1, Constant336, Constant337, Constant338, DirectionAndLengthSafe_Func_Output_Direction8, DirectionAndLengthSafe_Func_Output_Length8, DirectionAndLengthSafe_Func_Output_BelowThreshold8, Context);
	float3 CentimeterMeterConversion_Func_Output_CentimeterstoMeters4;
	float3 CentimeterMeterConversion_Func_Output_MeterstoCentimeters4;
	CentimeterMeterConversion_Func_(ProjectVectorOnPlane_Func_Output_Ouput1, CentimeterMeterConversion_Func_Output_CentimeterstoMeters4, CentimeterMeterConversion_Func_Output_MeterstoCentimeters4, Context);
	float3 Result260 = CentimeterMeterConversion_Func_Output_CentimeterstoMeters4 * Context.MapUpdate.Particles.Mass;
	float float_IfResult15;
	if(Context.MapUpdate.Local.Collision.CollisionQueryAndResponse001.ModuleRemoveRestitution)
	{
	float_IfResult15 = Context.MapUpdate.Collision.CollisionQueryAndResponse001.DynamicFrictionCoefficient;
	}
	else
	{
	float_IfResult15 = Context.MapUpdate.Collision.CollisionQueryAndResponse001.BounceCollisionFriction;
	}
	float3 Result261 = DirectionAndLengthSafe_Func_Output_Direction8 * float_IfResult15 * Context.MapUpdate.Local.Collision.CollisionQueryAndResponse001.ModuleNormalForceInNewtons;
	float3 Result262 = Result260 - Result261;
	float3 Constant339 = float3(0,0,0);
	float Constant340 = 1e-05;
	float Constant341 = 1;
	float3 DirectionAndLengthSafe_Func_Output_Direction9;
	float DirectionAndLengthSafe_Func_Output_Length9;
	bool DirectionAndLengthSafe_Func_Output_BelowThreshold9;
	DirectionAndLengthSafe_Func_(Result262, Constant339, Constant340, Constant341, DirectionAndLengthSafe_Func_Output_Direction9, DirectionAndLengthSafe_Func_Output_Length9, DirectionAndLengthSafe_Func_Output_BelowThreshold9, Context);
	float Result263 = dot(DirectionAndLengthSafe_Func_Output_Direction8,DirectionAndLengthSafe_Func_Output_Direction9);
	float Constant342 = 0;
	bool Result264 = NiagaraAll(Result263 <= Constant342);
	float3 Vector_IfResult14;
	if(Result264)
	{
	Vector_IfResult14 = Result260;
	}
	else
	{
	Vector_IfResult14 = Result261;
	}
	float Constant343 = -1;
	float3 Result265 = Vector_IfResult14 * Constant343;
	Context.MapUpdate.Local.Collision.CollisionQueryAndResponse001.ModuleFrictionForceVectorInNewtons = Result265;
	float3 Result266 = Context.MapUpdate.Local.Collision.CollisionQueryAndResponse001.ModuleFrictionForceVectorInNewtons / Context.MapUpdate.Particles.Mass;
	float3 CentimeterMeterConversion_Func_Output_CentimeterstoMeters5;
	float3 CentimeterMeterConversion_Func_Output_MeterstoCentimeters5;
	CentimeterMeterConversion_Func_(Result266, CentimeterMeterConversion_Func_Output_CentimeterstoMeters5, CentimeterMeterConversion_Func_Output_MeterstoCentimeters5, Context);
	Context.MapUpdate.Local.Collision.CollisionQueryAndResponse001.ModuleFrictionForceVelocityVector = CentimeterMeterConversion_Func_Output_MeterstoCentimeters5;
	float3 Result267 = Context.MapUpdate.Local.Collision.CollisionQueryAndResponse001.ModuleReflectedVelocity + Context.MapUpdate.Local.Collision.CollisionQueryAndResponse001.ModuleFrictionForceVelocityVector;
	float Result268 = dot(Context.MapUpdate.Transient.CollisionNormal,Context.MapUpdate.Local.Collision.CollisionQueryAndResponse001.ModuleReflectedVelocity);
	float3 Result269 = Context.MapUpdate.Transient.CollisionNormal * Result268;
	float Result270 = 1 - Context.MapUpdate.Transient.CollisionRestitution;
	float3 Result271 = Result269 * Result270;
	float3 Result272 = Result267 - Result271;
	Context.MapUpdate.Local.Collision.CollisionQueryAndResponse001.ModuleReflectedVelocityWithFrictionApplied = Result272;
	float3 Particleposition_IfResult1;
	if(Context.MapUpdate.Transient.CollisionValid)
	{
	Particleposition_IfResult1 = Context.MapUpdate.Transient.CollisionParticleWorldPosition;
	}
	else
	{
	Particleposition_IfResult1 = Context.MapUpdate.Particles.Position;
	}
	Context.MapUpdate.Particles.Position = Particleposition_IfResult1;
	float3 Constant344 = float3(0,0,1);
	float Constant345 = 1e-05;
	float Constant346 = 1;
	float3 DirectionAndLengthSafe_Func_Output_Direction10;
	float DirectionAndLengthSafe_Func_Output_Length10;
	bool DirectionAndLengthSafe_Func_Output_BelowThreshold10;
	DirectionAndLengthSafe_Func_(Context.MapUpdate.Transient.CollisionVelocity, Constant344, Constant345, Constant346, DirectionAndLengthSafe_Func_Output_Direction10, DirectionAndLengthSafe_Func_Output_Length10, DirectionAndLengthSafe_Func_Output_BelowThreshold10, Context);
	float Result273 = dot(DirectionAndLengthSafe_Func_Output_Direction10,Context.MapUpdate.Transient.CollisionNormal);
	float Constant347 = 0;
	bool Result274 = NiagaraAll(Result273 < Constant347);
	bool Result275 = Result274 && Context.MapUpdate.Transient.CollisionValid;
	float3 Constant348 = float3(0,0,0);
	float3 physicsforce_IfResult1;
	float3 Velocity_IfResult1;
	if(Result275)
	{
	physicsforce_IfResult1 = Constant348;
	Velocity_IfResult1 = Context.MapUpdate.Local.Collision.CollisionQueryAndResponse001.ModuleReflectedVelocityWithFrictionApplied;
	}
	else
	{
	physicsforce_IfResult1 = Context.MapUpdate.Transient.PhysicsForce;
	Velocity_IfResult1 = Context.MapUpdate.Particles.Velocity;
	}
	Context.MapUpdate.Transient.PhysicsForce = physicsforce_IfResult1;
	Context.MapUpdate.Particles.Velocity = Velocity_IfResult1;
}

void Collision_TransformPosition001_Emitter_Func_(float3 In_InPosition, int In_SourceSpace, int In_DestinationSpace, bool In_ApplyScale, out float3 Out_OutPosition, inout FSimulationContext Context)
{
	bool Constant368 = true;
	float4x4 Matrix_IfResult7;
	float4x4 Matrix001_IfResult6;
	if(In_ApplyScale)
	{
	Matrix_IfResult7 = Context.MapUpdate.Engine.Owner.SystemLocalToWorld;
	Matrix001_IfResult6 = Context.MapUpdate.Engine.Owner.SystemWorldToLocal;
	}
	else
	{
	Matrix_IfResult7 = Context.MapUpdate.Engine.Owner.SystemLocalToWorldNoScale;
	Matrix001_IfResult6 = Context.MapUpdate.Engine.Owner.SystemWorldToLocalNoScale;
	}
	bool TransformBase_Func_Output_bUseOriginal6;
	float4x4 TransformBase_Func_Output_OutTransform6;
	TransformBase_Func_(In_SourceSpace, In_DestinationSpace, Matrix_IfResult7, Matrix001_IfResult6, Constant368, TransformBase_Func_Output_bUseOriginal6, TransformBase_Func_Output_OutTransform6, Context);
	float3 Result299 = mul(float4(In_InPosition,1.0),TransformBase_Func_Output_OutTransform6).xyz;
	float3 Vector_IfResult17;
	if(TransformBase_Func_Output_bUseOriginal6)
	{
	Vector_IfResult17 = In_InPosition;
	}
	else
	{
	Vector_IfResult17 = Result299;
	}
	Out_OutPosition = Vector_IfResult17;
}

void Collision_TransformVector001_Emitter_Func_(float3 In_InVector, int In_SourceSpace, int In_DestinationSpace, bool In_ApplyScale, out float3 Out_OutVector, inout FSimulationContext Context)
{
	bool Constant372 = true;
	float4x4 Matrix_IfResult8;
	float4x4 Matrix001_IfResult7;
	if(In_ApplyScale)
	{
	Matrix_IfResult8 = Context.MapUpdate.Engine.Owner.SystemLocalToWorld;
	Matrix001_IfResult7 = Context.MapUpdate.Engine.Owner.SystemWorldToLocal;
	}
	else
	{
	Matrix_IfResult8 = Context.MapUpdate.Engine.Owner.SystemLocalToWorldNoScale;
	Matrix001_IfResult7 = Context.MapUpdate.Engine.Owner.SystemWorldToLocalNoScale;
	}
	bool TransformBase_Func_Output_bUseOriginal7;
	float4x4 TransformBase_Func_Output_OutTransform7;
	TransformBase_Func_(In_SourceSpace, In_DestinationSpace, Matrix_IfResult8, Matrix001_IfResult7, Constant372, TransformBase_Func_Output_bUseOriginal7, TransformBase_Func_Output_OutTransform7, Context);
	float3 Result300 = mul(float4(In_InVector,0.0),TransformBase_Func_Output_OutTransform7).xyz;
	float3 Vector_IfResult18;
	if(TransformBase_Func_Output_bUseOriginal7)
	{
	Vector_IfResult18 = In_InVector;
	}
	else
	{
	Vector_IfResult18 = Result300;
	}
	Out_OutVector = Vector_IfResult18;
}

void Collision_TransformVector_Emitter_Func_(float3 In_InVector, int In_SourceSpace, int In_DestinationSpace, bool In_ApplyScale, out float3 Out_OutVector, inout FSimulationContext Context)
{
	bool Constant376 = true;
	float4x4 Matrix_IfResult9;
	float4x4 Matrix001_IfResult8;
	if(In_ApplyScale)
	{
	Matrix_IfResult9 = Context.MapUpdate.Engine.Owner.SystemLocalToWorld;
	Matrix001_IfResult8 = Context.MapUpdate.Engine.Owner.SystemWorldToLocal;
	}
	else
	{
	Matrix_IfResult9 = Context.MapUpdate.Engine.Owner.SystemLocalToWorldNoScale;
	Matrix001_IfResult8 = Context.MapUpdate.Engine.Owner.SystemWorldToLocalNoScale;
	}
	bool TransformBase_Func_Output_bUseOriginal8;
	float4x4 TransformBase_Func_Output_OutTransform8;
	TransformBase_Func_(In_SourceSpace, In_DestinationSpace, Matrix_IfResult9, Matrix001_IfResult8, Constant376, TransformBase_Func_Output_bUseOriginal8, TransformBase_Func_Output_OutTransform8, Context);
	float3 Result301 = mul(float4(In_InVector,0.0),TransformBase_Func_Output_OutTransform8).xyz;
	float3 Vector_IfResult19;
	if(TransformBase_Func_Output_bUseOriginal8)
	{
	Vector_IfResult19 = In_InVector;
	}
	else
	{
	Vector_IfResult19 = Result301;
	}
	Out_OutVector = Vector_IfResult19;
}

void Collision_Emitter_Func_(inout FSimulationContext Context)
{
	float CalculateRadiusFromSpriteSize_Method_NewEnumerator0_Func_Output_Radius;
	CalculateRadiusFromSpriteSize_Method_NewEnumerator0_Func_(Context.MapUpdate.Particles.SpriteSize, CalculateRadiusFromSpriteSize_Method_NewEnumerator0_Func_Output_Radius, Context);
	float Result110 = Context.MapUpdate.Constants.Emitter.Collision.ParticleRadiusScale * CalculateRadiusFromSpriteSize_Method_NewEnumerator0_Func_Output_Radius;
	Context.MapUpdate.Local.Collision.ModuleParticleRadius = Result110;
	int Constant200 = 0;
	int Constant201 = 1;
	bool Constant202 = false;
	float3 Collision_TransformPosition_Emitter_Func_Output_OutPosition;
	Collision_TransformPosition_Emitter_Func_(Context.MapUpdate.Particles.Position, Constant200, Constant201, Constant202, Collision_TransformPosition_Emitter_Func_Output_OutPosition, Context);
	int Constant204 = 0;
	int Constant205 = 1;
	bool Constant206 = false;
	float3 Collision_TransformVector002_Emitter_Func_Output_OutVector;
	Collision_TransformVector002_Emitter_Func_(Context.MapUpdate.Transient.PhysicsForce, Constant204, Constant205, Constant206, Collision_TransformVector002_Emitter_Func_Output_OutVector, Context);
	int Constant208 = 0;
	int Constant209 = 1;
	bool Constant210 = false;
	float3 Collision_TransformVector003_Emitter_Func_Output_OutVector;
	Collision_TransformVector003_Emitter_Func_(Context.MapUpdate.Particles.Velocity, Constant208, Constant209, Constant210, Collision_TransformVector003_Emitter_Func_Output_OutVector, Context);
	Context.MapUpdate.OUTPUT_VAR.Collision.TempPreviousPosition = Collision_TransformPosition_Emitter_Func_Output_OutPosition;
	Context.MapUpdate.OUTPUT_VAR.Collision.TempPreviousForce = Collision_TransformVector002_Emitter_Func_Output_OutVector;
	Context.MapUpdate.OUTPUT_VAR.Collision.TempPreviousVelocity = Collision_TransformVector003_Emitter_Func_Output_OutVector;
	Context.MapUpdate.Particles.Position = Collision_TransformPosition_Emitter_Func_Output_OutPosition;
	Context.MapUpdate.Transient.PhysicsForce = Collision_TransformVector002_Emitter_Func_Output_OutVector;
	Context.MapUpdate.Particles.Velocity = Collision_TransformVector003_Emitter_Func_Output_OutVector;
	float Constant212 = -1e+07;
	float Constant213 = 0;
	float float_IfResult6;
	if(Context.MapUpdate.Collision.CorrectInterpenetration)
	{
	float_IfResult6 = Constant212;
	}
	else
	{
	float_IfResult6 = Constant213;
	}
	Context.MapUpdate.Collision.CollisionQueryAndResponse.DynamicFrictionCoefficient = Context.MapUpdate.Constants.Emitter.Collision.Friction;
	Context.MapUpdate.Collision.CollisionQueryAndResponse001.DynamicFrictionCoefficient = Context.MapUpdate.Constants.Emitter.Collision.Friction;
	Context.MapUpdate.Collision.CollisionQueryAndResponse.StaticFrictionCoefficient = Context.MapUpdate.Constants.Emitter.Collision.StaticFriction;
	Context.MapUpdate.Collision.CollisionQueryAndResponse001.StaticFrictionCoefficient = Context.MapUpdate.Constants.Emitter.Collision.StaticFriction;
	Context.MapUpdate.Collision.CollisionQueryAndResponse.StaticFrictionEngagementSpeed = Context.MapUpdate.Constants.Emitter.Collision.StaticFrictionEngagementSpeed;
	Context.MapUpdate.Collision.CollisionQueryAndResponse001.StaticFrictionEngagementSpeed = Context.MapUpdate.Constants.Emitter.Collision.StaticFrictionEngagementSpeed;
	Context.MapUpdate.Collision.CollisionQueryAndResponse.ParticleRadius = Context.MapUpdate.Local.Collision.ModuleParticleRadius;
	Context.MapUpdate.Collision.CollisionQueryAndResponse001.ParticleRadius = Context.MapUpdate.Local.Collision.ModuleParticleRadius;
	Context.MapUpdate.Collision.CollisionQueryAndResponse.ParticleRestitutionCoeffiecient = Context.MapUpdate.Constants.Emitter.Collision.Restitution;
	Context.MapUpdate.Collision.CollisionQueryAndResponse001.ParticleRestitutionCoeffiecient = Context.MapUpdate.Constants.Emitter.Collision.Restitution;
	Context.MapUpdate.Collision.CollisionQueryAndResponse.CollisionNormalRandomizationPercentage = Context.MapUpdate.Constants.Emitter.Collision.RandomizeCollisionNormal;
	Context.MapUpdate.Collision.CollisionQueryAndResponse001.CollisionNormalRandomizationPercentage = Context.MapUpdate.Constants.Emitter.Collision.RandomizeCollisionNormal;
	Context.MapUpdate.Collision.CollisionQueryAndResponse.CollisionEnabled = Context.MapUpdate.Collision.CollisionEnabled;
	Context.MapUpdate.Collision.CollisionQueryAndResponse001.CollisionEnabled = Context.MapUpdate.Collision.CollisionEnabled;
	Context.MapUpdate.Collision.CollisionQueryAndResponse.RandomizeCollisionNormal = Context.MapUpdate.Collision.RandomizeCollisionNormalVector;
	Context.MapUpdate.Collision.CollisionQueryAndResponse001.RandomizeCollisionNormal = Context.MapUpdate.Collision.RandomizeCollisionNormalVector;
	Context.MapUpdate.Collision.CollisionQueryAndResponse.UpdateRotationalVelocity = Context.MapUpdate.Local.Collision.UpdateMeshRotation;
	Context.MapUpdate.Collision.CollisionQueryAndResponse001.UpdateRotationalVelocity = Context.MapUpdate.Local.Collision.UpdateMeshRotation;
	Context.MapUpdate.Collision.CollisionQueryAndResponse001.BounceCollisionFriction = Context.MapUpdate.Constants.Emitter.Collision.FrictionDuringaBounce;
	Context.MapUpdate.Collision.CollisionQueryAndResponse.BounceCollisionFriction = Context.MapUpdate.Constants.Emitter.Collision.FrictionDuringaBounce;
	Context.MapUpdate.Collision.CollisionQueryAndResponse.MaxIntersectionCorrectionDistance = float_IfResult6;
	Context.MapUpdate.Collision.CollisionQueryAndResponse001.MaxIntersectionCorrectionDistance = float_IfResult6;
	Context.MapUpdate.Collision.CollisionQueryAndResponse.TraceVectorLengthMultiplier = Context.MapUpdate.Constants.Emitter.Collision.CPUTraceVectorLengthMultiplier;
	Context.MapUpdate.Collision.CollisionQueryAndResponse001.TraceVectorLengthMultiplier = Context.MapUpdate.Constants.Emitter.Collision.CPUTraceVectorLengthMultiplier;
	Context.MapUpdate.Collision.CollisionQueryAndResponse.MaxTraceLength = Context.MapUpdate.Constants.Emitter.Collision.MaxCPUTraceLength;
	Context.MapUpdate.Collision.CollisionQueryAndResponse001.MaxTraceLength = Context.MapUpdate.Constants.Emitter.Collision.MaxCPUTraceLength;
	Context.MapUpdate.Collision.CollisionQueryAndResponse.DeltaTime = Context.MapUpdate.Transient.PhysicsDeltaTime;
	float3 Constant214 = float3(0.0, 0.0, 0.0);
	Context.MapUpdate.Local.Collision.CollisionQueryAndResponse.ModuleTraceOrigin = Constant214;
	float3 Constant215 = float3(0.0, 0.0, 0.0);
	Context.MapUpdate.Local.Collision.CollisionQueryAndResponse.ModuleForceContribution = Constant215;
	float3 Constant216 = float3(0.0, 0.0, 0.0);
	Context.MapUpdate.Local.Collision.CollisionQueryAndResponse.ModuleAttemptedMovementThisUpdate = Constant216;
	float3 Constant217 = float3(0.0, 0.0, 0.0);
	Context.MapUpdate.Local.Collision.CollisionQueryAndResponse.ModuleInitialForceDividedByMass = Constant217;
	float3 Constant218 = float3(0.0, 0.0, 0.0);
	Context.MapUpdate.Local.Collision.CollisionQueryAndResponse.ModuleTraceWorldStart = Constant218;
	float3 Constant219 = float3(0.0, 0.0, 0.0);
	Context.MapUpdate.Local.Collision.CollisionQueryAndResponse.ModuleTraceWorldEnd = Constant219;
	bool Constant220 = (false);
	Context.MapUpdate.Local.Collision.CollisionQueryAndResponse.ModuleReturnedCollisionValidBool = Constant220;
	float3 Constant221 = float3(0.0, 0.0, 0.0);
	Context.MapUpdate.Local.Collision.CollisionQueryAndResponse.ModuleReturnedCollisionWorldPosition = Constant221;
	float3 Constant222 = float3(0.0, 0.0, 0.0);
	Context.MapUpdate.Local.Collision.CollisionQueryAndResponse.ModuleReturnedCollisionNormal = Constant222;
	float Constant223 = (0.0);
	Context.MapUpdate.Local.Collision.CollisionQueryAndResponse.ModuleReturnedFriction = Constant223;
	float Constant224 = (0.0);
	Context.MapUpdate.Local.Collision.CollisionQueryAndResponse.ModuleReturnedRestitution = Constant224;
	float3 Constant225 = float3(0.0, 0.0, 0.0);
	Context.MapUpdate.Local.Collision.CollisionQueryAndResponse.ModulePlaneNormal = Constant225;
	float3 Constant226 = float3(0.0, 0.0, 0.0);
	Context.MapUpdate.Local.Collision.CollisionQueryAndResponse.ModulePlanePivotPoint = Constant226;
	float Constant227 = (0.0);
	Context.MapUpdate.Local.Collision.CollisionQueryAndResponse.ModulePhysicsDeltaTime = Constant227;
	float Constant228 = (0.0);
	Context.MapUpdate.OUTPUT_VAR.Collision.CollisionQueryAndResponse.CollisionPenetrationDistance = Constant228;
	bool Constant229 = (false);
	Context.MapUpdate.OUTPUT_VAR.Collision.CollisionQueryAndResponse.PhysicsCollidesThisFrame = Constant229;
	bool Constant230 = false;
	Context.MapUpdate.Local.Collision.CollisionQueryAndResponse.ModuleRemoveRestitution = Constant230;
	float3 Constant231 = float3(0.0, 0.0, 0.0);
	Context.MapUpdate.Local.Collision.CollisionQueryAndResponse.ModuleReflectedVelocity = Constant231;
	float Constant232 = (0.0);
	Context.MapUpdate.Local.Collision.CollisionQueryAndResponse.ModuleNormalForceInNewtons = Constant232;
	int Constant233 = 0;
	Context.MapUpdate.Collision.CollisionQueryAndResponse.CPUFrictionMergeType = Constant233;
	float3 Constant234 = float3(0.0, 0.0, 0.0);
	Context.MapUpdate.Local.Collision.CollisionQueryAndResponse.ModuleFrictionForceVectorInNewtons = Constant234;
	float3 Constant235 = float3(0.0, 0.0, 0.0);
	Context.MapUpdate.Local.Collision.CollisionQueryAndResponse.ModuleFrictionForceVelocityVector = Constant235;
	float3 Constant236 = float3(0.0, 0.0, 0.0);
	Context.MapUpdate.Local.Collision.CollisionQueryAndResponse.ModuleReflectedVelocityWithFrictionApplied = Constant236;
	Collision_CollisionQueryAndResponse_Emitter_Func_(Context);
	Context.MapUpdate.OUTPUT_VAR.Collision.ModuleCollision1Valid = Context.MapUpdate.Transient.CollisionValid;
	Context.MapUpdate.OUTPUT_VAR.Collision.ModuleCollision1Normal = Context.MapUpdate.Transient.CollisionNormal;
	Context.MapUpdate.Collision.CollisionQueryAndResponse001.DeltaTime = Context.MapUpdate.Transient.PhysicsDeltaTime;
	float3 Constant297 = float3(0.0, 0.0, 0.0);
	Context.MapUpdate.Local.Collision.CollisionQueryAndResponse001.ModuleTraceOrigin = Constant297;
	float3 Constant298 = float3(0.0, 0.0, 0.0);
	Context.MapUpdate.Local.Collision.CollisionQueryAndResponse001.ModuleForceContribution = Constant298;
	float3 Constant299 = float3(0.0, 0.0, 0.0);
	Context.MapUpdate.Local.Collision.CollisionQueryAndResponse001.ModuleAttemptedMovementThisUpdate = Constant299;
	float3 Constant300 = float3(0.0, 0.0, 0.0);
	Context.MapUpdate.Local.Collision.CollisionQueryAndResponse001.ModuleInitialForceDividedByMass = Constant300;
	float3 Constant301 = float3(0.0, 0.0, 0.0);
	Context.MapUpdate.Local.Collision.CollisionQueryAndResponse001.ModuleTraceWorldStart = Constant301;
	float3 Constant302 = float3(0.0, 0.0, 0.0);
	Context.MapUpdate.Local.Collision.CollisionQueryAndResponse001.ModuleTraceWorldEnd = Constant302;
	bool Constant303 = (false);
	Context.MapUpdate.Local.Collision.CollisionQueryAndResponse001.ModuleReturnedCollisionValidBool = Constant303;
	float3 Constant304 = float3(0.0, 0.0, 0.0);
	Context.MapUpdate.Local.Collision.CollisionQueryAndResponse001.ModuleReturnedCollisionWorldPosition = Constant304;
	float3 Constant305 = float3(0.0, 0.0, 0.0);
	Context.MapUpdate.Local.Collision.CollisionQueryAndResponse001.ModuleReturnedCollisionNormal = Constant305;
	float Constant306 = (0.0);
	Context.MapUpdate.Local.Collision.CollisionQueryAndResponse001.ModuleReturnedFriction = Constant306;
	float Constant307 = (0.0);
	Context.MapUpdate.Local.Collision.CollisionQueryAndResponse001.ModuleReturnedRestitution = Constant307;
	float3 Constant308 = float3(0.0, 0.0, 0.0);
	Context.MapUpdate.Local.Collision.CollisionQueryAndResponse001.ModulePlaneNormal = Constant308;
	float3 Constant309 = float3(0.0, 0.0, 0.0);
	Context.MapUpdate.Local.Collision.CollisionQueryAndResponse001.ModulePlanePivotPoint = Constant309;
	float Constant310 = (0.0);
	Context.MapUpdate.Local.Collision.CollisionQueryAndResponse001.ModulePhysicsDeltaTime = Constant310;
	float Constant311 = (0.0);
	Context.MapUpdate.OUTPUT_VAR.Collision.CollisionQueryAndResponse001.CollisionPenetrationDistance = Constant311;
	bool Constant312 = (false);
	Context.MapUpdate.OUTPUT_VAR.Collision.CollisionQueryAndResponse001.PhysicsCollidesThisFrame = Constant312;
	bool Constant313 = false;
	Context.MapUpdate.Local.Collision.CollisionQueryAndResponse001.ModuleRemoveRestitution = Constant313;
	float3 Constant314 = float3(0.0, 0.0, 0.0);
	Context.MapUpdate.Local.Collision.CollisionQueryAndResponse001.ModuleReflectedVelocity = Constant314;
	float Constant315 = (0.0);
	Context.MapUpdate.Local.Collision.CollisionQueryAndResponse001.ModuleNormalForceInNewtons = Constant315;
	int Constant316 = 0;
	Context.MapUpdate.Collision.CollisionQueryAndResponse001.CPUFrictionMergeType = Constant316;
	float3 Constant317 = float3(0.0, 0.0, 0.0);
	Context.MapUpdate.Local.Collision.CollisionQueryAndResponse001.ModuleFrictionForceVectorInNewtons = Constant317;
	float3 Constant318 = float3(0.0, 0.0, 0.0);
	Context.MapUpdate.Local.Collision.CollisionQueryAndResponse001.ModuleFrictionForceVelocityVector = Constant318;
	float3 Constant319 = float3(0.0, 0.0, 0.0);
	Context.MapUpdate.Local.Collision.CollisionQueryAndResponse001.ModuleReflectedVelocityWithFrictionApplied = Constant319;
	Collision_CollisionQueryAndResponse001_Emitter_Func_(Context);
	Context.MapUpdate.OUTPUT_VAR.Collision.ModuleCollision2Valid = Context.MapUpdate.Transient.CollisionValid;
	Context.MapUpdate.OUTPUT_VAR.Collision.ModuleCollision2Normal = Context.MapUpdate.Transient.CollisionNormal;
	bool Result276 = Context.MapUpdate.Transient.CollisionValid || Context.MapUpdate.OUTPUT_VAR.Collision.ModuleCollision1Valid;
	int Constant349 = 1;
	int Result277 = Context.MapUpdate.Particles.NumberOfCollisions + Constant349;
	int int32_IfResult;
	if(Result276)
	{
	int32_IfResult = Result277;
	}
	else
	{
	int32_IfResult = Context.MapUpdate.Particles.NumberOfCollisions;
	}
	Context.MapUpdate.Transient.CollisionValid = Result276;
	Context.MapUpdate.OUTPUT_VAR.Collision.CollisionValid = Result276;
	Context.MapUpdate.Particles.NumberOfCollisions = int32_IfResult;
	float Constant350 = 0;
	bool Result278 = NiagaraAll(Context.MapUpdate.OUTPUT_VAR.Collision.CollisionQueryAndResponse.CollisionPenetrationDistance < Constant350);
	float Constant351 = 0;
	bool Result279 = NiagaraAll(Context.MapUpdate.OUTPUT_VAR.Collision.CollisionQueryAndResponse001.CollisionPenetrationDistance < Constant351);
	bool Result280 = Result278 && Result279;
	float PenetrationFixed1;
	float PenetrationFixed2;
	PenetrationFixed1 = Result278;
	PenetrationFixed2 = Result279;
	float Result281 = PenetrationFixed1 + PenetrationFixed2;
	float Constant352 = 0.5;
	float Result282 = Result281 * Constant352;
	float Result283 = Context.MapUpdate.Engine.DeltaTime * Context.MapUpdate.Constants.Emitter.Collision.RestStateTimeRange;
	float Result284 = lerp(Context.MapUpdate.Particles.RestCounter,Result282,Result283);
	bool Result285 = NiagaraAll(Result284 > Context.MapUpdate.Constants.Emitter.Collision.PercentageofPenetrationBeforeRest);
	float Constant353 = -1;
	float Result286 = Context.MapUpdate.OUTPUT_VAR.Collision.CollisionQueryAndResponse.CollisionPenetrationDistance * Constant353;
	bool Result287 = NiagaraAll(Result286 > Context.MapUpdate.OUTPUT_VAR.Collision.CollisionQueryAndResponse001.CollisionPenetrationDistance);
	float Constant354 = -1;
	float Result288 = Context.MapUpdate.Constants.Emitter.Collision.MaximumPenetrationCorrectionDistance * Constant354;
	bool Result289 = NiagaraAll(Result288 > Context.MapUpdate.OUTPUT_VAR.Collision.CollisionQueryAndResponse001.CollisionPenetrationDistance);
	bool Result290 = Result287 || Result289;
	bool Result291 = Result280 || Result285 || Result290;
	float3 Constant355 = float3(0,0,0);
	float3 Vector_IfResult15;
	if(Context.MapUpdate.OUTPUT_VAR.Collision.ModuleCollision1Valid)
	{
	Vector_IfResult15 = Context.MapUpdate.OUTPUT_VAR.Collision.ModuleCollision1Normal;
	}
	else
	{
	Vector_IfResult15 = Constant355;
	}
	float3 Constant356 = float3(0,0,0);
	float3 Vector_IfResult16;
	if(Context.MapUpdate.OUTPUT_VAR.Collision.ModuleCollision2Valid)
	{
	Vector_IfResult16 = Context.MapUpdate.OUTPUT_VAR.Collision.ModuleCollision2Normal;
	}
	else
	{
	Vector_IfResult16 = Constant356;
	}
	float3 Result292 = Vector_IfResult15 + Vector_IfResult16;
	float3 Constant357 = float3(0,0,1);
	float Constant358 = 1e-05;
	float Constant359 = 1;
	float3 DirectionAndLengthSafe_Func_Output_Direction11;
	float DirectionAndLengthSafe_Func_Output_Length11;
	bool DirectionAndLengthSafe_Func_Output_BelowThreshold11;
	DirectionAndLengthSafe_Func_(Result292, Constant357, Constant358, Constant359, DirectionAndLengthSafe_Func_Output_Direction11, DirectionAndLengthSafe_Func_Output_Length11, DirectionAndLengthSafe_Func_Output_BelowThreshold11, Context);
	float Result293 = dot(DirectionAndLengthSafe_Func_Output_Direction11,Context.MapUpdate.Constants.Emitter.Collision.ValidCollisionPlaneNormalForRest);
	float Constant360 = 0.5;
	float Result294 = Context.MapUpdate.Constants.Emitter.Collision.MinimumCollisionNormalASC47RestNormalAlignmentPercentage - Constant360;
	float Constant361 = 2;
	float Result295 = Result294 * Constant361;
	bool Result296 = NiagaraAll(Result293 > Result295);
	bool Result297 = Result291 && Result296;
	bool bool_IfResult1;
	if(Context.MapUpdate.Collision.ControlRestStateViaSurfaceNormal)
	{
	bool_IfResult1 = Result297;
	}
	else
	{
	bool_IfResult1 = Result291;
	}
	bool Result298 = Context.MapUpdate.Collision.EnableRestState && bool_IfResult1 && Context.MapUpdate.Collision.CollisionEnabled;
	float3 Constant362 = float3(0,0,0);
	float3 Constant363 = float3(0,0,0);
	float3 Constant364 = float3(0,0,0);
	float3 Position_IfResult;
	float3 Velocity_IfResult2;
	float3 Force_IfResult;
	float deltatime_IfResult;
	if(Context.MapUpdate.Transient.CollisionValid)
	{
	Position_IfResult = Context.MapUpdate.Particles.Position;
	Velocity_IfResult2 = Context.MapUpdate.Particles.Velocity;
	Force_IfResult = Constant364;
	deltatime_IfResult = Context.MapUpdate.Transient.PhysicsDeltaTime;
	}
	else
	{
	Position_IfResult = Context.MapUpdate.OUTPUT_VAR.Collision.TempPreviousPosition;
	Velocity_IfResult2 = Context.MapUpdate.OUTPUT_VAR.Collision.TempPreviousVelocity;
	Force_IfResult = Context.MapUpdate.OUTPUT_VAR.Collision.TempPreviousForce;
	deltatime_IfResult = Context.MapUpdate.Engine.DeltaTime;
	}
	float3 Position_IfResult1;
	float3 Velocity_IfResult3;
	float3 Force_IfResult1;
	float deltatime_IfResult1;
	if(Result298)
	{
	Position_IfResult1 = Context.MapUpdate.OUTPUT_VAR.Collision.TempPreviousPosition;
	Velocity_IfResult3 = Constant362;
	Force_IfResult1 = Constant363;
	deltatime_IfResult1 = deltatime_IfResult;
	}
	else
	{
	Position_IfResult1 = Position_IfResult;
	Velocity_IfResult3 = Velocity_IfResult2;
	Force_IfResult1 = Force_IfResult;
	deltatime_IfResult1 = deltatime_IfResult;
	}
	int Constant365 = 1;
	int Constant366 = 0;
	bool Constant367 = false;
	float3 Collision_TransformPosition001_Emitter_Func_Output_OutPosition;
	Collision_TransformPosition001_Emitter_Func_(Position_IfResult1, Constant365, Constant366, Constant367, Collision_TransformPosition001_Emitter_Func_Output_OutPosition, Context);
	int Constant369 = 1;
	int Constant370 = 0;
	bool Constant371 = false;
	float3 Collision_TransformVector001_Emitter_Func_Output_OutVector;
	Collision_TransformVector001_Emitter_Func_(Velocity_IfResult3, Constant369, Constant370, Constant371, Collision_TransformVector001_Emitter_Func_Output_OutVector, Context);
	int Constant373 = 1;
	int Constant374 = 0;
	bool Constant375 = false;
	float3 Collision_TransformVector_Emitter_Func_Output_OutVector;
	Collision_TransformVector_Emitter_Func_(Force_IfResult1, Constant373, Constant374, Constant375, Collision_TransformVector_Emitter_Func_Output_OutVector, Context);
	bool Result302 = Result285 && Context.MapUpdate.Collision.CollisionEnabled;
	Context.MapUpdate.Particles.Position = Collision_TransformPosition001_Emitter_Func_Output_OutPosition;
	Context.MapUpdate.Particles.Velocity = Collision_TransformVector001_Emitter_Func_Output_OutVector;
	Context.MapUpdate.Transient.PhysicsForce = Collision_TransformVector_Emitter_Func_Output_OutVector;
	Context.MapUpdate.Transient.PhysicsDeltaTime = deltatime_IfResult1;
	Context.MapUpdate.Transient.CollisionIsResting = Result302;
	Context.MapUpdate.Particles.RestCounter = Result284;
	Context.MapUpdate.OUTPUT_VAR.Collision.ModuleCombinedCollisionNormal = DirectionAndLengthSafe_Func_Output_Direction11;
	Context.MapUpdate.Collision.AdvancedAgingRate = Context.MapUpdate.Constants.Emitter.Collision.AdvancedAgingRate;
}

void SolveForcesAndVelocity_Emitter_Func_(inout FSimulationContext Context)
{
	Context.MapUpdate.Local.SolveForcesAndVelocity.DeltaTime = Context.MapUpdate.SolveForcesAndVelocity.DeltaTime;
	Context.MapUpdate.Local.SolveForcesAndVelocity.PhysicsForce = Context.MapUpdate.SolveForcesAndVelocity.Force;
	Context.MapUpdate.OUTPUT_VAR.SolveForcesAndVelocity.IncomingPhysicsForce = Context.MapUpdate.SolveForcesAndVelocity.Force;
	Context.MapUpdate.OUTPUT_VAR.SolveForcesAndVelocity.Velocity = Context.MapUpdate.SolveForcesAndVelocity.Velocity;
	Context.MapUpdate.Local.SolveForcesAndVelocity.Mass = Context.MapUpdate.SolveForcesAndVelocity.Mass;
	float Constant383 = 0.0001;
	float Result303 = max(Context.MapUpdate.Local.SolveForcesAndVelocity.Mass, Constant383);
	float Result304 = Reciprocal(Result303);
	float3 Result305 = Result304 * Context.MapUpdate.Local.SolveForcesAndVelocity.PhysicsForce;
	Context.MapUpdate.Local.SolveForcesAndVelocity.PhysicsForce = Result305;
	float3 Result306 = Context.MapUpdate.Local.SolveForcesAndVelocity.PhysicsForce * Context.MapUpdate.Local.SolveForcesAndVelocity.DeltaTime + Context.MapUpdate.OUTPUT_VAR.SolveForcesAndVelocity.Velocity;
	float Constant384 = 0;
	float Result307 = max(Context.MapUpdate.Transient.PhysicsDrag, Constant384);
	float Result308 = Context.MapUpdate.Local.SolveForcesAndVelocity.DeltaTime * Result307;
	float Constant385 = 1;
	float Result309 = Result308 + Constant385;
	float3 Result310 = Result306 / Result309;
	Context.MapUpdate.OUTPUT_VAR.SolveForcesAndVelocity.Velocity = Result310;
	Context.MapUpdate.OUTPUT_VAR.SolveForcesAndVelocity.IncomingPhysicsDrag = Context.MapUpdate.Transient.PhysicsDrag;
	Context.MapUpdate.OUTPUT_VAR.SolveForcesAndVelocity.Velocity = Context.MapUpdate.OUTPUT_VAR.SolveForcesAndVelocity.Velocity;
	Context.MapUpdate.OUTPUT_VAR.SolveForcesAndVelocity.Velocity = Context.MapUpdate.OUTPUT_VAR.SolveForcesAndVelocity.Velocity;
	float3 Result311 = Context.MapUpdate.OUTPUT_VAR.SolveForcesAndVelocity.Velocity * Context.MapUpdate.Local.SolveForcesAndVelocity.DeltaTime + Context.MapUpdate.SolveForcesAndVelocity.Position;
	Context.MapUpdate.OUTPUT_VAR.SolveForcesAndVelocity.Position = Result311;
	float3 Position_IfResult2;
	float3 Velocity_IfResult4;
	float3 PreviousVelocity_IfResult;
	if(Context.MapUpdate.SolveForcesAndVelocity.WritetoIntrinsicProperties)
	{
	Position_IfResult2 = Context.MapUpdate.OUTPUT_VAR.SolveForcesAndVelocity.Position;
	Velocity_IfResult4 = Context.MapUpdate.OUTPUT_VAR.SolveForcesAndVelocity.Velocity;
	PreviousVelocity_IfResult = Context.MapUpdate.OUTPUT_VAR.SolveForcesAndVelocity.Velocity;
	}
	else
	{
	Position_IfResult2 = Context.MapUpdate.SolveForcesAndVelocity.Position;
	Velocity_IfResult4 = Context.MapUpdate.SolveForcesAndVelocity.Velocity;
	PreviousVelocity_IfResult = Context.MapUpdate.SolveForcesAndVelocity.PreviousVelocity;
	}
	Context.MapUpdate.Particles.Position = Position_IfResult2;
	Context.MapUpdate.Particles.Velocity = Velocity_IfResult4;
	Context.MapUpdate.Particles.PreviousVelocity = PreviousVelocity_IfResult;
	float3 Constant386 = float3(0,0,0);
	float Constant387 = 0;
	float3 ForceVector_IfResult;
	float Drag_IfResult;
	if(Context.MapUpdate.SolveForcesAndVelocity.WritetoIntrinsicProperties)
	{
	ForceVector_IfResult = Constant386;
	Drag_IfResult = Constant387;
	}
	else
	{
	ForceVector_IfResult = Context.MapUpdate.Transient.PhysicsForce;
	Drag_IfResult = Context.MapUpdate.Transient.PhysicsDrag;
	}
	Context.MapUpdate.Transient.PhysicsForce = ForceVector_IfResult;
	Context.MapUpdate.Transient.PhysicsDrag = Drag_IfResult;
}

void SpriteSizeScaleByVelocity_Emitter_Func_(inout FSimulationContext Context)
{
	float3 Constant391 = float3(0,0,1);
	float Constant392 = 1e-05;
	float Constant393 = 1;
	float3 DirectionAndLengthSafe_Func_Output_Direction12;
	float DirectionAndLengthSafe_Func_Output_Length12;
	bool DirectionAndLengthSafe_Func_Output_BelowThreshold12;
	DirectionAndLengthSafe_Func_(Context.MapUpdate.SpriteSizeScaleByVelocity.SourceVelocity, Constant391, Constant392, Constant393, DirectionAndLengthSafe_Func_Output_Direction12, DirectionAndLengthSafe_Func_Output_Length12, DirectionAndLengthSafe_Func_Output_BelowThreshold12, Context);
	float Constant394 = 0;
	float float_IfResult16;
	if(DirectionAndLengthSafe_Func_Output_BelowThreshold12)
	{
	float_IfResult16 = Constant394;
	}
	else
	{
	float_IfResult16 = DirectionAndLengthSafe_Func_Output_Length12;
	}
	float Constant395 = 0.0001;
	float Constant396 = 0.0001;
	float Result312 = max(Context.MapUpdate.Constants.Emitter.SpriteSizeScaleByVelocity.VelocityThreshold, Constant396);
	float Result313 = clamp(float_IfResult16,Constant395,Result312);
	float Result314 = Result313 / Result312;
	Context.MapUpdate.Local.SpriteSizeScaleByVelocity.NormalizedVelocityRange = Result314;
	float SampleCurve_EmitterScaleFactorCurveOutput_Value;
	SampleCurve_EmitterScaleFactorCurve(Context.MapUpdate.Local.SpriteSizeScaleByVelocity.NormalizedVelocityRange, SampleCurve_EmitterScaleFactorCurveOutput_Value);
	float float_IfResult17;
	if(Context.MapUpdate.SpriteSizeScaleByVelocity.SampleScaleFactorByCurve)
	{
	float_IfResult17 = SampleCurve_EmitterScaleFactorCurveOutput_Value;
	}
	else
	{
	float_IfResult17 = Context.MapUpdate.Local.SpriteSizeScaleByVelocity.NormalizedVelocityRange;
	}
	float Constant397 = 0;
	float Constant398 = 1;
	float Result315 = clamp(float_IfResult17,Constant397,Constant398);
	float2 Result316 = lerp(Context.MapUpdate.Constants.Emitter.SpriteSizeScaleByVelocity.MinScaleFactor,Context.MapUpdate.Constants.Emitter.SpriteSizeScaleByVelocity.MaxScaleFactor,Result315);
	float2 Result317 = Result316 * Context.MapUpdate.Transient.SpriteSizeScaleFactor;
	float2 Result318 = Result317 * Context.MapUpdate.SpriteSizeScaleByVelocity.InitialSpriteSize;
	Context.MapUpdate.Transient.SpriteSizeScaleFactor = Result317;
	Context.MapUpdate.Particles.SpriteSize = Result318;
}

void FloatFromCurve_Emitter_Func_(out float Out_Value, inout FSimulationContext Context)
{
	float SampleCurve_EmitterValueScaleFactorFloatCurveOutput_Value;
	SampleCurve_EmitterValueScaleFactorFloatCurve(Context.MapUpdate.FloatFromCurve.CurveIndex, SampleCurve_EmitterValueScaleFactorFloatCurveOutput_Value);
	float Result319 = SampleCurve_EmitterValueScaleFactorFloatCurveOutput_Value * Context.MapUpdate.Constants.Emitter.FloatFromCurve.ScaleCurve;
	Out_Value = Result319;
}

void Vector2DFromFloat_Emitter_Func_(out float2 Out_Vec2, inout FSimulationContext Context)
{
	float2 Output19;
	Output19.x = Context.MapUpdate.Vector2DFromFloat.Value;
	Output19.y = Context.MapUpdate.Vector2DFromFloat.Value;
	Out_Vec2 = Output19;
}

void ScaleSpriteSize_Emitter_Func_(inout FSimulationContext Context)
{
	float2 Result320 = Context.MapUpdate.ScaleSpriteSize.ScaleFactor * Context.MapUpdate.Transient.SpriteSizeScaleFactor;
	float2 Result321 = Context.MapUpdate.ScaleSpriteSize.InitialSpriteSize * Result320;
	Context.MapUpdate.Particles.SpriteSize = Result321;
	Context.MapUpdate.Transient.SpriteSizeScaleFactor = Result320;
}

float GetSpawnInterpolation()
{
	return HackSpawnInterp;
}


void InterpolateParameters(inout FSimulationContext Context)
{
	int InterpSpawn_Index = ExecIndex();
	float InterpSpawn_SpawnTime = Emitter_InterpSpawnStartDt + (Emitter_SpawnInterval * InterpSpawn_Index);
	float InterpSpawn_UpdateTime = Engine_DeltaTime - InterpSpawn_SpawnTime;
	float InterpSpawn_InvSpawnTime = 1.0 / InterpSpawn_SpawnTime;
	float InterpSpawn_InvUpdateTime = 1.0 / InterpSpawn_UpdateTime;
	float SpawnInterp = InterpSpawn_SpawnTime * Engine_InverseDeltaTime ;
	HackSpawnInterp = SpawnInterp;
	Context.MapSpawn.Interpolation.InterpSpawn_Index = InterpSpawn_Index;
	Context.MapSpawn.Interpolation.InterpSpawn_SpawnTime = InterpSpawn_SpawnTime;
	Context.MapSpawn.Interpolation.InterpSpawn_UpdateTime = InterpSpawn_UpdateTime;
	Context.MapSpawn.Interpolation.InterpSpawn_InvSpawnTime = InterpSpawn_InvSpawnTime;
	Context.MapSpawn.Interpolation.InterpSpawn_InvUpdateTime = InterpSpawn_InvUpdateTime;
	Context.MapSpawn.Interpolation.SpawnInterp = SpawnInterp;
	Context.MapSpawn.Interpolation.Emitter_SpawnInterval = Emitter_SpawnInterval;
	Context.MapSpawn.Interpolation.Emitter_InterpSpawnStartDt = Emitter_InterpSpawnStartDt;
	Context.MapSpawn.Interpolation.Emitter_SpawnGroup = Emitter_SpawnGroup;
	Context.MapSpawn.Engine.Time = lerp(PREV_Engine_Time, Engine_Time, SpawnInterp);
	Context.MapSpawn.Engine.RealTime = lerp(PREV_Engine_RealTime, Engine_RealTime, SpawnInterp);
	Context.MapSpawn.Engine.Owner.TimeSinceRendered = lerp(PREV_Engine_Owner_TimeSinceRendered, Engine_Owner_TimeSinceRendered, SpawnInterp);
	Context.MapSpawn.Engine.Owner.LODDistance = lerp(PREV_Engine_Owner_LODDistance, Engine_Owner_LODDistance, SpawnInterp);
	Context.MapSpawn.Engine.Owner.LODDistanceFraction = lerp(PREV_Engine_Owner_LODDistanceFraction, Engine_Owner_LODDistanceFraction, SpawnInterp);
	Context.MapSpawn.Engine.System.Age = lerp(PREV_Engine_System_Age, Engine_System_Age, SpawnInterp);
	Context.MapSpawn.Engine.Owner.Rotation = lerp(PREV_Engine_Owner_Rotation, Engine_Owner_Rotation, SpawnInterp);
	Context.MapSpawn.Engine.Owner.Position = lerp(PREV_Engine_Owner_Position.xyz, Engine_Owner_Position.xyz, SpawnInterp);
	Context.MapSpawn.Engine.Owner.Velocity = lerp(PREV_Engine_Owner_Velocity.xyz, Engine_Owner_Velocity.xyz, SpawnInterp);
	Context.MapSpawn.Engine.Owner.SystemXAxis = lerp(PREV_Engine_Owner_SystemXAxis.xyz, Engine_Owner_SystemXAxis.xyz, SpawnInterp);
	Context.MapSpawn.Engine.Owner.SystemYAxis = lerp(PREV_Engine_Owner_SystemYAxis.xyz, Engine_Owner_SystemYAxis.xyz, SpawnInterp);
	Context.MapSpawn.Engine.Owner.SystemZAxis = lerp(PREV_Engine_Owner_SystemZAxis.xyz, Engine_Owner_SystemZAxis.xyz, SpawnInterp);
	Context.MapSpawn.Engine.Owner.Scale = lerp(PREV_Engine_Owner_Scale.xyz, Engine_Owner_Scale.xyz, SpawnInterp);
	Context.MapSpawn.Emitter.Age = lerp(PREV_Emitter_Age, Emitter_Age, SpawnInterp);
	Context.MapSpawn.User.Color = lerp(PREV_User_Color, User_Color, SpawnInterp);
	Context.MapSpawn.User.SecondaryColor = lerp(PREV_User_SecondaryColor, User_SecondaryColor, SpawnInterp);
	Context.MapSpawn.User.ColorBoost = lerp(PREV_User_ColorBoost, User_ColorBoost, SpawnInterp);
	Context.MapSpawn.User.Size = lerp(PREV_User_Size, User_Size, SpawnInterp);
	Context.MapSpawn.Engine.DeltaTime = 0.0f;
	Context.MapSpawn.Engine.InverseDeltaTime = 0.0f;
	Context.MapUpdate.Engine.DeltaTime = InterpSpawn_UpdateTime;
	Context.MapUpdate.Engine.InverseDeltaTime = InterpSpawn_InvUpdateTime;
}

void ReadDataSets(inout FSimulationContext Context)
{
}

void WriteDataSets(inout FSimulationContext Context)
{
}

void SimulateMapSpawn(inout FSimulationContext Context)
{


	float Constant = 1;
	Context.MapSpawn.Particles.Lifetime = Constant;
	float4 Constant1 = float4(1,1,1,1);
	Context.MapSpawn.Particles.Color = Constant1;
	float Constant2 = 1;
	Context.MapSpawn.Particles.Mass = Constant2;
	float2 Constant3 = float2(10,10);
	Context.MapSpawn.Particles.SpriteSize = Constant3;
	float Constant4 = 0;
	Context.MapSpawn.Particles.SpriteRotation = Constant4;
	float3 Constant5 = float3(1,1,1);
	Context.MapSpawn.Particles.Scale = Constant5;
	float Constant6 = 0;
	Context.MapSpawn.Particles.MaterialRandom = Constant6;
	float Constant7 = (0.0);
	Context.MapSpawn.Particles.RotationalInertia = Constant7;
	float3 Constant8 = float3(0,0,0);
	Context.MapSpawn.Particles.Velocity = Constant8;
	float Constant9 = 0;
	Context.MapSpawn.Particles.Age = Constant9;
	float Constant10 = (0.0);
	Context.MapSpawn.Particles.NormalizedAge = Constant10;
	int Constant11 = 0;
	Context.MapSpawn.Particles.Collision.CollisionQueryAndResponse.CollisionID = Constant11;
	bool Constant12 = false;
	Context.MapSpawn.Particles.HasCollided = Constant12;
	int Constant13 = 0;
	Context.MapSpawn.Particles.Collision.CollisionQueryAndResponse001.CollisionID = Constant13;
	int Constant14 = 0;
	Context.MapSpawn.Particles.NumberOfCollisions = Constant14;
	float Constant15 = 0;
	Context.MapSpawn.Particles.RestCounter = Constant15;

	Context.MapSpawn.UniformRangedLinearColor.Minimum = Context.MapSpawn.User.Color;
	Context.MapSpawn.UniformRangedLinearColor.Maximum = Context.MapSpawn.User.SecondaryColor;
	Context.MapSpawn.MakeVector4_FromFloat.FLOAT_VAR = Context.MapSpawn.User.ColorBoost;
	bool Constant16 = false;
	Context.MapSpawn.UniformRangedLinearColor.OverrideRandomness = Constant16;
	int Constant17 = 0;
	Context.MapSpawn.UniformRangedLinearColor.RandomnessMode = Constant17;
	bool Constant18 = false;
	Context.MapSpawn.UniformRangedLinearColor.OverrideSeed = Constant18;
	bool Constant19 = false;
	Context.MapSpawn.UniformRangedLinearColor.FixedRandomSeed = Constant19;
	float4 UniformRangedLinearColor_Emitter_Func_Output_UniformRangedLinearColor;
	UniformRangedLinearColor_Emitter_Func_(UniformRangedLinearColor_Emitter_Func_Output_UniformRangedLinearColor, Context);
	float4 MakeVector4_FromFloat_Emitter_Func_Output_Vector4;
	MakeVector4_FromFloat_Emitter_Func_(MakeVector4_FromFloat_Emitter_Func_Output_Vector4, Context);
	Context.MapSpawn.MultiplyLinearColor.LinearColor = UniformRangedLinearColor_Emitter_Func_Output_UniformRangedLinearColor;
	Context.MapSpawn.MultiplyLinearColor.ScaleFactor = MakeVector4_FromFloat_Emitter_Func_Output_Vector4;
	bool Constant36 = false;
	Context.MapSpawn.UniformRangedFloat004.OverrideRandomness = Constant36;
	int Constant37 = 0;
	Context.MapSpawn.UniformRangedFloat004.RandomnessMode = Constant37;
	bool Constant38 = false;
	Context.MapSpawn.UniformRangedFloat004.OverrideSeed = Constant38;
	bool Constant39 = false;
	Context.MapSpawn.UniformRangedFloat004.FixedRandomSeed = Constant39;
	float UniformRangedFloat004_Emitter_Func_Output_UniformRangedFloat;
	UniformRangedFloat004_Emitter_Func_(UniformRangedFloat004_Emitter_Func_Output_UniformRangedFloat, Context);
	bool Constant42 = false;
	Context.MapSpawn.UniformRangedFloat005.OverrideRandomness = Constant42;
	int Constant43 = 0;
	Context.MapSpawn.UniformRangedFloat005.RandomnessMode = Constant43;
	bool Constant44 = false;
	Context.MapSpawn.UniformRangedFloat005.OverrideSeed = Constant44;
	bool Constant45 = false;
	Context.MapSpawn.UniformRangedFloat005.FixedRandomSeed = Constant45;
	float UniformRangedFloat005_Emitter_Func_Output_UniformRangedFloat;
	UniformRangedFloat005_Emitter_Func_(UniformRangedFloat005_Emitter_Func_Output_UniformRangedFloat, Context);
	bool Constant48 = true;
	bool Constant49 = false;
	bool Constant50 = true;
	float3 ParticleOwnerPosition_Emitter_Func_Output_OutPosition;
	ParticleOwnerPosition_Emitter_Func_(ParticleOwnerPosition_Emitter_Func_Output_OutPosition, Context);
	float4 MultiplyLinearColor_Emitter_Func_Output_LinearColor;
	MultiplyLinearColor_Emitter_Func_(MultiplyLinearColor_Emitter_Func_Output_LinearColor, Context);
	Context.MapSpawn.InitializeParticle.Lifetime = UniformRangedFloat004_Emitter_Func_Output_UniformRangedFloat;
	Context.MapSpawn.InitializeParticle.Mass = UniformRangedFloat005_Emitter_Func_Output_UniformRangedFloat;
	Context.MapSpawn.InitializeParticle.WriteColor = Constant48;
	Context.MapSpawn.InitializeParticle.WritePosition = Constant49;
	Context.MapSpawn.InitializeParticle.Position = ParticleOwnerPosition_Emitter_Func_Output_OutPosition;
	Context.MapSpawn.InitializeParticle.Color = MultiplyLinearColor_Emitter_Func_Output_LinearColor;
	bool Constant53 = true;
	Context.MapSpawn.InitializeParticle.WriteLifetime = Constant53;
	bool Constant54 = true;
	Context.MapSpawn.InitializeParticle.WriteMass = Constant54;
	bool Constant55 = false;
	Context.MapSpawn.InitializeParticle.WriteSpriteSize = Constant55;
	bool Constant56 = false;
	Context.MapSpawn.InitializeParticle.WriteSpriteRotation = Constant56;
	bool Constant57 = false;
	Context.MapSpawn.InitializeParticle.WriteScale = Constant57;
	float3 InitializeParticle_SimulationPosition_Emitter_Func_Output_OutPosition;
	InitializeParticle_SimulationPosition_Emitter_Func_(InitializeParticle_SimulationPosition_Emitter_Func_Output_OutPosition, Context);
	Context.MapSpawn.Particles.Position = InitializeParticle_SimulationPosition_Emitter_Func_Output_OutPosition;
	bool Constant60 = true;
	Context.MapSpawn.InitializeParticle.WriteMaterialRandom = Constant60;
	float Constant61 = 0;
	float Constant62 = 1;
	int Constant63 = -1;
	int Constant64 = 0;
	bool Constant65 = false;
	float RandomRangeFloat_Func_Output_Result3;
	RandomRangeFloat_Func_(Constant61, Constant62, Constant63, Constant64, Constant65, RandomRangeFloat_Func_Output_Result3, Context);
	Context.MapSpawn.InitializeParticle.MaterialRandom = RandomRangeFloat_Func_Output_Result3;
	EnterStatScope(1 );
	InitializeParticle_Emitter_Func_(Context);
	ExitStatScope( );
	int Constant71 = 1;
	Context.MapSpawn.CalculateSizeAndRotationalInertiaByMass.DensitybyMaterialType = Constant71;
	float Constant72 = (0.0);
	Context.MapSpawn.Local.CalculateSizeAndRotationalInertiaByMass.CurrentDensity = Constant72;
	bool Constant73 = false;
	Context.MapSpawn.CalculateSizeAndRotationalInertiaByMass.ManuallyEnterDensity = Constant73;
	float2 Constant74 = float2(0.0, 0.0);
	Context.MapSpawn.Local.CalculateSizeAndRotationalInertiaByMass.UserSpriteDimensionPreference = Constant74;
	float3 Constant75 = float3(0.0, 0.0, 0.0);
	Context.MapSpawn.Local.CalculateSizeAndRotationalInertiaByMass.UserMeshDimensionPreference = Constant75;
	bool Constant76 = false;
	Context.MapSpawn.CalculateSizeAndRotationalInertiaByMass.CalculateMeshScale = Constant76;
	float Constant77 = (0.0);
	Context.MapSpawn.Local.CalculateSizeAndRotationalInertiaByMass.ParticleVolume = Constant77;
	float Constant78 = (0.0);
	Context.MapSpawn.OUTPUT_VAR.CalculateSizeAndRotationalInertiaByMass.SphereRadius = Constant78;
	EnterStatScope(2 );
	CalculateSizeAndRotationalInertiaByMass_Emitter_Func_(Context);
	ExitStatScope( );
	Context.MapSpawn.Multiply_Float001.B = Context.MapSpawn.User.Size;
	float Multiply_Float001_Emitter_Func_Output_Result;
	Multiply_Float001_Emitter_Func_(Multiply_Float001_Emitter_Func_Output_Result, Context);
	Context.MapSpawn.SphereLocation.SphereRadius = Multiply_Float001_Emitter_Func_Output_Result;
	bool Constant97 = false;
	Context.MapSpawn.SphereLocation.OverrideRandomness = Constant97;
	int Constant98 = 0;
	Context.MapSpawn.SphereLocation.RandomnessMode = Constant98;
	bool Constant99 = false;
	Context.MapSpawn.SphereLocation.OverrideSeed = Constant99;
	int Constant100 = 0;
	Context.MapSpawn.SphereLocation.SurfaceExpansionMode = Constant100;
	bool Constant101 = true;
	Context.MapSpawn.SphereLocation.NormalizeThickness = Constant101;
	bool Constant102 = false;
	Context.MapSpawn.SphereLocation.FixedRandomSeed = Constant102;
	float3 Constant103 = float3(0.0, 0.0, 0.0);
	Context.MapSpawn.Local.SphereLocation.SphereVector = Constant103;
	bool Constant104 = false;
	Context.MapSpawn.SphereLocation.HemisphereX = Constant104;
	bool Constant105 = false;
	Context.MapSpawn.SphereLocation.HemisphereY = Constant105;
	bool Constant106 = false;
	Context.MapSpawn.SphereLocation.HemisphereZ = Constant106;
	Context.MapSpawn.SphereLocation.SphereOrigin = Context.MapSpawn.Particles.Position;
	int Constant107 = 2;
	Context.MapSpawn.SphereLocation.CoordinateSpace = Constant107;
	float3 Constant108 = float3(0.0, 0.0, 0.0);
	Context.MapSpawn.OUTPUT_VAR.SphereLocation.SphereNormal = Constant108;
	EnterStatScope(3 );
	SphereLocation_Emitter_Func_(Context);
	ExitStatScope( );
	bool Constant132 = false;
	Context.MapSpawn.UniformRangedFloat.OverrideRandomness = Constant132;
	int Constant133 = 0;
	Context.MapSpawn.UniformRangedFloat.RandomnessMode = Constant133;
	bool Constant134 = false;
	Context.MapSpawn.UniformRangedFloat.OverrideSeed = Constant134;
	bool Constant135 = false;
	Context.MapSpawn.UniformRangedFloat.FixedRandomSeed = Constant135;
	float UniformRangedFloat_Emitter_Func_Output_UniformRangedFloat;
	UniformRangedFloat_Emitter_Func_(UniformRangedFloat_Emitter_Func_Output_UniformRangedFloat, Context);
	Context.MapSpawn.Multiply_Float.A = UniformRangedFloat_Emitter_Func_Output_UniformRangedFloat;
	Context.MapSpawn.Multiply_Float.B = Context.MapSpawn.User.Size;
	float Multiply_Float_Emitter_Func_Output_Result;
	Multiply_Float_Emitter_Func_(Multiply_Float_Emitter_Func_Output_Result, Context);
	Context.MapSpawn.VectorFromFloat.Value = Multiply_Float_Emitter_Func_Output_Result;
	float3 VectorFromFloat_Emitter_Func_Output_Vec3;
	VectorFromFloat_Emitter_Func_(VectorFromFloat_Emitter_Func_Output_Vec3, Context);
	int Constant138 = 0;
	Context.MapSpawn.AddVelocity.Velocity = Context.MapSpawn.OUTPUT_VAR.SphereLocation.SphereNormal;
	Context.MapSpawn.AddVelocity.ScaleAddedVelocity = VectorFromFloat_Emitter_Func_Output_Vec3;
	Context.MapSpawn.AddVelocity.CoordinateSpace = Constant138;
	EnterStatScope(4 );
	AddVelocity_Emitter_Func_(Context);
	ExitStatScope( );




	Context.MapSpawn.Particles.PreviousVelocity = Context.MapSpawn.Particles.Velocity;
	Context.MapSpawn.Particles.Initial.SpriteSize = Context.MapSpawn.Particles.SpriteSize;




}
void SimulateMapUpdate(inout FSimulationContext Context)
{

	bool Constant142 = (false);
	Context.MapUpdate.OUTPUT_VAR.ParticleState.FirstFrame = Constant142;
	bool Constant143 = true;
	Context.MapUpdate.DataInstance.Alive = Constant143;
	Context.MapUpdate.ParticleState.DeltaTime = Context.MapUpdate.Engine.DeltaTime;
	Context.MapUpdate.ParticleState.Lifetime = Context.MapUpdate.Particles.Lifetime;
	EnterStatScope(5 );
	ParticleState_Emitter_Func_(Context);
	ExitStatScope( );
	float3 Constant147 = float3(0,0,0);
	Context.MapUpdate.Transient.PhysicsForce = Constant147;
	bool Constant148 = true;
	EnterStatScope(6 );
	GravityForce_Emitter_Func_(Context);
	ExitStatScope( );
	float Constant153 = 0;
	Context.MapUpdate.Transient.PhysicsDrag = Constant153;
	float Constant154 = 0;
	Context.MapUpdate.Transient.PhysicsRotationalDrag = Constant154;
	EnterStatScope(7 );
	Drag_Emitter_Func_(Context);
	ExitStatScope( );
	bool Constant155 = true;
	Context.MapUpdate.Collision.RandomizeCollisionNormalVector = Constant155;
	float Constant156 = (0.0);
	Context.MapUpdate.Local.Collision.ModuleParticleRadius = Constant156;
	float3 Constant157 = float3(0.0, 0.0, 0.0);
	Context.MapUpdate.OUTPUT_VAR.Collision.TempPreviousPosition = Constant157;
	float3 Constant158 = float3(0.0, 0.0, 0.0);
	Context.MapUpdate.OUTPUT_VAR.Collision.TempPreviousForce = Constant158;
	float3 Constant159 = float3(0.0, 0.0, 0.0);
	Context.MapUpdate.OUTPUT_VAR.Collision.TempPreviousVelocity = Constant159;
	bool Constant160 = true;
	Context.MapUpdate.Collision.CollisionEnabled = Constant160;
	bool Constant161 = false;
	Context.MapUpdate.Local.Collision.UpdateMeshRotation = Constant161;
	float Constant162 = (0.0);
	Context.MapUpdate.Collision.CollisionQueryAndResponse.DynamicFrictionCoefficient = Constant162;
	float Constant163 = (0.0);
	Context.MapUpdate.Collision.CollisionQueryAndResponse001.DynamicFrictionCoefficient = Constant163;
	float Constant164 = (0.0);
	Context.MapUpdate.Collision.CollisionQueryAndResponse.StaticFrictionCoefficient = Constant164;
	float Constant165 = (0.0);
	Context.MapUpdate.Collision.CollisionQueryAndResponse001.StaticFrictionCoefficient = Constant165;
	float Constant166 = (0.0);
	Context.MapUpdate.Collision.CollisionQueryAndResponse.StaticFrictionEngagementSpeed = Constant166;
	float Constant167 = (0.0);
	Context.MapUpdate.Collision.CollisionQueryAndResponse001.StaticFrictionEngagementSpeed = Constant167;
	float Constant168 = (0.0);
	Context.MapUpdate.Collision.CollisionQueryAndResponse.ParticleRadius = Constant168;
	float Constant169 = (0.0);
	Context.MapUpdate.Collision.CollisionQueryAndResponse001.ParticleRadius = Constant169;
	float Constant170 = (0.0);
	Context.MapUpdate.Collision.CollisionQueryAndResponse.ParticleRestitutionCoeffiecient = Constant170;
	float Constant171 = (0.0);
	Context.MapUpdate.Collision.CollisionQueryAndResponse001.ParticleRestitutionCoeffiecient = Constant171;
	float Constant172 = (0.0);
	Context.MapUpdate.Collision.CollisionQueryAndResponse.CollisionNormalRandomizationPercentage = Constant172;
	float Constant173 = (0.0);
	Context.MapUpdate.Collision.CollisionQueryAndResponse001.CollisionNormalRandomizationPercentage = Constant173;
	bool Constant174 = (false);
	Context.MapUpdate.Collision.CollisionQueryAndResponse.CollisionEnabled = Constant174;
	bool Constant175 = (false);
	Context.MapUpdate.Collision.CollisionQueryAndResponse001.CollisionEnabled = Constant175;
	bool Constant176 = (false);
	Context.MapUpdate.Collision.CollisionQueryAndResponse.RandomizeCollisionNormal = Constant176;
	bool Constant177 = (false);
	Context.MapUpdate.Collision.CollisionQueryAndResponse001.RandomizeCollisionNormal = Constant177;
	float Constant178 = (0.0);
	Context.MapUpdate.Collision.CollisionQueryAndResponse001.BounceCollisionFriction = Constant178;
	float Constant179 = (0.0);
	Context.MapUpdate.Collision.CollisionQueryAndResponse.BounceCollisionFriction = Constant179;
	Context.MapUpdate.Collision.CorrectInterpenetration = Context.MapUpdate.OUTPUT_VAR.ParticleState.FirstFrame;
	float Constant180 = (0.0);
	Context.MapUpdate.Collision.CollisionQueryAndResponse.MaxIntersectionCorrectionDistance = Constant180;
	float Constant181 = (0.0);
	Context.MapUpdate.Collision.CollisionQueryAndResponse001.MaxIntersectionCorrectionDistance = Constant181;
	float Constant182 = (0.0);
	Context.MapUpdate.Collision.CollisionQueryAndResponse.TraceVectorLengthMultiplier = Constant182;
	float Constant183 = (0.0);
	Context.MapUpdate.Collision.CollisionQueryAndResponse001.TraceVectorLengthMultiplier = Constant183;
	float Constant184 = (0.0);
	Context.MapUpdate.Collision.CollisionQueryAndResponse.MaxTraceLength = Constant184;
	float Constant185 = (0.0);
	Context.MapUpdate.Collision.CollisionQueryAndResponse001.MaxTraceLength = Constant185;
	Context.MapUpdate.Transient.PhysicsDeltaTime = Context.MapUpdate.Engine.DeltaTime;
	float3 Constant186 = float3(0.0, 0.0, 0.0);
	Context.MapUpdate.Transient.CollisionParticleWorldPosition = Constant186;
	float Constant187 = (0.0);
	Context.MapUpdate.Transient.CollisionDistanceToCollision = Constant187;
	bool Constant188 = (false);
	Context.MapUpdate.Transient.CollisionValid = Constant188;
	float3 Constant189 = float3(0,0,0);
	Context.MapUpdate.Transient.CollisionNormal = Constant189;
	float3 Constant190 = float3(0.0, 0.0, 0.0);
	Context.MapUpdate.Transient.CollisionVelocity = Constant190;
	float Constant191 = (0.0);
	Context.MapUpdate.Transient.CollisionFriction = Constant191;
	float Constant192 = (0.0);
	Context.MapUpdate.Transient.CollisionRestitution = Constant192;
	bool Constant193 = (false);
	Context.MapUpdate.OUTPUT_VAR.Collision.ModuleCollision1Valid = Constant193;
	float3 Constant194 = float3(0.0, 0.0, 0.0);
	Context.MapUpdate.OUTPUT_VAR.Collision.ModuleCollision1Normal = Constant194;
	bool Constant195 = (false);
	Context.MapUpdate.OUTPUT_VAR.Collision.ModuleCollision2Valid = Constant195;
	float3 Constant196 = float3(0.0, 0.0, 0.0);
	Context.MapUpdate.OUTPUT_VAR.Collision.ModuleCollision2Normal = Constant196;
	bool Constant197 = true;
	Context.MapUpdate.Collision.EnableRestState = Constant197;
	bool Constant198 = false;
	Context.MapUpdate.Collision.ControlRestStateViaSurfaceNormal = Constant198;
	EnterStatScope(8 );
	Collision_Emitter_Func_(Context);
	ExitStatScope( );
	Context.MapUpdate.SolveForcesAndVelocity.DeltaTime = Context.MapUpdate.Transient.PhysicsDeltaTime;
	float Constant377 = (0.0);
	Context.MapUpdate.Local.SolveForcesAndVelocity.DeltaTime = Constant377;
	Context.MapUpdate.SolveForcesAndVelocity.Force = Context.MapUpdate.Transient.PhysicsForce;
	Context.MapUpdate.SolveForcesAndVelocity.Velocity = Context.MapUpdate.Particles.Velocity;
	Context.MapUpdate.SolveForcesAndVelocity.Mass = Context.MapUpdate.Particles.Mass;
	float3 Constant378 = float3(0.0, 0.0, 0.0);
	Context.MapUpdate.Local.SolveForcesAndVelocity.PhysicsForce = Constant378;
	float3 Constant379 = float3(0.0, 0.0, 0.0);
	Context.MapUpdate.OUTPUT_VAR.SolveForcesAndVelocity.Velocity = Constant379;
	float Constant380 = (0.0);
	Context.MapUpdate.Local.SolveForcesAndVelocity.Mass = Constant380;
	Context.MapUpdate.SolveForcesAndVelocity.PreviousVelocity = Context.MapUpdate.Particles.PreviousVelocity;
	Context.MapUpdate.SolveForcesAndVelocity.Position = Context.MapUpdate.Particles.Position;
	float3 Constant381 = float3(0.0, 0.0, 0.0);
	Context.MapUpdate.OUTPUT_VAR.SolveForcesAndVelocity.Position = Constant381;
	bool Constant382 = true;
	Context.MapUpdate.SolveForcesAndVelocity.WritetoIntrinsicProperties = Constant382;
	EnterStatScope(9 );
	SolveForcesAndVelocity_Emitter_Func_(Context);
	ExitStatScope( );
	bool Constant388 = true;
	Context.MapUpdate.SpriteSizeScaleByVelocity.SampleScaleFactorByCurve = Constant388;
	Context.MapUpdate.SpriteSizeScaleByVelocity.SourceVelocity = Context.MapUpdate.Particles.Velocity;
	float Constant389 = (0.0);
	Context.MapUpdate.Local.SpriteSizeScaleByVelocity.NormalizedVelocityRange = Constant389;
	float2 Constant390 = float2(1,1);
	Context.MapUpdate.Transient.SpriteSizeScaleFactor = Constant390;
	Context.MapUpdate.SpriteSizeScaleByVelocity.InitialSpriteSize = Context.MapUpdate.Particles.Initial.SpriteSize;
	EnterStatScope(10 );
	SpriteSizeScaleByVelocity_Emitter_Func_(Context);
	ExitStatScope( );
	Context.MapUpdate.FloatFromCurve.CurveIndex = Context.MapUpdate.Particles.NormalizedAge;
	float FloatFromCurve_Emitter_Func_Output_Value;
	FloatFromCurve_Emitter_Func_(FloatFromCurve_Emitter_Func_Output_Value, Context);
	Context.MapUpdate.Vector2DFromFloat.Value = FloatFromCurve_Emitter_Func_Output_Value;
	float2 Vector2DFromFloat_Emitter_Func_Output_Vec2;
	Vector2DFromFloat_Emitter_Func_(Vector2DFromFloat_Emitter_Func_Output_Vec2, Context);
	Context.MapUpdate.ScaleSpriteSize.ScaleFactor = Vector2DFromFloat_Emitter_Func_Output_Vec2;
	Context.MapUpdate.ScaleSpriteSize.InitialSpriteSize = Context.MapUpdate.Particles.Initial.SpriteSize;
	EnterStatScope(11 );
	ScaleSpriteSize_Emitter_Func_(Context);
	ExitStatScope( );



}
void SimulateMain()
{
EnterStatScope(12 );

	FSimulationContext Context = (FSimulationContext)0;
	Context.MapSpawn.Particles.Age = 0.0f;
	Context.MapSpawn.Particles.Collision.CollisionQueryAndResponse.CollisionID = 0;
	Context.MapSpawn.Particles.Collision.CollisionQueryAndResponse001.CollisionID = 0;
	Context.MapSpawn.Particles.Color.r = 0.0f;
	Context.MapSpawn.Particles.Color.g = 0.0f;
	Context.MapSpawn.Particles.Color.b = 0.0f;
	Context.MapSpawn.Particles.Color.a = 0.0f;
	Context.MapSpawn.Particles.HasCollided = false;
	Context.MapSpawn.Particles.Initial.SpriteSize.x = 0.0f;
	Context.MapSpawn.Particles.Initial.SpriteSize.y = 0.0f;
	Context.MapSpawn.Particles.Lifetime = 0.0f;
	Context.MapSpawn.Particles.Mass = 0.0f;
	Context.MapSpawn.Particles.MaterialRandom = 0.0f;
	Context.MapSpawn.Particles.NormalizedAge = 0.0f;
	Context.MapSpawn.Particles.NumberOfCollisions = 0;
	Context.MapSpawn.Particles.Position.x = 0.0f;
	Context.MapSpawn.Particles.Position.y = 0.0f;
	Context.MapSpawn.Particles.Position.z = 0.0f;
	Context.MapSpawn.Particles.PreviousVelocity.x = 0.0f;
	Context.MapSpawn.Particles.PreviousVelocity.y = 0.0f;
	Context.MapSpawn.Particles.PreviousVelocity.z = 0.0f;
	Context.MapSpawn.Particles.RestCounter = 0.0f;
	Context.MapSpawn.Particles.RotationalInertia = 0.0f;
	Context.MapSpawn.Particles.Scale.x = 0.0f;
	Context.MapSpawn.Particles.Scale.y = 0.0f;
	Context.MapSpawn.Particles.Scale.z = 0.0f;
	Context.MapSpawn.Particles.SpriteRotation = 0.0f;
	Context.MapSpawn.Particles.SpriteSize.x = 0.0f;
	Context.MapSpawn.Particles.SpriteSize.y = 0.0f;
	Context.MapSpawn.Particles.UniqueID = 0;
	Context.MapSpawn.Particles.Velocity.x = 0.0f;
	Context.MapSpawn.Particles.Velocity.y = 0.0f;
	Context.MapSpawn.Particles.Velocity.z = 0.0f;
	Context.MapSpawn.Particles.UniqueID = Engine_Emitter_TotalSpawnedParticles + ExecIndex();
	Context.MapSpawn.User.Color = User_Color;
	Context.MapSpawn.User.SecondaryColor = User_SecondaryColor;
	Context.MapSpawn.User.ColorBoost = User_ColorBoost;
	Context.MapSpawn.Constants.Emitter.UniformRangedLinearColor.RandomSeed = Constants_Emitter_UniformRangedLinearColor_RandomSeed;
	Context.MapSpawn.Emitter.RandomSeed = Emitter_RandomSeed;
	Context.MapSpawn.Engine.System.TickCount = Engine_System_TickCount;
	Context.MapSpawn.Constants.Emitter.UniformRangedFloat004.Minimum = Constants_Emitter_UniformRangedFloat004_Minimum;
	Context.MapSpawn.Constants.Emitter.UniformRangedFloat004.Maximum = Constants_Emitter_UniformRangedFloat004_Maximum;
	Context.MapSpawn.Constants.Emitter.UniformRangedFloat004.RandomSeed = Constants_Emitter_UniformRangedFloat004_RandomSeed;
	Context.MapSpawn.Constants.Emitter.UniformRangedFloat005.Minimum = Constants_Emitter_UniformRangedFloat005_Minimum;
	Context.MapSpawn.Constants.Emitter.UniformRangedFloat005.Maximum = Constants_Emitter_UniformRangedFloat005_Maximum;
	Context.MapSpawn.Constants.Emitter.UniformRangedFloat005.RandomSeed = Constants_Emitter_UniformRangedFloat005_RandomSeed;
	Context.MapSpawn.Engine.Owner.Position = Engine_Owner_Position.xyz;
	Context.MapSpawn.Constants.Emitter.InitializeParticle.SpriteSize = Constants_Emitter_InitializeParticle_SpriteSize;
	Context.MapSpawn.Constants.Emitter.InitializeParticle.SpriteRotation = Constants_Emitter_InitializeParticle_SpriteRotation;
	Context.MapSpawn.Constants.Emitter.InitializeParticle.MeshScale = Constants_Emitter_InitializeParticle_MeshScale;
	Context.MapSpawn.Constants.Emitter.CalculateSizeAndRotationalInertiaByMass.ManuallyEnteredDensityASC40kgASC47mASC943ASC41 = Constants_Emitter_CalculateSizeAndRotationalInertiaByMass_ManuallyEnteredDensityASC40kgASC47mASC943ASC41;
	Context.MapSpawn.Constants.Emitter.CalculateSizeAndRotationalInertiaByMass.MassModulation = Constants_Emitter_CalculateSizeAndRotationalInertiaByMass_MassModulation;
	Context.MapSpawn.Constants.Emitter.CalculateSizeAndRotationalInertiaByMass.SpriteSizeModulation = Constants_Emitter_CalculateSizeAndRotationalInertiaByMass_SpriteSizeModulation;
	Context.MapSpawn.Constants.Emitter.CalculateSizeAndRotationalInertiaByMass.Width = Constants_Emitter_CalculateSizeAndRotationalInertiaByMass_Width;
	Context.MapSpawn.Constants.Emitter.CalculateSizeAndRotationalInertiaByMass.Height = Constants_Emitter_CalculateSizeAndRotationalInertiaByMass_Height;
	Context.MapSpawn.Constants.Emitter.CalculateSizeAndRotationalInertiaByMass.Depth = Constants_Emitter_CalculateSizeAndRotationalInertiaByMass_Depth;
	Context.MapSpawn.Constants.Emitter.CalculateSizeAndRotationalInertiaByMass.ModelProportions = Constants_Emitter_CalculateSizeAndRotationalInertiaByMass_ModelProportions;
	Context.MapSpawn.Constants.Emitter.CalculateSizeAndRotationalInertiaByMass.InitialModelDimensions = Constants_Emitter_CalculateSizeAndRotationalInertiaByMass_InitialModelDimensions;
	Context.MapSpawn.User.Size = User_Size;
	Context.MapSpawn.Constants.Emitter.Multiply_Float001.A = Constants_Emitter_Multiply_Float001_A;
	Context.MapSpawn.Constants.Emitter.SphereLocation.RandomSeed = Constants_Emitter_SphereLocation_RandomSeed;
	Context.MapSpawn.Constants.Emitter.SphereLocation.SurfaceOnlyBandThickness = Constants_Emitter_SphereLocation_SurfaceOnlyBandThickness;
	Context.MapSpawn.Constants.Emitter.SphereLocation.NonUniformScale = Constants_Emitter_SphereLocation_NonUniformScale;
	Context.MapSpawn.Constants.Emitter.SphereLocation.Offset = Constants_Emitter_SphereLocation_Offset;
	Context.MapSpawn.Constants.Emitter.SphereLocation.SpawnGroupMask = Constants_Emitter_SphereLocation_SpawnGroupMask;
	Context.MapSpawn.Engine.Owner.SystemLocalToWorld = Engine_Owner_SystemLocalToWorld;
	Context.MapSpawn.Engine.Owner.SystemWorldToLocal = Engine_Owner_SystemWorldToLocal;
	Context.MapSpawn.Engine.Owner.SystemLocalToWorldNoScale = Engine_Owner_SystemLocalToWorldNoScale;
	Context.MapSpawn.Engine.Owner.SystemWorldToLocalNoScale = Engine_Owner_SystemWorldToLocalNoScale;
	Context.MapSpawn.Constants.Emitter.UniformRangedFloat.Minimum = Constants_Emitter_UniformRangedFloat_Minimum;
	Context.MapSpawn.Constants.Emitter.UniformRangedFloat.Maximum = Constants_Emitter_UniformRangedFloat_Maximum;
	Context.MapSpawn.Constants.Emitter.UniformRangedFloat.RandomSeed = Constants_Emitter_UniformRangedFloat_RandomSeed;
	Context.MapUpdate.Engine.DeltaTime = Engine_DeltaTime;
	Context.MapUpdate.Constants.Emitter.GravityForce.Gravity = Constants_Emitter_GravityForce_Gravity;
	Context.MapUpdate.Engine.Owner.SystemLocalToWorld = Engine_Owner_SystemLocalToWorld;
	Context.MapUpdate.Engine.Owner.SystemWorldToLocal = Engine_Owner_SystemWorldToLocal;
	Context.MapUpdate.Engine.Owner.SystemLocalToWorldNoScale = Engine_Owner_SystemLocalToWorldNoScale;
	Context.MapUpdate.Engine.Owner.SystemWorldToLocalNoScale = Engine_Owner_SystemWorldToLocalNoScale;
	Context.MapUpdate.Constants.Emitter.Drag.Drag = Constants_Emitter_Drag_Drag;
	Context.MapUpdate.Constants.Emitter.Drag.RotationalDrag = Constants_Emitter_Drag_RotationalDrag;
	Context.MapUpdate.Constants.Emitter.Collision.ParticleRadiusScale = Constants_Emitter_Collision_ParticleRadiusScale;
	Context.MapUpdate.Constants.Emitter.Collision.Friction = Constants_Emitter_Collision_Friction;
	Context.MapUpdate.Constants.Emitter.Collision.StaticFriction = Constants_Emitter_Collision_StaticFriction;
	Context.MapUpdate.Constants.Emitter.Collision.StaticFrictionEngagementSpeed = Constants_Emitter_Collision_StaticFrictionEngagementSpeed;
	Context.MapUpdate.Constants.Emitter.Collision.Restitution = Constants_Emitter_Collision_Restitution;
	Context.MapUpdate.Constants.Emitter.Collision.RandomizeCollisionNormal = Constants_Emitter_Collision_RandomizeCollisionNormal;
	Context.MapUpdate.Constants.Emitter.Collision.FrictionDuringaBounce = Constants_Emitter_Collision_FrictionDuringaBounce;
	Context.MapUpdate.Constants.Emitter.Collision.CPUTraceVectorLengthMultiplier = Constants_Emitter_Collision_CPUTraceVectorLengthMultiplier;
	Context.MapUpdate.Constants.Emitter.Collision.MaxCPUTraceLength = Constants_Emitter_Collision_MaxCPUTraceLength;
	Context.MapUpdate.Constants.Emitter.Collision.PercentageofPenetrationBeforeRest = Constants_Emitter_Collision_PercentageofPenetrationBeforeRest;
	Context.MapUpdate.Constants.Emitter.Collision.RestStateTimeRange = Constants_Emitter_Collision_RestStateTimeRange;
	Context.MapUpdate.Constants.Emitter.Collision.MaximumPenetrationCorrectionDistance = Constants_Emitter_Collision_MaximumPenetrationCorrectionDistance;
	Context.MapUpdate.Constants.Emitter.Collision.ValidCollisionPlaneNormalForRest = Constants_Emitter_Collision_ValidCollisionPlaneNormalForRest;
	Context.MapUpdate.Constants.Emitter.Collision.MinimumCollisionNormalASC47RestNormalAlignmentPercentage = Constants_Emitter_Collision_MinimumCollisionNormalASC47RestNormalAlignmentPercentage;
	Context.MapUpdate.Constants.Emitter.Collision.AdvancedAgingRate = Constants_Emitter_Collision_AdvancedAgingRate;
	Context.MapUpdate.Constants.Emitter.SolveForcesAndVelocity.SpeedLimit = Constants_Emitter_SolveForcesAndVelocity_SpeedLimit;
	Context.MapUpdate.Constants.Emitter.SolveForcesAndVelocity.AccelerationLimit = Constants_Emitter_SolveForcesAndVelocity_AccelerationLimit;
	Context.MapUpdate.Constants.Emitter.SpriteSizeScaleByVelocity.VelocityThreshold = Constants_Emitter_SpriteSizeScaleByVelocity_VelocityThreshold;
	Context.MapUpdate.Constants.Emitter.SpriteSizeScaleByVelocity.MinScaleFactor = Constants_Emitter_SpriteSizeScaleByVelocity_MinScaleFactor;
	Context.MapUpdate.Constants.Emitter.SpriteSizeScaleByVelocity.MaxScaleFactor = Constants_Emitter_SpriteSizeScaleByVelocity_MaxScaleFactor;
	Context.MapUpdate.Constants.Emitter.FloatFromCurve.ScaleCurve = Constants_Emitter_FloatFromCurve_ScaleCurve;
	Context.MapUpdate.Engine.Time = Engine_Time;
	Context.MapUpdate.Engine.InverseDeltaTime = Engine_InverseDeltaTime;
	Context.MapUpdate.Engine.ExecutionCount = Engine_ExecutionCount;
	Context.MapUpdate.Emitter.SpawnRate = Emitter_SpawnRate;
	Context.MapUpdate.Emitter.SpawnInterval = Emitter_SpawnInterval;
	Context.MapUpdate.Emitter.InterpSpawnStartDt = Emitter_InterpSpawnStartDt;
	Context.MapUpdate.Emitter.SpawnGroup = Emitter_SpawnGroup;
	Context.MapUpdate.Engine.Emitter.TotalSpawnedParticles = Engine_Emitter_TotalSpawnedParticles;
	Context.MapUpdate.Emitter.RandomSeed = Emitter_RandomSeed;
	ReadDataSets(Context);
	InterpolateParameters(Context);
	SimulateMapSpawn(Context);

	Context.MapUpdate.Particles = Context.MapSpawn.Particles;


	SimulateMapUpdate(Context);
	WriteDataSets(Context);
	{
	bool bValid = Context.MapUpdate.DataInstance.Alive;
	int TmpWriteIndex = OutputIndex(0, true, bValid);
	OutputDataFloat(0, 0, TmpWriteIndex, Context.MapUpdate.Particles.Age);
	OutputDataInt(0, 1, TmpWriteIndex, Context.MapUpdate.Particles.Collision.CollisionQueryAndResponse.CollisionID);
	OutputDataInt(0, 2, TmpWriteIndex, Context.MapUpdate.Particles.Collision.CollisionQueryAndResponse001.CollisionID);
	OutputDataFloat(0, 3, TmpWriteIndex, Context.MapUpdate.Particles.Color.r);
	OutputDataFloat(0, 4, TmpWriteIndex, Context.MapUpdate.Particles.Color.g);
	OutputDataFloat(0, 5, TmpWriteIndex, Context.MapUpdate.Particles.Color.b);
	OutputDataFloat(0, 6, TmpWriteIndex, Context.MapUpdate.Particles.Color.a);
	OutputDataBool(0, 7, TmpWriteIndex, Context.MapUpdate.Particles.HasCollided);
	OutputDataFloat(0, 8, TmpWriteIndex, Context.MapUpdate.Particles.Initial.SpriteSize.x);
	OutputDataFloat(0, 9, TmpWriteIndex, Context.MapUpdate.Particles.Initial.SpriteSize.y);
	OutputDataFloat(0, 10, TmpWriteIndex, Context.MapUpdate.Particles.Lifetime);
	OutputDataFloat(0, 11, TmpWriteIndex, Context.MapUpdate.Particles.Mass);
	OutputDataFloat(0, 12, TmpWriteIndex, Context.MapUpdate.Particles.MaterialRandom);
	OutputDataFloat(0, 13, TmpWriteIndex, Context.MapUpdate.Particles.NormalizedAge);
	OutputDataInt(0, 14, TmpWriteIndex, Context.MapUpdate.Particles.NumberOfCollisions);
	OutputDataFloat(0, 15, TmpWriteIndex, Context.MapUpdate.Particles.Position.x);
	OutputDataFloat(0, 16, TmpWriteIndex, Context.MapUpdate.Particles.Position.y);
	OutputDataFloat(0, 17, TmpWriteIndex, Context.MapUpdate.Particles.Position.z);
	OutputDataFloat(0, 18, TmpWriteIndex, Context.MapUpdate.Particles.PreviousVelocity.x);
	OutputDataFloat(0, 19, TmpWriteIndex, Context.MapUpdate.Particles.PreviousVelocity.y);
	OutputDataFloat(0, 20, TmpWriteIndex, Context.MapUpdate.Particles.PreviousVelocity.z);
	OutputDataFloat(0, 21, TmpWriteIndex, Context.MapUpdate.Particles.RestCounter);
	OutputDataFloat(0, 22, TmpWriteIndex, Context.MapUpdate.Particles.RotationalInertia);
	OutputDataFloat(0, 23, TmpWriteIndex, Context.MapUpdate.Particles.Scale.x);
	OutputDataFloat(0, 24, TmpWriteIndex, Context.MapUpdate.Particles.Scale.y);
	OutputDataFloat(0, 25, TmpWriteIndex, Context.MapUpdate.Particles.Scale.z);
	OutputDataFloat(0, 26, TmpWriteIndex, Context.MapUpdate.Particles.SpriteRotation);
	OutputDataFloat(0, 27, TmpWriteIndex, Context.MapUpdate.Particles.SpriteSize.x);
	OutputDataFloat(0, 28, TmpWriteIndex, Context.MapUpdate.Particles.SpriteSize.y);
	OutputDataInt(0, 29, TmpWriteIndex, Context.MapUpdate.Particles.UniqueID);
	OutputDataFloat(0, 30, TmpWriteIndex, Context.MapUpdate.Particles.Velocity.x);
	OutputDataFloat(0, 31, TmpWriteIndex, Context.MapUpdate.Particles.Velocity.y);
	OutputDataFloat(0, 32, TmpWriteIndex, Context.MapUpdate.Particles.Velocity.z);
	}
ExitStatScope( );
}
#line 703 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"

#if 0 /*BEGIN_RESOURCE_TABLES*/
NULL, 0
NULL, NULL, 0, 0
#endif /*END_RESOURCE_TABLES*/
